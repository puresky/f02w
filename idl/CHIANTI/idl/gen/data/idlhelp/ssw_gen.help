%VERSION:2
468
3771
0:ADD_PATH
1230:ADD_TAG
1937:ADJUST
3563:ADJUST_COLOR
5685:AMOEBA
8279:AMOEBA_F
9904:ANYTIM2CAL
13840:ANYTIM2UTC
17575:ARCMIN2HEL
19201:ARR2STR
20620:ARRAY_MATCH
22294:ASCII
22894:ASK
24754:AVERAGE
26471:BELL
27238:BIN2DEC
28715:BIN2HEX
30377:BLANK
31138:BLINK
33878:BOOST_ARRAY
35255:BOX_AV
36835:BOX_CRS
39505:BOX_CURSOR
42080:BOX_CURSOR2
45798:BREAK_FILE
47747:BREAK_PATH
49622:BSCALE
52353:BSORT
54118:BYTESWAP
55274:BYTSCLI
58229:CATEGORY
60443:CDD
62511:CDS2JD
64741:CDS_GAUSS
67371:CDSPICKFILE
71085:CDUP
71725:CHECK_CONFLICT
72985:CHECK_EXT_TIME
74822:CHECK_FITS
77978:CHECK_INT_TIME
80628:CHECK_TAPE_DRV
82481:CHK_DIR
83871:CHKARG
85621:CHKLOG
86974:CIRCLE_SYM
88131:CLEANPLOT
89539:CLEAR_STRUCT
90249:CLIPBOX
91045:CLS
91707:CMP_ALL_PRO
92912:CMP_FILES
94004:CMP_LIBS
95767:CMP_TREES
97969:COLOR_BAR
102026:COMBINE_COLORS
104903:COMBINE_VEL
108343:CONCAT2D
109541:CONCAT3D
110757:CONCAT4DOS
112424:CONCAT_DIR
114620:CONCAT_STRUCT
115347:CONGRDI
117250:CONTV
121145:COPY_STRUCT
123363:COUNTDOWN
125547:COVSRT
126481:CROSS_CORR2
128459:CRS
131075:CW_DROPLIST
132320:CW_TVZOOM
136896:DATA_CHK
138195:DATATYPE
140474:DATE2MJD
142947:DATE_CODE
143784:DB_ENT2EXT
144676:DB_ENT2HOST
145657:DB_INFO
148079:DB_ITEM
149898:DB_ITEM_INFO
151613:DB_OR
152870:DB_TITLES
153950:DBBUILD
156721:DBCLOSE
157575:DBCREATE
160694:DBDELETE
162657:DBEDIT
165909:DBEDIT_BASIC
168156:DBEXT
169543:DBEXT_DBF
171283:DBEXT_IND
172422:DBFIND
176406:DBFIND_ENTRY
177365:DBFIND_SORT
178892:DBFPARSE
180229:DBGET
182493:DBHELP
184988:DBINDEX
186618:DBINDEX_BLK
187847:DBMATCH
190579:DBOPEN
193337:DBPRINT
196684:DBPUT
198089:DBRD
199891:DBSEARCH
201291:DBSORT
202923:DBTITLE
203810:DBUPDATE
206014:DBVAL
207068:DBWRT
208693:DBXPUT
209871:DBXVAL
211139:DD
211891:DEC2BIN
213255:DEC2HEX
214675:DEF_UTPLOT
215787:DELETE_FILE
216779:DELVARX
217693:DETABIFY
218744:DEVICELIB
219662:DHELP
221130:DISMOUNT
222741:DMY2YMD
223479:DOC
224972:DOC_MENU
228276:DOY2UTC
230448:DPRINT
232077:DSP_STRUCT
233713:ELLIPSE
234679:ENABLEFLAG
237545:EPLOT
238706:EXIST
239293:EXPAND_TV
243782:EXPTV
248831:EXT_RANGE
250129:FASTFIT
251518:FDECOMP
252814:FILE_ACC
257048:FILE_EXIST
258930:FILE_STAT
259728:FILL_BOX
261619:FILL_CATEGORY
262637:FILL_TFTD
264257:FIND_ALL_DIR
266657:FIND_COMMON
267681:FIND_DATA_RUNS
270601:FIND_DUP
271920:FIND_WITH_DEF
274691:FIT_GAUSS
277102:FITS2GIF
278413:FITS_INFO
281026:FITSTAPE
282869:FITTER
284349:FLAG_LONG_NAMES
285317:FLASH_MSG
286823:FMT_VECT
288345:FORM_CHISQR
289693:FORM_FILENAME
291382:FORM_INT
294621:FORM_SIGMAS
296125:FORM_VEL
299396:FUNCIR
300337:FXADDPAR
304132:FXBADDCOL
308025:FXBCLOSE
309506:FXBCOLNUM
311552:FXBCREATE
313894:FXBDIMEN
315919:FXBFIND
318412:FXBFINDLUN
319640:FXBFINISH
321507:FXBHEADER
322901:FXBHELP
324096:FXBHMAKE
326209:FXBINTABLE
328826:FXBISOPEN
330127:FXBOPEN
332410:FXBPARSE
334319:FXBREAD
339012:FXBSTATE
340158:FXBTDIM
341627:FXBTFORM
343469:FXBWRITE
346154:FXFINDEND
347287:FXHCLEAN
349078:FXHMAKE
351760:FXHMODIFY
355391:FXHREAD
356650:FXPAR
360602:FXPARPOS
362141:FXREAD
367165:FXTAPEREAD
372389:FXTAPEWRITE
376846:FXTPIO_READ
379847:FXTPIO_WRITE
382068:FXWRITE
385400:GAUSSJ
386927:GET_CENT_OFF
387917:GET_DATE
388970:GET_DFONT
389771:GET_IJ
390608:GET_IM_KEYWORD
392321:GET_LEAP_SEC
394658:GET_LIB
396004:GET_MOD
397357:GET_PROC
399571:GET_SCREEN
400641:GET_TV_SCALE
402392:GET_UNIQ_LIST
403383:GET_UTC
409139:GET_VIEWPORT
410869:GETFILES
411794:GETLOG
413037:GETTOK
414510:GOES2FLUX
415414:GOOD_PIXELS
417174:GREP
418366:HAVE_WIDGETS
419553:HAVE_WINDOWS
420740:HEADFITS
422167:HEL2ARCMIN
423917:HEX2BIN
424977:HEX2DEC
425985:HISCAL
427884:HOST_TO_IEEE
430086:HPRINT
431627:IDL_ROUTINE
432481:IEEE_TO_HOST
434639:IM_KEYWORD_SET
436129:IMAGELIB
437191:INT2UTC
442310:INT_STRETCH
445718:INTERP2
447598:JOIN_STRUCT
448205:JUSTIFY
449438:KEYBOARD_CRS
451099:LABEL_CURVE
453237:LABEL_IMAGE
455822:LABEL_LINE
457468:LABEL_SYMBOL
458911:LAST_ITEM
459932:LAT2Y
461250:LINECOLOR
463276:LIST_WITH_PATH
465149:LOAD
466907:LOAD_VEL
469175:LOC_FILE
470679:LOCAL_DIFF
473913:LSTSQR
476353:MATCH
477821:MATCH_STRUCT
478729:MAX_TAG
479309:MJD2DATE
481060:MK_GIF
482757:MK_HELP_STC
486036:MK_LIBRARY_HELP
489761:MODE_VAL
491475:MRQCOF
493118:MRQMIN
495057:N_DIMENSIONS
495942:NINT
497434:NL_LSQFIT
498111:NUM2STR
500860:NUM_CHK
502677:OPLOT_ERR
504894:OPLOT_IMAGE
508363:OPLOT_STRING
509864:OUTPLOT
511898:PATH_DIR
512987:PATH_EXPAND
514129:PB0R
515618:PCL
518520:PCLCLOSE
519902:PCLPLOT
522338:PCONVERT
525285:PD
526743:PEEK
528099:PERIODOGRAM
530529:PFIND
531763:PLOT_ERR
534020:PLOT_IMAGE
539112:PLOT_STRING
541035:POLY_VAL
543824:POPUP_MSG
545553:PPD
546210:PRESTORE
547573:PRINT_STR
549353:PRODUCT
550482:PROF
552233:PS
557091:PS_LONG
558033:PS_RESET
558862:PSCLOSE
560528:PSPLOT
564374:PSTORE
566350:PURPOSE
569083:PUT
576456:QMCLOSE
577865:QMPLOT
580534:QMS
583460:RD_ASCII
584085:READ_DEFAULT
584972:READ_KEY
586394:READFITS
590312:REARRANGE
592579:REGIS
593827:REGRESS
595514:REM_COM
596467:REM_DUP
598359:REM_MULT_CHAR
599495:REM_TAG
600138:REMCHAR
601064:REP_TAG_NAME
601742:REP_TAG_VALUE
602601:REPCHAR
603730:REPSTR
605020:RESET
606469:RESPOND_WIDG
608212:REV_SWAP
609595:REWIND
610779:RM_PATH
611841:ROOTNR
613418:ROTATION
614507:ROUND_OFF
615460:SAME_DATA
616415:SCALE_TV
619312:SCANPATH
624961:SCR_ATTRIB
626728:SCR_CHARSET
628127:SCR_CURMOV
629451:SCR_CURPOS
630659:SCR_ERASE
632057:SCR_OTHER
633294:SCR_RESET
634217:SCR_SCROLL
635622:SCREEN_SELECT
637738:SEC2UTC
639999:SELECT_BOX
641799:SELECT_O
643644:SELECT_W
645228:SELECT_X
647213:SET_LINE_COLOR
648405:SETENV
649429:SETFLAG
653154:SETIMAGE
657152:SETPLOT
659712:SETSCALE
663275:SETVIEW
666493:SETWINDOW
668360:SHORTHEX
669125:SHOW_COLORS
670981:SHOW_QUEUE
672353:SHOW_STRUCT
673316:SHOWFLAGS
674673:SIGRANGE
676771:SINCE_VERSION
678071:SIZEOF
679104:SKIPF
680609:SP_COMMON
681610:SPEC_DIR
683345:SPLIT_STRUCT
683973:STORE_ARRAY
685257:STORE_TV_SCALE
688265:STR2ARR
689873:STR2UTC
695819:STR_CHOP
696717:STR_INDEX
698122:STR_PICK
699658:STREP
700725:STRIP_ARG
701072:STRIP_DIRNAME
702329:STRIP_DOC
702717:STRN
705393:STRNUMBER
707143:STRPAD
708694:SUM_COL
709468:SUM_ROW
710233:SUN_POS
711568:SUNVIEW
712872:SXADDPAR
715609:SXDELPAR
716769:SXPAR
720149:TAG_EXIST
721391:TAI2UTC
726551:TAPRD
728357:TAPWRT
729648:TEK
730917:TEK4105
732310:TEK4211
733704:TEKMONO
735119:TEST_OPEN
736164:TEXTCLOSE
737196:TEXTOPEN
739329:TFTD
742205:TICK_VEC
743193:TIME_AVERAGE
745985:TLB_PLACE
748319:TRIM
750438:TVAXIS
755396:TVBOX
758259:TVDEVICE
760824:TVERASE
762203:TVOUT
764827:TVPLT
767149:TVPOINTS
769122:TVPOS
774139:TVPRINT
777913:TVPROF
780707:TVPROFILE
783768:TVREAD
785579:TVSCREEN
787160:TVSELECT
789101:TVSUBIMAGE
791860:TVUNSELECT
793662:TVVALUE
796269:TVZOOM
801341:TVZOOM2
806605:UITDBLIB
807723:UNSETFLAG
811000:UNSIGN
812590:UTC2DOW
815960:UTC2DOY
818700:UTC2INT
821267:UTC2SEC
823388:UTC2STR
827857:UTC2TAI
830925:UTPLOT
833796:UTSTRING
835808:VALID_NUM
837559:VALID_TIME
838438:VCHECK
839720:VEL_STRETCH
842740:WDISPLAY
847216:WEOF
848396:WHERE_TAG
850259:WHERENAN
851736:WHICH
853889:WIDG_HELP
856910:WIN
858104:WRITEFITS
860466:X2GIF
861267:XACK
862034:XALIVE
862634:XANSWER
864341:XBLINK
867669:XDOC
869286:XGAMMA
870820:XHIDE
871396:XINPUT
872497:XINTERANIMATE
878658:XKILL
879310:XLIST
880035:XLOAD
882773:XMATRIX
884240:XMOVIE
888666:XOPT
889314:XPL_STRUCT
891062:XSEL_ITEM
892186:XSEL_LIST
893744:XSELECT
896203:XSET_COLOR
897373:XSET_VALUE
898500:XSHOW
899079:XSHOW_HELP
900001:XSTRUCT
901468:XTEXT
902833:XWIN
904130:YES_NO
905335:ZPARCHECK
;+
 PROJECT:
       SOHO - CDS

 NAME:
       ADD_PATH

 PURPOSE:
       Add directory (and optionally all its subdirs) into IDL path

 EXPLANATION:

 CALLING SEQUENCE:
       ADD_PATH, path_name [,/append] [,index=index]

 INPUTS:
       path_name -- A string scalar of a valid directory name.

 OPTIONAL INPUTS:
       INDEX -- Position in the !path where the directory name is inserted;
                ignored if the keyword APPEND is set.

 OUTPUTS:
       None, but !path is changed.

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS:
       APPEND -- By default, the given directory name is added in the
                 beginning of !path. Set this keyword will add the directory
                 name in the end of !path.
       EXPAND -- Set this keyword if the PATH_NAME needs to be expanded.

 CALLS:
       CHK_DIR, CONCAT_DIR, STR_SEP, ARR2STR, DATATYPE

 COMMON BLOCKS:
       None.

 RESTRICTIONS:
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       Utilities, OS

 PREVIOUS HISTORY:
       Written October 8, 1994, by Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 2, Liyun Wang, GSFC/ARC, October 17, 1994
          Added EXPAND keyword

 VERSION:
       Version 2, October 17, 1994
;-
;+
 Project     :	SDAC

 Name        :	ADD_TAG

 Purpose     :	add a tag to a structure

 Explanation :	

 Use         : NEW_STRUCT=ADD_TAG(STRUCT,TAG,TAG_NAME)

 Inputs      :	STRUCT = input structure (array or scalar)
             : TAG_VALUE = tag variable to add 
             : TAG_NAME = tag name 

 Opt. Inputs :	None.

 Outputs     :	NEW_STRUCT = new structure

 Opt. Outputs:	None.

 Keywords    :	NAME = new name for structure

 Calls       :	CONCAT_STRUCT

 Common      :	None.

 Restrictions:	Cannot add more than one tag at a time

 Side effects:	None.

 Category    :	Structure handling

 Prev. Hist. :	None.

 Written     :	Dominic Zarro (ARC)

 Version     :	Version 1.0, 7 November 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	ADJUST()
 Purpose     : 
	Adjust the range of an image.
 Explanation : 
	Adjusts the range of an image.  Basically equivalent to using the
	">" and "<" operators, except that pixels equal to MISSING are ignored
	and not changed by this procedure.
 Use         : 
	Result = ADJUST( ARRAY, <keywords> )
 Inputs      : 
	ARRAY	= Array to be scaled.
 Opt. Inputs : 
	None.
 Outputs     : 
	Result of function is scaled image.
 Opt. Outputs: 
	None.
 Keywords    : 
	MINIMUM	= Lower limit to scale image into.  If not passed, then
		  MIN(ARRAY) is assumed.
	MAXIMUM	= Upper limit to scale image into.  If not passed, then
		  MAX(ARRAY) is assumed.
	MISSING	= Value flagging missing pixels.
 Calls       : 
	GET_IM_KEYWORD
 Common      : 
	None.
 Restrictions: 
	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, March 1991.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
 Written     : 
	William Thompson, GSFC, March 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 14 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 14 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	ADJUST_COLOR
 Purpose     : 
	Adjust the color table with the cursor.
 Explanation : 
	Use the graphics cursor to control the lower limit and range of the
	color tables.

	Cursor is repeatedly sampled.  X position is the lower limit (e.g.
	cutoff).  Y position controls range of color table.  Initially, the
	cutoff is set to 0 and the range is 255 with the cursor at the upper
	left corner.  When any key is struck the lower limit and range are
	printed and the procedure is exited.

 Use         : 
	ADJUST_COLOR  [, R,G,B ]
 Inputs      : 
	None required.
 Opt. Inputs : 
	R = Red color gun vector, 256 elements, 0 to 255.
		(usually read from device)
	G = Green color gun vector.
	B = Blue color gun vector.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	DISABLE	 = If passed, then TVSELECT is not used.
	NOCURSOR = If passed, then TVCRS is not called.  TVCRS is not called
		   for Tektronix terminals in any case.
 Calls       : 
	TVSELECT, TVUNSELECT
 Common      : 
	If the parameters are omitted, the color vectors are read using
	TVLCT,/GET.  Regardless of the number of parameters, the colors in
	common are not changed.
 Restrictions: 
	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	DMS, JULY, 1982. Written.
	WTT, AUGUST, 1990.  Ported to version 2 for non-windowed devices.
	William Thompson, April 1992, changed to use TVLCT,/GET instead of
				      common block.
 Written     : 
	David M. Stern, RSI, July 1982.
 Modified    : 
	Version 1, William Thompson, GSFC, 14 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 14 May 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	AMOEBA

 Purpose     :	Reiteratively fits an arbitrary function

 Explanation :	Fits an arbitrary function to a series of data points via a
		least-squares reiterative technique.

		The procedure used is taken from Numerical Recipes.

 Use         :	AMOEBA, X, Y, FNAME, PARAM

 Inputs      :	X	= Positions.
		Y	= Data values.
		FNAME	= Name of function to be fitted (string variable).
		PARAM	= Parameters of fit.  Passed as first guess.  Returned
			  as fitted values.

 Opt. Inputs :	None.

 Outputs     :	PARAM	= Parameters of fit.  See note above.

 Opt. Outputs:	None.

 Keywords    :	
	ACCURACY = Accuracy to cut off at.  Defaults to 1E-5.
	MAX_ITER = Maximum number of reiterations.  Defaults to 20.
	POISSON	 = If set, then a Poisson error distribution is assumed, and
		   the weights are set accordingly to 1/Y.
	ERROR	 = Array of errors.  The weights are set accordingly to
		   1/ERROR^2 (normal distribution).  Overrides POISSON.
	LAMBDA	 = Initial step sizes for PARAM, or if scalar then fraction of
		   PARAM.  Defaults to 1E-2.
	NOPRINT	 = If set, then no printout is generated.
	CHISQR	 = Returned value of chi-squared.  Only relevant if ERROR
		   passed explicitly.
	N_ITER	 = Number of iterations used.
	ABSOLUTE = If set, then the sum of the absolute differences is
		   minimized instead of the sum of the squares.  This is
		   equivalent to assuming a double-sided exponential
		   distribution.
	LORENTZ	 = If set, then a Lorentz distribution is used instead of a
		   normal distribution.  Not truely meaningful unless ERROR is
		   passed.

 Calls       :	FORM_CHISQR, FORM_SIGMAS

 Common      :	None

 Restrictions:	The user defined function is passed by name as a character
		string in the variable FNAME.  The function must have the form.

				    Y = F(X,PARAM)

		where X is the independent variable, and PARAM is the vector
		containing the parameters of the fit.

 Side effects:	The statistical interpretation of CHISQR is unclear if either
		ABSOLUTE or LORENTZ is set.

 Category    :	Utilities, Curve_Fitting

 Prev. Hist. :	
	William Thompson, August, 1989.
	William Thompson, June 1991, modified to use keywords.
	William Thompson, December 1992, modified to use other fitting
		strategies besides minimizing the root-mean-square.  Also
		removed keyword WEIGHTS as this was incompatible with this
		strategy.

 Written     :	William Thompson, GSFC, August 1989

 Modified    :	Version 1, William Thompson, GSFC, 9 January 1995
			Incorporated into CDS library

 Version     :	Version 1, 9 January 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	AMOEBA_F

 Purpose     :	Reiteratively minimizes an arbitrary function

 Explanation :	Minimizes an arbitrary function via a least-squares reiterative
		technique.

		The procedure used is taken from Numerical Recipes.

 Use         :	AMOEBA_F, FNAME, PARAM

 Inputs      :	FNAME	= Name of function to be minimized (string variable).
		PARAM	= Parameters of fit.  Passed as first guess.  Returned
			  as fitted values.

 Opt. Inputs :	None.

 Outputs     :	PARAM	= Parameters of fit.  See note above.

 Opt. Outputs:	None.

 Keywords    :	ACCURACY = Accuracy to cut off at.  Defaults to 1E-5.
		MAX_ITER = Maximum number of reiterations.  Defaults to 20.
		LAMBDA	 = Initial step sizes for PARAM, or if scalar then
			   fraction of PARAM.  Defaults to 1E-2.
		NOPRINT	 = If set, then no printout is generated.
		CHISQR	 = Returned value of chi-squared.  Only relevant if
			   ERROR passed explicitly.
		N_ITER	 = Number of iterations used.

 Calls       :	None.

 Common      :	None

 Restrictions:	The user defined function is passed by name as a character
		string in the variable FNAME.  The function must have the form.

				    Y = F(PARAM)

		where PARAM is the vector containing the parameters of the fit.

 Side effects:	None.

 Category    :	Utilities, Curve_Fitting

 Prev. Hist. :	William Thompson, August, 1989.
		William Thompson, June 1991, modified to use keywords.

 Written     :	William Thompson, GSFC, August 1989

 Modified    :	Version 1, William Thompson, GSFC, 9 January 1995
			Incorporated into CDS library

 Version     :	Version 1, 9 January 1995
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : ANYTIM2CAL()
               
 Purpose     : Converts (almost) any time format to calendar format.
               
 Explanation : Tests the type of input and tries to use the appropriate
               conversion routine to create the date/time in a user
               selectable calendar format for, for example, printing in
               documents, tables etc.
               
 Use         : IDL>  utc = anytim2cal(any_format, form=xx)
    
 Inputs      : any_format - date/time in any of the acceptable CDS 
                            time formats -- for acceptable formats see file 
                            aaareadme.txt.
               
 Opt. Inputs : None
               
 Outputs     : Function returns string array in format requested.
               
 Opt. Outputs: None
               
 Keywords    : 
      FORM  = n   where... 
			    n		  output format
			    0		dd/mmm/yy hh:mm:ss  [default]
			    1		dd-mmm-yy hh:mm:ss
			    2		dd/mm/yy  hh:mm:ss
			    3		dd-mm-yy hh:mm:ss
			    4		mm/dd/yy hh:mm:ss
			    5		mm-dd-yy hh:mm:ss
			    6		yy/mm/dd hh:mm:ss
			    7		yy-mm-dd hh:mm:ss
			    8		yyyymmddhhmmss
                           9           dd-mmm-yyyy hh:mm:ss.sss (VMS-like)
                          10           dd-mmm-yyyy hh:mm:ss.ss (!stime-like)
      
			    etc TBD
      DATE   - Output only the date in format above.
      TIME   - Output only the time in format above.
      MSEC   -	Include milliseconds in the "ss" fields above (="ss.sss").
      ERRMSG - If defined and passed, then any error messages will be returned
               to the user in this parameter rather than being printed to
               the screen.  If no errors are encountered, then a null string 
               is returned.  In order to use this feature, the string ERRMSG
               must be defined first, e.g.,

                   ERRMSG = ''
                   ANYTIM2CAL, DT, ERRMSG=ERRMSG, ...
                   IF ERRMSG NE '' THEN ...

 Calls       : ANYTIM2UTC, CHECK_EXT_TIME

 Common      : None
               
 Restrictions: None
               
 Side effects: If no parameters are passed, ERRMSG is returned as a string
               array.  If any other error occurs and ERRMSG is set, ERRMSG
		is returned as a string of '-1'.
               
 Category    : Util, time
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 24-May-94
               
 Modified    :	Version 1, C.D. Pike, RAL, 24 May 1994
		Version 2, Donald G. Luttermoser, GSFC/ARC, 20 December 1994
			Added the keyword ERRMSG.  Added forms 4 and 5.
               Version 3, CDP, make work with vector input and
                               added formats 6 & 7.   5-Jan-95
               Version 4, CDP, fix round off giving 60 in seconds field.
                               23-Jan-95
		Version 5, William Thompson, GSFC, 25 January 1995
			Changed to call intrinsic ROUND instead of NINT.  The
			version of NINT in the Astronomy User's Library doesn't
			automatically select between short and long integers as
			the CDS version does.
		Version 6, Donald G. Luttermoser, GSFC/ARC, 30 January 1995
			Added ERRMSG keyword to internally called procedures.
		Version 7, Donald G. Luttermoser, GSFC/ARC, 8 February 1995
			Added form 8.  Allowed for input to be either scalar
			or vector.
		Version 8, Donald G. Luttermoser, GSFC/ARC, 13 February 1995
			Added the /MSEC keyword.  Streamlined code to get
			rid of redundancies.
		Version 9, William Thompson, GSFC/ARC, 16 February 1995
			Rewrote to call CHECK_EXT_TIME.  This is used instead
			of the logic introduced in version 4 for checking the
			validity of the time returned.
               Version 10 Fixed array input bug in /msec code.  CDP, 20-Feb-95
               version 11 Add VMS and !stime-like formats 9/10. CDP, 15/3/95


 Version     :	Version 11, 15 March 1995
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : ANYTIM2UTC()
               
 Purpose     : Converts (almost) any time format to CDS UTC format.
               
 Explanation : Tests the type of input and tries to use the appropriate
               conversion routine to create the date/time in CDS UTC
               format (either internal (default), external or string)
               CDS time format.
               
 Use         : IDL>  utc = anytim2utc(any_format)
    
 Inputs      : any_format - date/time in any of the acceptable CDS 
                            time formats -- for acceptable formats see file 
                            aaareadme.txt.
               
 Opt. Inputs : None
               
 Outputs     : Function returns CDS UTC time structure.
               
 Opt. Outputs: None
               
 Keywords    : EXTERNAL  = Create output in external format
               CCSDS     = Create string output in CCSDS format
               ECS       = Create string output in ECS format
		VMS	  = Create string output in VMS format
		STIME	  = Create string output in STIME format

		Only one of the above keywords can be set.  If none of them are
		set, then the output is in internal format.  The following
		keywords are only valid if a string format was selected.

		TRUNCATE  = If set, then the time will be truncated to 1 second
			    accuracy.  Note that this is not the same thing as
			    rounding off to the nearest second, but is a
			    rounding down.

		DATE_ONLY = If set, then only the date part of the string is
			    returned.

		TIME_ONLY = If set, then only the time part of the string is
			    returned.

		UPPERCASE = If set, then the month field in either the VMS or
			    STIME format is returned as uppercase.

		The following keyword is always valid.

               ERRMSG    = If defined and passed, then any error messages 
                           will be returned to the user in this parameter 
                           rather than being printed to the screen.  If no
                           errors are encountered, then a null string is
                           returned.  In order to use this feature, the 
                           string ERRMSG must be defined first, e.g.,

                                ERRMSG = ''
                                UTC = ANYTIM2UTC ( DT, ERRMSG=ERRMSG, ...)
                                IF ERRMSG NE '' THEN ...

 Calls       : DATATYPE, INT2UTC, STR2UTC

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, time
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 16-May-94
               
 Modified    :	Version 1, C D Pike, RAL, 16-May-94
		Version 2, William Thompson, GSFC, 14 November 1994
			Changed .DAY to .MJD
		Version 3, Donald G. Luttermoser, GSFC/ARC, 20 December 1994
			Added the keyword ERRMSG.  Included ON_ERROR flag.
		Version 4, Donald G. Luttermoser, GSFC/ARC, 30 January 1995
			Added ERRMSG keyword to internally called procedures.
			Made error handling routine more robust.
		Version 5, Donald G. Luttermoser, GSFC/ARC, 8 February 1995
			Allowed for input to be either scalar or vector.
		Version 6, William Thompson, GSFC, 14 March 1995
			Added keywords VDS, STIME, TRUNCATE, DATE_ONLY,
			TIME_ONLY, UPPERCASE
		Version 7, William Thompson, GSFC, 5 May 1995
			Fixed bug with use of ERRMSG keyword.
			Made so that TAI times are supported.
		Version 8, William Thompson, GSFC, 8 May 1995
			Fixed bug introduced in version 7
               Version 9 C D Pike, RAL, 17-May-95
                       Handle time only (no date) string input.

 Version     : Version 9, 17 May 1995
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : ARCMIN2HEL()
               
 Purpose     : Convert arcmin from sun centre to heliographic coords.
               
 Explanation : Converts an (x,y) position given in arcmins relative to the 
               solar disk centre to heliographic coordinates for the date
               supplied ( default date = today).
               
 Use         : IDL> helio = arcmin2hel(xx,yy,date=date)
    
 Inputs      : xx  -  E/W coordinate in arc minutes relative to sun center 
                      (West is positive)
               yy  -  S/N coordinate in arc minutes relative to sun center 
                      (North is positive)
               
 Opt. Inputs : None
               
 Outputs     : Function returns 2 element vector: [lat, long] in degrees.
               
 Opt. Outputs: None
               
 Keywords    : date  -  date/time in any CDS format

               off_limb  - flag which is true if the coordinates are beyond
                           the solar limb.

 Calls       : PB0R
               ANYTIM2UTC

 Restrictions: If the supplied coordinates are outside the solar disk, the
               region is projected onto the limb.
               
 Side effects: None
               
 Category    : Util, coord
               
 Prev. Hist. : Original by J P Wuelser.

 Written     : CDS version by C D Pike, RAL, 6 Sept 93
               
 Modified    : Converted to use CDS time and pb0r routines, CDP, 17-May-94
		Version 3, William Thompson, GSFC, 14 November 1994
			Modified .DAY to .MJD

 Version     : Version 3, 14 November 1994
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : ARR2STR()
               
 Purpose     : Convert an array to a delimited string.
               
 Explanation : 
               
 Use         : IDL> s = arr2str(array,'-')
                    s = arr2str(array,delim='-')
    
 Inputs      : arr  -  input data array which is to be converted
                       to a simple string.
               
 Opt. Inputs : delim - an alternative positional parameter to specify the
                       delimiter.
               
 Outputs     : Function returns a simple string using the delimiter to 
               separate the elements of the original array.
               
 Opt. Outputs: 
               
 Keywords    : delimiter  -  specify the delimiter to be used, default 
                             delimiter is ','
		trim	   -  If set, call STRTRIM when converting to string
		compress   -  If set, call STRCOMPRESS after converting

 Calls       :
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, string
               
 Prev. Hist. : Yohkoh routine by S Freeland.

 Written     : CDS version by C D Pike, RAL, 6 Sept 93
               
 Modified    : Version 2, William Thompson, GSFC, 15 June 1995
			Added /TRIM keyword to be compatible with Yohkoh
			version.  Added /COMPRESS keyword

 Version     : Version 2, 15 June 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	ARRAY_MATCH()

 Purpose     : Detect if a vector matches any row or column of a 2D array

 Explanation : Search through a 2D array to see if any row (or column, if
               keyword COLUMN is set) of it is identical to (or matches) 
               a given vector.

               This routine is called by XCDS to check if the current
               study has been selected previously.

 Use         : Result = array_match(A, B [,/column])
               IF (array_match(a,b [,/column])) THEN ...

 Inputs      : A -- a 2D array with n x m elements
               B -- a vector with n elements (or m elements if keyword COLUMN
                    is to be set)
 Opt. Inputs : None.

 Outputs     : Result -- 1 if vector B matches either row (or column when
                         COLUMN is set) of array A; 0 otherwise

 Opt. Outputs: None.

 Keywords    : COLUMN -- If set, comparison is made through column of A

 Calls       : None.

 Common      : None.

 Restrictions: Number of elements of vector B must be equal to the column
               number (or row number, if the keyword COLUMN is set) of
               array A

 Side effects: None.

 Category    : Utilities, array manipulation

 Prev. Hist. : None.

 Written     :	Liyun Wang, GSFC/ARC, August 23, 1994

 Modified    : Liyun Wang, GSFC/ARC, August 24, 1994
                  Fixed a bug that only checks for a maximum of two rows
               Liyun Wang, GSFC/ARC, August 30, 1994
                  Added keyword COLUMN to allow comparison of one vector with
                  each column of a 2D array.

 Version     : Version 1.0, August 30, 1994
;-
;+
 NAME:
       ASCII

 PURPOSE: 
       Print ASCII characters based on its numerical decimal value.

 EXPLANATION:
       
 CALLING SEQUENCE: 
       ASCII [,/ext]

 INPUTS:
       None.
 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       None.

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS: 
       EXT -- Prints only extended ASCII characters.

 CALLS:
       None.

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 MODIFICATION HISTORY:
       Written September 12, 1994, by Liyun Wang, GSFC/ARC
       
 VERSION: Version 1, September 12, 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	ASK
 Purpose     :	
	Gets a single letter response from the keyboard.
 Explanation :	
	Gets a single letter response from the keyboard.  Only responses in the
	array VALID are allowed.  The prompt string is printed, and GET_KBRD is
	called to read in the result.
 Use         :	
	ASK, PROMPT, ANSWER  [, VALID ]

	Example:  ASK, 'Do you want to continue? ', ANSWER

 Inputs      :	
	PROMPT	= Prompt to ask for input.
 Opt. Inputs :	
	VALID	= List of valid responses, put together into one character
		  string.  If not passed, then "YN" is assumed.  All characters
		  are converted to uppercase.
 Outputs     :	
	ANSWER	= Single letter answer.  This is always returned as uppercase.
 Opt. Outputs:	
	None.
 Keywords    :	
	FONT	= Font to use when displaying the prompt widget.  Only
		  meaningful when the prompt is displayed in a text widget
		  (currently only in IDL for Windows).  If not passed, then the
		  first available 20 point font is used.
 Calls       :	
	SETPLOT
 Common      :	
	None.
 Restrictions:	
	Any non-printing key will act just like the return key when used with
	IDL for Microsoft Windows.  This includes the delete and backspace
	keys, which otherwise would erase the previous selected character.
 Side effects:	
	None.
 Category    :	
	Utilities, User_interface.
 Prev. Hist. :	
	W.T.T., Oct. 1989.
	William Thompson, 11 May 1993, converted to use widgets when available.
		This makes it compatible with IDL for Windows, together with a
		small change for carriage returns.  Also added FONT keyword.
	William Thompson, 22 June 1993, converted to use widgets only with IDL
		for Windows.
 Written     :	
	William Thompson, GSFC, October 1989.
 Modified    :	
	Version 1, William Thompson, GSFC, 9 July 1993.
		Incorporated into CDS library.
 Version     :	
	Version 1, 9 July 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	AVERAGE()
 Purpose     : 
	Averages an array over one or all of its dimensions.
 Explanation : 
	Calculates the average value of an array, or calculates the average
	value over one dimension of an array as a function of all the other
	dimensions.
 Use         : 
	Result = AVERAGE( ARRAY )
	Result = AVERAGE( ARRAY, DIMENSION )
 Inputs      : 
	ARRAY	  = Input array.  May be any type except string or structure.
 Opt. Inputs : 
	DIMENSION = Optional dimension to do average over.  Valid inputs are 1
		    through the total number of dimensions of ARRAY.
 Outputs     : 
	The average value of the array when called with one parameter.

	If DIMENSION is passed, then the result is an array with all the
	dimensions of the input array except for the dimension specified,
	each element of which is the average of the corresponding vector
	in the input array.

	For example, if A is an array with dimensions of (3,4,5), then the
	command B = AVERAGE(A,2) is equivalent to

			B = FLTARR(3,5)
			FOR J = 0,4 DO BEGIN
				FOR I = 0,2 DO BEGIN
					B(I,J) = TOTAL( A(I,*,J) ) / 4.
				ENDFOR
			ENDFOR

 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	The dimension specified must be valid for the array passed.
 Side effects: 
	None.
 Category    : 
	Utilities, Arrays.
 Prev. Hist. : 
	Taken from an earlier routine by W. Thompson called AVG, but the
	definition of the DIMENSION parameter is different to be consistent
	with current usage in IDL.
 Written     : 
	William Thompson, GSFC, 9 April 1993.
 Modified    : 
	Version 1, William Thompson, GSFC, 9 April 1993.
 Version     : 
	Version 1, 9 April 1993.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : Bell
               
 Purpose     : To ring the terminal bell a specified number of times.
               
 Explanation : Prints ascii code for the terminal bell.
               
 Use         : IDL> bell, n
    
 Inputs      : n   -  number of bell rings required  
               
 Opt. Inputs : As above
               
 Outputs     : None
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : None
               
 Restrictions: None
               
 Side effects: Noise
               
 Category    : Utilities, user
               
 Prev. Hist. : None

 Written     : C D Pike, RAL,  31 March 1993
               
 Modified    : 

 Version     : Version 1
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : BIN2DEC
               
 Purpose     : Convert binary representation to decimal integer.
               
 Explanation : The binary representation of a decimal number is converted
               to a decimal integer and can be displayed or returned or 
               both or neither.
               
 Use         : IDL> bin2dec, binary [, decimal, /quiet]
    
 Inputs      : binary - the binary representation to convert. It can either
                        be a string of zeros and ones or an array with each
                        element a zero or one.
                        eg bin2dec,'01010101'    or
                           bin2dec,['1','0','1','0','1','0','1','0']    or
                           bin2dec,[1,0,1,0,1,0,1,0]
                        The MSB is assumed to come first

 Opt. Inputs : None
               
 Outputs     : See below
               
 Opt. Outputs: decimal - the decimal integer equivalent of the input.
               
 Keywords    : quiet - unless given the decimal number is printed to the
                       terminal

 Calls       : None
               
 Restrictions: Input must be a string or an array of integers or strings.
               
 Side effects: None
               
 Category    : Utils, Numerical
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 7-Oct-93
               
 Modified    : 

 Version     : Version 1, 7-Oct-93
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : BIN2HEX
               
 Purpose     : Convert binary representation to hexadecimal.
               
 Explanation : The binary representation of a decimal number is converted
               to hexadecimal and can be displayed or returned or 
               both or neither.
               
 Use         : IDL> bin2hex, binary [, hex, nchar=nchar, /quiet, /upper]
    
 Inputs      : binary - the binary representation to convert. It can either
                        be a string of zeros and ones or an array with each
                        element a zero or one.
                        eg bin2hex,'01010101'    or
                           bin2hex,['1','0','1','0','1','0','1','0']    or
                           bin2hex,[1,0,1,0,1,0,1,0]
                        The MSB is assumed to come first

               nchar  - the number of characters in the hex format.

 Opt. Inputs : None
               
 Outputs     : See below
               
 Opt. Outputs: hex - the hexadecimal equivalent of the input.
               
 Keywords    : quiet - unless given the hexadecimal number is printed to the
                       terminal

               upper - convert output to upper case else given in lower case

 Calls       : None
               
 Restrictions: Input must be a string or an array of integers or strings.
               
 Side effects: None
               
 Category    : Utils, Numerical
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 7-Oct-93
               
 Modified    : Add /upper keyword, CDP, 20-Dec-93

 Version     : Version 2, 20-Dec-93
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       BLANK()

 PURPOSE:
       To make a blank string with a given length

 EXPLANATION:

 CALLING SEQUENCE:
       Result = blank(length)

 INPUTS:
       LENGTH - length of resultant string; if missing a null string is
                returned 

 OPTIONAL INPUTS:
       None.

 OUTPUTS:
       None.

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS:
       None.

 CALLS:
       None.

 COMMON BLOCKS:
       None.

 RESTRICTIONS:
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       Util, string

 PREVIOUS HISTORY:
       Written April 12, 1995, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 1, created, Liyun Wang, GSFC/ARC, April 12, 1995

 VERSION:
       Version 1, April 12, 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	BLINK
 Purpose     : 
	Blinks two images together by modifying the color tables.
 Explanation : 
	A combined image is formed in which the lower bits are assigned to
	ARRAY1 and the higher bits to ARRAY2.  Two color tables are defined
	relative to the current one so that the different images are shown by
	changing between these two color tables.
 Use         : 
	BLINK
	BLINK, ARRAY1, ARRAY2
 Inputs      : 
	None required.
 Opt. Inputs : 
	ARRAY1	 = First image to be blinked against the second image.
	ARRAY2	 = Second image.  Must have the same dimensions as the first
		   image.

	If the two arrays are not passed, then it is assumed that the images
	are already displayed, and the program goes directly to loading the
	color tables.

 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	NOSQUARE = If passed, then pixels are not forced to be square.
	NOBOX	 = If passed, then box is not drawn, and no space is reserved
		   for a border around the image.
	SIZE	 = If passed and positive, then used to determine the scale of
		   the image.  Returned as the value of the image scale.  May
		   not be compatible with /NOSQUARE.
	DISABLE  = If set, then TVSELECT not used.
	MISSING	 = Value flagging missing pixels.  These points are scaled to
		   zero.
	CHAR	 = Returns the final character entered from the keyboard.
	NOMESSAGE= If set, then the message explaining about the keys is not
		   printed out.  This is for routines such as MOVE_AND_BLINK,
		   which call BLINK, and want to print out their own message.
 Calls       : 
	EXPTV, GET_IM_KEYWORD, TVSELECT, TVUNSELECT
 Common      : 
	None.
 Restrictions: 
	ARRAY1 and ARRAY2 must have the same dimensions.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	The combined image formed from ARRAY1 and ARRAY2 is left on the screen.
	It may look a little strange.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, March 1991.
	William Thompson, April 1992, changed to use TVLCT,/GET instead of
				      common block.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
 Written     : 
	William Thompson, GSFC, March 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 14 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 14 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	BOOST_ARRAY
 Purpose     : 
	Append array onto an array of arrays.
 Explanation : 
	Add array APPEND to array DESTINATION, allowing the dimensions of
	DESTINATION to adjust to accomodate it.  If both input arrays have the
	same number of dimensions, then the output array will have one
	additional dimension.  Otherwise, the last dimension of DESTINATION
	will be incremented by one.
 Use         : 
	BOOST_ARRAY, DESTINATION, APPEND
 Inputs      : 
	DESTINATION	= Array to be expanded.
	APPEND		= Array to append to DESTINATION.
 Opt. Inputs : 
	None.
 Outputs     : 
	DESTINATION	= Expanded output array.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None
 Common      : 
	None.
 Restrictions: 
	DESTINATION and APPEND have to be either both of type string or both of
	numerical types.

	APPEND cannot have more dimensions than DESTINATION.

 Side effects: 
	None.
 Category    : 
	Utilities, Arrays.
 Prev. Hist. : 
	Written Aug'88 (DMZ, ARC)
	Modified Sep'89 to handle byte arrays (DMZ)
	Modifed to version 2, Paul Hick (ARC), Feb 1991
	Removed restriction to 2D arrays, William Thompson (ARC), Feb 1992.
 Written     : 
	Dominic M. Zarro, GSFC/SMM, August 1988.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 April 1993.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : BOX_AV()
               
 Purpose     : Produce a box average of an array.
               
 Explanation : Takes the input array and averages the data points in boxes
               of a given size.  The dimensions of the output array are the
               same as the input with the elements in the output array
               all given the average value within the box defined. In 1-d
               arrays this is useful as the output array can then be plotted 
               in histogram mode (psym=10).
               
 Use         : IDL>  out_array = box_av(in_array,x_box [,y_box])

                 eg  x = sin(indgen(1000)/100.)
                     plot,x,psym=4 & oplot,box_av(x,60),psym=10
    
 Inputs      : in_array    -  the input array, either 1 or 2-d
               x_box       -  the x-size of the averaging box
               
 Opt. Inputs : y_box       -  the y-size of the averaging box.  If input is
                              2-d and y_box not specified then it defaults
                              to the same value as x_box.
               
 Outputs     : function value on return is the averaged array
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : None
               
 Restrictions: Only 1 or 2-d arrays.
               
 Side effects: None
               
 Category    : Utilities, Numerical
               
 Prev. Hist. : None

 Written     : C D Pike, RAL,  21-Jul-1993
               
 Modified    : 

 Version     : Version 1
;-
;+
 Project     : SOHO - CDS

 Name        : 
	BOX_CRS
 Purpose     : 
	Two-button equivalent of BOX_CURSOR for Microsoft Windows.
 Explanation : 
	Emulates the operation of a variable-sized box cursor (also known as
	a "marquee" selector).  Differs from BOX_CURSOR in that only two mouse
	buttons are used.  This makes it useful for Microsoft Windows, where
	all three buttons are not always available.

	The graphics function is set to 6 for eXclusive OR.  This allows the
	box to be drawn and erased without disturbing the contents of the
	window.

	Operation is as follows:

	To move box:	Hold down either the left or middle mouse button while
			the cursor is inside the box, and drag the box to the
			desired position.

	To resize box:	Hold down either the left or middle button mouse while
			the cursor is outside the box, and drag the box to the
			desired size.  The corner nearest the initial mouse
			position is moved.

	To exit:	Press the right mouse button to exit this procedure,
			returning the current box parameters.

 Use         : 
	BOX_CRS, x0, y0, nx, ny [, INIT = init] [, FIXED_SIZE = fixed_size]
 Inputs      : 
	No required input parameters.
 Opt. Inputs : 
	X0, Y0, NX, and NY give the initial location (X0, Y0) and size (NX, NY)
	of the box if the keyword INIT is set.  Otherwise, the box is initially
	drawn in the center of the screen.
 Outputs     : 
	X0:  X value of lower left corner of box.
	Y0:  Y value of lower left corner of box.
	NX:  width of box in pixels.
	NY:  height of box in pixels. 

	The box is also constrained to lie entirely within the window.

 Opt. Outputs: 
	None.
 Keywords    : 
	INIT:  If this keyword is set, x0, y0, nx, and ny contain the initial
	parameters for the box.

	FIXED_SIZE:  If this keyword is set, nx and ny contain the initial
	size of the box.  This size may not be changed by the user.

	MESSAGE:  If this keyword is set, print a short message describing
	operation of the cursor.

 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	Works only with window system drivers.
 Side effects: 
	A box is drawn in the currently active window.  It is erased on exit.
 Category    : 
	Utilities, User_interface.
 Prev. Hist. : 
	DMS, April, 1990.
	DMS, April, 1992.  Made dragging more intutitive.
	William Thompson, GSFC, 11 June 1993.
		Changed to use two button operation, selecting moving or
		resizing based on whether or not the cursor is inside or
		outside the box.  Renamed to BOX_CRS.
 Written     : 
	David M. Stern, RSI, April 1990.
 Modified    : 
	Version 1, William Thompson, GSFC, 25 June 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 25 June 1993.
;-
;+
 NAME:
       BOX_CURSOR

 PURPOSE:
       Emulate the operation of a variable-sized box cursor

 CATEGORY:
       Interactive graphics.

 CALLING SEQUENCE:
       BOX_CURSOR, x0, y0, nx, ny [, INIT = init] [, FIXED_SIZE = fixed_size]
                   [, COLOR = color]
 INPUTS:
       No required input parameters.

 OPTIONAL INPUT PARAMETERS:
       x0, y0, nx, and ny give the initial location (x0, y0) and
       size (nx, ny) of the box if the keyword INIT is set.  Otherwise, the
       box is initially drawn in the center of the screen.

 KEYWORD PARAMETERS:
       INIT:  If this keyword is set, x0, y0, nx, and ny contain the initial
       parameters for the box.

       FIXED_SIZE:  If this keyword is set, nx and ny contain the initial
       size of the box.  This size may not be changed by the user.

       MESSAGE:  If this keyword is set, print a short message describing
       operation of the cursor.

       COLOR:  Index of color to be used to draw the cursor. Default:
               !d.n_colors-1

       ANYWHERE: Set this keyword to allow box to be moved outside the window

 OUTPUTS:
	x0:  X value of lower left corner of box.
	y0:  Y value of lower left corner of box.
	nx:  width of box in pixels.
	ny:  height of box in pixels.

	The box is also constrained to lie entirely within the window.

 COMMON BLOCKS:
	None.

 SIDE EFFECTS:
	A box is drawn in the currently active window.  It is erased
	on exit.

 RESTRICTIONS:
	Works only with window system drivers.

 PROCEDURE:
	The graphics function is set to 6 for eXclusive OR.  This
	allows the box to be drawn and erased without disturbing the
	contents of the window.

	Operation is as follows:
	Left mouse button:   Move the box by dragging.
	Middle mouse button: Resize the box by dragging.  The corner
		nearest the initial mouse position is moved.
	Right mouse button:  Exit this procedure, returning the
			     current box parameters.

 KNOWN PROBLEM:
       The box can be off the display window when resizing. More
       checking is needed to prevent this.

 MODIFICATION HISTORY:
	DMS, April, 1990.
	DMS, April, 1992.  Made dragging more intutitive.
	June, 1993 - Bill Thompson
			prevented the box from having a negative size.
       September 1, 1994 -- Liyun Wang
                            Added the COLOR keyword
       September 9, 1994 -- Liyun Wang, GSFC/ARC
                            Prevented the box from jumpping around
                            when resizing
       May 26, 1995 -- Liyun Wang, GSFC/ARC
                       Added the ANYWHERE keyword

;-
;+
 NAME:
       BOX_CURSOR2

 PURPOSE:
       Emulate the operation of a variable-sized box cursor

 EXPLANATION:
       This is a better improved version of BOX_CURSOR, a standard procedure
       from the IDL user library. The added keywords are: COLOR, ANYWHERE,
       EVENT_PRO, and STC4EVENT.

 CATEGORY:
       Interactive graphics.

 CALLING SEQUENCE:
       BOX_CURSOR2, x0, y0, nx, ny [, INIT = init] [, FIXED_SIZE = fixed_size]
                   [, COLOR = color]
 INPUTS:
       No required input parameters.

 OPTIONAL INPUT PARAMETERS:
       X0, Y0, NX, NY - The initial location (X0, Y0) and size (NX, NY) 
                        of the box if the keyword INIT is set.  Otherwise, 
                        the box is initially drawn in the center of the
                        screen. 
       EVENT_PRO      - Name of the procedure to be called when the boxed
                        cursor is manipulated. This procedure must have one
                        and only one positional parameter which is a
                        structure. This structure is passed in with the
                        keyword STC4EVENT and must have at least two tags
                        named X and Y being the cursor position in device
                        pixels.    
       STC4EVENT      - Structure to be processed by the procedure specified
                        by EVENT_PRO. It can have any number of tags, but X
                        and Y tags are required ones. 

 KEYWORD PARAMETERS:
       INIT       - If this keyword is set, X0, Y0, NX, and NY contain the
                    initial parameters for the box.
       FIXED_SIZE - If this keyword is set, nx and ny contain the initial
                    size of the box. This size may not be changed by the
                    user.  
       MESSAGE    - If this keyword is set, print a short message describing
                    operation of the cursor.
       COLOR      - Index of color to be used to draw the cursor. Default:
                    !d.n_colors-1
       ANYWHERE   - Set this keyword to allow box to be moved outside the
                    window 

 OUTPUTS:
	x0 - X value of lower left corner of box.
	y0 - Y value of lower left corner of box.
	nx - width of box in pixels.
	ny - height of box in pixels.

	The box is also constrained to lie entirely within the window.

 COMMON BLOCKS:
	None.

 SIDE EFFECTS:
	A box is drawn in the currently active window.  It is erased
	on exit.

 RESTRICTIONS:
	Works only with window system drivers.

 PROCEDURE:
	The graphics function is set to 6 for eXclusive OR.  This
	allows the box to be drawn and erased without disturbing the
	contents of the window.

	Operation is as follows:
	Left mouse button:   Move the box by dragging.
	Middle mouse button: Resize the box by dragging.  The corner
		nearest the initial mouse position is moved.
	Right mouse button:  Exit this procedure, returning the
			     current box parameters.

 KNOWN PROBLEM:
       The box can be off the display window when resizing. More
       checking is needed to prevent this.

 MODIFICATION HISTORY:
	DMS, April, 1990.
	DMS, April, 1992.  Made dragging more intutitive.
	June, 1993 - Bill Thompson
			prevented the box from having a negative size.
       September 1, 1994 -- Liyun Wang
                            Added the COLOR keyword
       September 9, 1994 -- Liyun Wang, GSFC/ARC
                            Prevented the box from jumpping around
                            when resizing
       May 26, 1995 -- Liyun Wang, GSFC/ARC
                       Added the ANYWHERE keyword
       June 5, 1995 -- Liyun Wang, GSFC/ARC
                       Added EVENT_PRO and STC4EVENT keywords
;-
;+
 Project     : SOHO - CDS

 Name        : 
	BREAK_FILE
 Purpose     : 
	Break a filename into its component parts.
 Explanation : 
	Given a file name, break the filename into the parts
	of disk/logical, the directory, the filename, the
	extension, and the file version (for VMS)
 Use         : 
	BREAK_FILE, FILE, DISK_LOG, DIR, FILNAM, EXT, FVERSION, NODE
 Inputs      : 
	file	- The file name
 Opt. Inputs : 
	None.
 Outputs     : 
	disk_log- The disk or logical (looks for a ":")
		  This is generally only valid on VMS machines
	dir	- The directory
	filnam	- The filename (excluding the ".")
	ext	- The filename extension (including the ".")
	fversion- The file version (only VMS)
	node	- The Node name (only VMS)
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	VMS:
		Assumes that : always precedes []
	ULTRIX:
		Right now it has trouble with the ultrix option of use
		of "." or ".."
 Side effects: 
	None.
 Category    : 
	Utilities, Operating_system.
 Prev. Hist. : 
	Written 1988 by M.Morrison
	   Aug-91 (MDM) Changed to handle Unix filename convensions
	28-Feb-92 (MDM) * Adjusted to handle arrays
	11-Mar-92 (MDM) - Perform a STRTRIM(x,2) on input string before
			  doing the "break-up"
	 1-Dec-92 (MDM) - Moved code to do filename, extension and version
			  number for both VMS and Unix (previously it
			  did not do version number code for Unix)
	29-Jan-93 (DMZ/MDM) - checked for node in file name
 Written     : 
	M. Morrison, August 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 23 April 1993.
		Incorporated into CDS library.
	Version 1.1, William Thompson, GSFC, 7 May 1993.
		Added IDL for Windows compatibility.
	Version 2, William Thompson, GSFC, 15 June 1995
		Merged with Yohkoh version.  Added change 11-Nov-93 by D. Zarro
       	to check for ".]["  and "[000000" in VMS concealed directory
		names

 Version     : 
	Version 2, 15 June 1995
;-
;+
 Project     : SOHO - CDS

 Name        : BREAK_PATH()

 Purpose     : Breaks up a path string into its component directories.

 Explanation :

 Use         : Result = BREAK_PATH( PATHS )

 Inputs      : PATHS	= A string containing one or more directory paths.  The
			  individual paths are separated by commas, although in
			  UNIX, colons can also be used.  In other words, PATHS
			  has the same format as !PATH, except that commas can
			  be used as a separator regardless of operating
			  system.

		     	  A leading $ can be used in any path to signal that
			  what follows is an environmental variable, but the $
			  is not necessary.  (In VMS the $ can either be part
			  of the path, or can signal logical names for
			  compatibility with Unix.)  Environmental variables
			  can themselves contain multiple paths.

 Opt. Inputs : None.

 Outputs     : The result of the function is a string array of directories.
		Unless the NOCURRENT keyword is set, the first element of the
		array is always the null string, representing the current
		directory.  All the other directories will end in the correct
		separator character for the current operating system.

 Opt. Outputs: None.

 Keywords    : NOCURRENT = If set, then the current directory (represented by
			    the null string) will not automatically be
			    prepended to the output.

 Calls       : STR_SEP

 Common      : None.

 Restrictions: None.

 Side effects: None.

 Category    : Utilities, Operating_system

 Prev. Hist. : None, but influenced by TEST_OPENR by William Thompson, and
		CONCAT_DIR by M. Morrison.

 Written     : William Thompson, GSFC, 3 May 1993.

 Modified    : Version 1, William Thompson, GSFC, 6 May 1993.
			Added IDL for Windows compatibility.
		Version 2, William Thompson, GSFC, 16 May 1995
			Added keyword NOCURRENT

 Version     : Version 2, 16 May 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	BSCALE
 Purpose     : 
	Scale images into byte arrays suitable for displaying.
 Explanation : 
	Depending on the keywords passed, the routine BYTSCLI, FORM_INT or
	FORM_VEL is used to scale the image.
 Use         : 
	BSCALE, IMAGE
 Inputs      : 
	IMAGE	= Image to be scaled.
 Opt. Inputs : 
	None.
 Outputs     : 
	IMAGE	= The scaled image is returned in place of the original.
 Opt. Outputs: 
	None.
 Keywords    : 
	NOSCALE  = If set, then the image is not scaled.
	MISSING	 = Value flagging missing pixels.  These points are scaled to
		   zero.
	MAX	 = The maximum value of IMAGE to be considered in scaling the
		   image, as used by BYTSCL.  The default is the maximum value
		   of IMAGE.
	MIN	 = The minimum value of IMAGE to be considered in scaling the
		   image, as used by BYTSCL.  The default is the minimum value
		   of IMAGE.
	TOP	 = The maximum value of the scaled image array, as used by
		   BYTSCL.  The default is !D.N_COLORS-1.
	VELOCITY = If set, then the image is scaled using FORM_VEL as a
		   velocity image.  Can be used in conjunction with COMBINED
		   keyword.  Ignored if NOSCALE is set.
	COMBINED = Signals that the image is to be displayed in one of two
		   combined color tables.  Can be used by itself, or in
		   conjunction with the VELOCITY or LOWER keywords.
	LOWER	 = If set, then the image is placed in the lower part of the
		   color table, rather than the upper.  Used in conjunction
		   with COMBINED keyword.
 Calls       : 
	BYTSCLI, FORM_INT, FORM_VEL, GET_IM_KEYWORD, IM_KEYWORD_SET
 Common      : 
	None.
 Restrictions: 
	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, May 1992.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
	William Thompson, September 1992, use COMBINED keyword in place of
					  INTENSITY.
 Written     : 
	William Thompson, GSFC, May 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 14 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 14 June 1993.
		Added support for monochrome (dithered) devices.
	Version 3, William Thompson, GSFC, 22 October 1993.
		Modified to call BYTSCLI instead of BYTSCL.
 Version     : 
	Version 3, 22 October 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	BSORT
 Purpose     :	
	Sorts data into ascending order.
 Explanation :	
	Function to sort data into ascending order, like a simple bubble sort.
	original subscript order is maintained when values are equal (FIFO).
	(This differs from the IDL SORT routine alone, which may rearrange 
	order for equal values)

 Use         :	
	result = bsort( array, [ asort, /INFO, /REVERSE ] )

 Inputs      :	
	Array - array to be sorted

 Opt. Inputs :	None.

 Outputs     :	
	result - sort subscripts are returned as function value

 Opt. Outputs:	
	Asort - sorted array

 Keywords    :	
       /REVERSE - if this keyword is set, and non-zero, then data is sorted
                 in descending order instead of ascending order.
	/INFO = optional keyword to cause brief message about # equal values.

 Calls       :	None.

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Array

 Prev. Hist. :	
	written by F. Varosi Oct.90:
	uses WHERE to find equal clumps, instead of looping with IF ( EQ ).
	compatible with string arrays, test for degenerate array 
	20-MAY-1991	JKF/ACC via T AKE- return indexes if the array to 
			be sorted has all equal values.
	Aug - 91  Added  REVERSE keyword   W. Landsman      

 Written     :	F. Varosi, GSFC, October 1990

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library
		Version 2, William Thompson, GSFC, 3 August 1994
			Incorporated change by W. Landsman to always return
			type LONG.
		Version 3, William Thompson, GSFC, 15 June 1995
			Merged with Yohkoh version.  Added change by Mons
			Morrison 24-Sep-1991 to set ASORT to ARRAY when only
			one element.

 Version     :	Version 3, 15 June 1995
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : BYTESWAP()
               
 Purpose     : Swaps the bytes in an integer (as a function).
               
 Explanation : Call the internal IDL routine BYTEORDER to perform byte
               swapping on integers as a function call.  Handles arrays
               the same as BYTEORDER but passes none of the keywords.
               
 Use         : IDL> ba = byteswap(ab)
    
 Inputs      : ab    - integer [array]
               
 Opt. Inputs : None
               
 Outputs     : Function returns byte swapped version of input
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : IDL BYTEORDER
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, Numerical
               
 Prev. Hist. : Written by Arnulf (Spacetec)

 Written     : CDS version  C D Pike, RAL, 1 Oct 93
               
 Modified    : Version 1, C D Pike, RAL 1 Oct 93
		Version 2, William Thompson, GSFC, 12 November 1993
			Added /NTOHS to BYTEORDER for platform independence.

 Version     : Version 2, 12 November 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	BYTSCLI

 Purpose     :	Variation on BYTSCL which allows MAX < MIN.

 Explanation :	BYTSCLI is a variation on the standard IDL BYTSCL routine.  It
		allows for an inverted mapping of input values to output values
		where the keyword MAX is set less than the keyword MIN.
		Substituting BYTSCLI for BYTSCL should give more flexibility in
		image display routines.

		If MAX is greater than MIN, or if either MAX or MIN is not set,
		then BYTSCLI reproduces the behavior of BYTSCL.

 Use         :	Result = BYTSCLI(Arr)

		Default values are supplied for all keywords. If the special case
		is recognized--namely MIN defined, MAX defined, MIN > MAX--then
		an inverted relationship between input and output is returned,
		otherwise the normal byte transformation is applied.

		PRINT,BYTSCLI(INDGEN(11))
		  0  25  51  76 102 127 153 178 204 229 255

		PRINT,BYTSCLI(INDGEN(11),MIN=10,MAX=0)
		  255 229 204 178 153 127 102  76  51  25   0

 Inputs      :	ARR = Array of data values to be scaled.

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	MAX = The value of Array corresponding to the largest byte
		      value to be used (TOP). If MAX is not provided, Array is
		      searched for its maximum value.  All values greater than
		      or equal to MAX are set equal to TOP in the result,
		      except that if MAX & MIN are both defined & MAX lt MIN
		      all values LESS than or equal to MAX are set equal to TOP
		      in the result.

		MIN = The value of Array corresponding to the smallest byte
		      value to be used (zero). If MIN is not provided, Array is
		      searched for its smallest value.  All values less than or
		      equal to MIN are set equal to 0 in the result, except
		      that if MAX & MIN are both defined & MAX lt MIN all
		      values GREATER than or equal to MIN are set equal to 0 in
		      the result.

		TOP = The maximum value of the scaled result.  If TOP is not
		      specified, 255 is used.

 Calls       :	None.

 Common      :	None.

 Restrictions:	As with BYTSCL, MAX, MIN & TOP must be scalar. Unlike BYTSCL,
		ARR can also be scalar.

		In general, the SERTS image display routines use several
		non-standard system variables.  These system variables are
		defined in the procedure IMAGELIB.  It is suggested that the
		command IMAGELIB be placed in the user's IDL_STARTUP file.

		Some routines also require the SERTS graphics devices software,
		generally found in a parallel directory at the site where this
		software was obtained.  Those routines have their own special
		system variables.

 Side effects:	None.

 Category    :	Utilities, Image_display.

 Prev. Hist. :	Mark Hadfield, April 1993.

 Written     :	Mark Hadfield, April 1993.

 Modified    :	Version 1, William Thompson, GSFC, 22 October 1993.
			Modified to speed up.
			Incorporated into CDS library.

 Version     :	Version 1, 22 October 1993.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : CATEGORY
               
 Purpose     : List procedure/function names and categories.
               
 Explanation : Creates a list of all .PRO files and then searches them for
               the standard CDS header and extracts the Name and Category 
               fields.  The resultant one-line documentation is printed to
               the screen or to the file "category.doc".
               
 Use         : IDL> category [,file_spec, /hard, /path, list=list]
               IDL> category, path='userlib
    
 Inputs      : None
               
 Opt. Inputs : file_spec   -  specification of the files to be searched.
                              If omitted, the current directory is used.
               
 Outputs     : The information can be printed to the screen or to the default
               output file "category.doc" (or both).
               
 Opt. Outputs: None
               
 Keywords    : hard    -  specifies that output is to be stored in file
                          category.doc
               path    -  if present (/path or path=1) use current IDL path 
                          (!path) as the search path but select only the "cds"
                          directories, otherwise use any directory whose name
                          contains the string specified by path.

               quiet   -  if specified, do not print to screen.

               list    -  if present, the list of one-liners is returned
                          in a string array.

 Calls       : None
               
 Restrictions: When the /path option is requested, only directories containing
               the letters "cds" will be used.  The VMS option is also very
               fragile in using the path directories and is likely not
               to work if the path contains symbols and libraries etc.
               
 Side effects: None
               
 Category    : Utilities, Documentation, Manual
               
 Prev. Hist. : None

 Written     : Based on PURPOSE, C D Pike,  RAL,  23-Jun-1993
               
 Modified    : Fixed bug in finding Category line.  CDP, 1-Jun-95

 Version     : Version 2, 1-Jun-95
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       CDD

 PURPOSE:
       Change directory and set IDL prompt to current path name

 EXPLANATION:
       CDD stands for CD with directory name displayed. It is intended to
       replace CD. It offers several advantages that CD lacks: It makes the
       the IDL prompt to reflect the current directory path; it does not bomb
       if cd fails. 

       It's better that you add the following lines in your IDL_STARTUP 
       file so that CDD takes into effect as soon as you get into IDL:
     
           cd, current=dir
           cdd, dir

       Another IDL routine that can be used with CDD is CDUP (cd to an
       upper level of dir).

 CALLING SEQUENCE:
       CDD [, dir_name]

 INPUTS:
       None required. If no directory name is given, user's home directory is
       assumed.

 OPTIONAL INPUTS:
       DIR_NAME -- A string, name of the destination directory

 OUTPUTS:
       None. IDL prompt can be changed though.

 OPTIONAL OUTPUTS:
       CURRENT -- The current directory before CDD takes action.

 KEYWORD PARAMETERS:
       LAST -- Prompt the last part of a directory path if set. It
               has no effect if user's home directory is part of the
               directory path.

 CALLS:
       DATATYPE, CHK_DIR

 COMMON BLOCKS:
       CDD -- Internal common block used by CDD

 RESTRICTIONS:
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       Utility, miscellaneous

 PREVIOUS HISTORY:
       Written October 6, 1994, by Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
      Liyun Wang, GSFC/ARC, October 9, 1994
         Added directory validity checking feature.
      Version 2, Liyun Wang, GSFC/ARC, November 12, 1994
         Added CURRENT keyword
      Version 3, Liyun Wang, GSFC/ARC, December 16, 1994
         Made work on VMS machine
      Version 4, Liyun Wang, GSFC/ARC, January 11, 1995
         Added the LAST keyword 
      Version 5, Liyun Wang, GSFC/ARC, January 13, 1995
         Made prompt for home dir be [~] under VMS

 VERSION:
       Version 5, January 13, 1995
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : CDS2JD()
               
 Purpose     : Converts any CDS time format to full Julian day.
               
 Explanation : Converts any CDS time format to the equivalent Julian
               day value.  Returns result in a structure with the
               tags int (long) and frac (double).
               
 Use         : IDL>  jd = cds2jd(any_format)
    
 Inputs      : any_format - date/time in any of the acceptable CDS 
                            time formats -- for acceptable formats see file 
                            aaareadme.txt.
               
 Opt. Inputs : None
               
 Outputs     : Function returns JD in a structure {int:0L,frac:0.0d0}.
               
 Opt. Outputs: None
               
 Keywords    : ERRMSG  =  If defined and passed, then any error messages will
                          be returned to the user in this parameter rather 
                          than being printed to the screen.  If no errors are
                          encountered, then a null string is returned.  In 
                          order to use this feature, the string ERRMSG must 
                          be defined first, e.g.,

                             ERRMSG = ''
                             JD = CDS2JD ( DT, ERRMSG=ERRMSG, ...)
                             IF ERRMSG NE '' THEN ...

 Calls       : ANYTIM2UTC, INT2UTC, JULDAY

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, time
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 16-May-94
               
 Modified    :	Version 1, C D Pike, RAL, 16-May-94
		Version 2, William Thompson, GSFC, 14 November 1994
			Changed .DAY to .MJD
		Version 3, Donald G. Luttermoser, GSFC/ARC, 20 December 1994
			Added the keyword ERRMSG.  Included ON_ERROR flag.
		Version 4, Donald G. Luttermoser, GSFC/ARC, 30 January 1995
			Added ERRMSG keyword to internally called procedured.
			Made error handling routine more robust.
		Version 5, Donald G. Luttermoser, GSFC/ARC, 13 February 1995
			Allowed for input to be either scalar or vector.

 Version     :	Version 5, 13 Februaryy 1995
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : CDS_GAUSS()
               
 Purpose     : Fits Gaussian with constant, linear or quadratic background.
               
 Explanation : Uses the standard IDL curvefit to fit a gaussian but unlike
               IDL's gaussfit, it allows the user to choose the background
               type, ie zero, contant, linear or quadratic.

               ie Fit y=F(x) where:
                        F(x) = a0*exp(-z^2/2) + a3 + a4*x + a5*x^2
                               and z=(x-a1)/a2

                    a0 = height of exp, 
                    a1 = center of exp, 
                    a2 = 1/e width,
                    a3 = constant term, 
                    a4 = linear term, 
                    a5 = quadratic term.

               The parameters a0,a1,a2,a3 are estimated and then curvefit is
               called.
               Parameters a3, a4, and a5 are optional, depending on the value 
               of k
               
               If the (max-avg) of Y is larger than (avg-min) then it is 
               assumed the line is an emission line, otherwise it is assumed 
               there is an absorption line.  The estimated center is the 
               max or min element.  The height is (max-avg) or (avg-min) 
               respectively. The width is found by searching out from the 
               extreme until a point is found < the 1/e value.

 Use         : yfit = cds_gauss(x,y,a,k)
    
 Inputs      : x = independent variable, must be a vector.
               y = dependent variable, must have the same number of points
                   as x.
               
 Opt. Inputs : k = determines the order of polynomial to be fitted in 
                   addition to the gaussian part:

               k = 3 : gaussian + a3 + a4*X + a5*X^2
               k = 2 : gaussian + a3 + a4*X
               k = 1 : gausian + a3
               k = 0 or any other k: only gaussian

               If k is not defined, it is assumed k=0

               
 Outputs     : Function returns value yfit = fitted function.
               
 Opt. Outputs: a = coefficients. a (3+k) element vector as described above.
               
 Keywords    : None

 Calls       : None

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, numerical
               
 Prev. Hist. : Original - gaussfit
               Background flexibility by A. Fludra (MSSL)

 Written     : CDS version by C D Pike, RAL, 7-Jan-94
               
 Modified    : 

 Version     : Version 1, 7-Jan-93
;-
;+
 NAME:
	CDSPICKFILE

 PURPOSE:
	This function allows the user to interactively pick a file.  

 EXPLANATION:
       A file selection tool with a graphical user interface is created.  
       Files can be selected from the current directory or other directories.

 CATEGORY:
	Widgets.

 CALLING SEQUENCE:
	Result = CDSPICKFILE()

 KEYWORD PARAMETERS:

	FILE:	A string value for setting the initial value of the
		selection. Useful if there is a default file

	GET_PATH: Set to a named variable. Returns the path at the
		time of selection.

	GROUP:	The widget ID of the widget that calls CDSPICKFILE.  When this
		ID is specified, a death of the caller results in the death of
		the CDSPICKFILE widget application.

	READ:	Set this keyword to make the title of the CDSPICKFILE window 
		"Select File to Read".

	WRITE:	Set this keyword to make the title of the CDSPICKFILE window 
		"Select File to Write".

	PATH:	The initial path to select files from.  If this keyword is 
		not set, the current directory is used.

	FILTER:	A string value for filtering the files in the file list.  This
		keyword is used to reduce the number of files to choose from.
		The user can modify the filter unless the FIX_FILTER keyword
		is set.  Example filter values might be "*.pro" or "*.dat".

	FIX_FILTER: When this keyword is set, only files that satisfy the
		filter can be selected.  The user has no ability to modify
		the filter and the filter is not shown.

	TITLE:	A scalar string to be used for the window title.  If it is
		not specified, the default title is "Select File"

	NOCONFIRM: Return immediately upon selection of a file.  The default
		behavior is to display the selection and then return the
		file when the user uses the "ok" button.

	MUST_EXIST: When set, only files that actually exist can be selected.

 OUTPUTS:
	CDSPICKFILE returns a string that contains the name of the file selected.
	If no file is selected, CDSPICKFILE returns a null string.

 COMMON BLOCKS:
	CDSPICKER:	COMMON block that maintains state for the widget.

 SIDE EFFECTS:
	This function initiates the XMANAGER if it is not already running.

 RESTRICTIONS:
	This routine is known to work on Suns (OPEN LOOK), MIPS, RS/6000, 
	DEC Ultrix, HP/700, VAX/VMS and SGI machines.

	Only one instance of the CDSPICKFILE widget can be running at one time.

	CDSPICKFILE does not recognize symbolic links to other files in UNIX.

 PROCEDURE:
	Create and register the widget and then exit, returning the filename
	that was picked.

 EXAMPLE:
	Create a CDSPICKFILE widget that lets users select only files with 
	the extensions 'pro' and 'dat'.  Use the 'Select File to Read' title 
	and store the name of the selected file in the variable F.  Enter:

		F = CDSPICKFILE(/READ, FILTER = '*.pro *.dat')

 MODIFICATION HISTORY:
 	Written by:	Steve Richards,	April, 1991
	July, 1991	Added a FILTER keyword to allow users
			to select files with a given extension or 
			extensions.
	August, 1991	Fixed bugs caused by differences between
			spawned ls commands on different machines.
	September, 1991	Made Myfindfile so only one pass was
			necessary to find files and directories.
	3/92 - ACY	Corrected initialization of dirsave, change spawn
			command to "ls -lL" and added case for links
			add NOCONFIRM keyword for auto exiting on selection
	8/92 - SMR	Rewrote cdspickfile as a compound widget.
	10/92 - SMR	Fixed a bug where extremely large file namess didn't
			show up properly in the file list or as return
			values.
	12/92 - JWG	Add better machine dependency code
	1/93 - JWG	Added FILE, GET_PATH keywords.
	1/93 - TAC	Added Windows Common dialog cdspickfile code
	2/93 - SMR	Fixed the documentation example for multiple extensions
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       CDUP

 PURPOSE: 
       Change directory path to an upper level

 EXPLANATION:
       
 CALLING SEQUENCE: 
       CDUP

 INPUTS:
       None.

 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       None.

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS: 
       SIMPLE -- If set, the IDL prompt is not changed.

 CALLS:
       CDD

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       
 PREVIOUS HISTORY:
       Written October 6, 1994, by Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       
 VERSION:
       Version 1, October 6, 1994
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : CHECK_CONFLICT
               
 Purpose     : To check any conflict of IDL procedure/function names.
               
 Explanation : All .pro file names in the CDS IDL path are checked for 
               duplicate names.
               
 Use         : check_conflict, list [,/quiet, /full]
    
 Inputs      : None
               
 Opt. Inputs : None
               
 Outputs     : None 
               
 Opt. Outputs: list  -  contains a list of any duplicates found.  
               
 Keywords    : quiet - if present results are not output on terminal (except
                       if /full is given, that overrides /quiet for the extra
                       information.

               full  - if present, complete information (ie the result
                       of running PURPOSE on each duplicate file is written
                       to the screen.

 Calls       : PURPOSE
               FIND_DUP
               REMCHAR
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Doc
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 12-Nov-93
               
 Modified    : 

 Version     : Version 1, 12-Nov-93
;-
;+
 Project     :	SOHO - CDS

 Name        :	CHECK_EXT_TIME

 Purpose     :	Checks CDS external time values for logical consistency.

 Explanation :	This procedure checks time values in CDS external format to
		ensure that the date-time values have valid values.  If a 
		value is found inaccurate, then these values are repaired
		with CHECK_INT_TIME.

		This procedure should be called whenever the external time is
		modified.

 Use         :	CHECK_EXT_TIME, EXT

 Inputs      :	EXT	= The UTC date/time as a data structure with the
			  elements:

				YEAR		= Integer year (1995).
				MONTH		= Integer month (1-12).
				DAY		= Integer day (1-31).
				HOUR		= Integer hour (0-23).
				MINUTE		= Integer minute (0-59).
				SECOND		= Integer second (0-59).
				MILLISECOND	= Integer millisec (0-999).

 Opt. Inputs :	None.

 Outputs     :	The input array will be repaired to reflect the correct values.

 Opt. Outputs:	None.

 Keywords    :	ERRMSG	= If defined and passed, then any error messages 
			  will be returned to the user in this parameter 
			  rather than using IDL's MESSAGE utility.  If no
			  errors are encountered, then a null string is
			  returned.  In order to use this feature, the 
			  string ERRMSG must be defined first, e.g.,

				ERRMSG = ''
				CHECK_EXT_TIME, EXT, ERRMSG=ERRMSG
				IF ERRMSG NE '' THEN ...

 Calls       :	DATATYPE, UTC2INT, INT2UTC, CHECK_INT_TIME

 Common      :	None.

 Restrictions:	Not valid for dates before 1 January 1972.

 Side effects:	None.

 Category    :	Utilities, Time.

 Prev. Hist. :	None, but uses CHECK_INT_TIME by W. Thompson, NASA/GSFC/ARC
		to check and make the fix.

 Written     :	Donald G. Luttermoser, NASA/GSFC/ARC, 15 February 1995.

 Modified    :	Version 1, Donald G. Luttermoser, GSFC/ARC, 15 February 1995.

 Version     :	Version 1, 15 February 1995.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	CHECK_FITS
 Purpose     : 
	Checks validity of FITS header.
 Explanation : 
	Given a FITS array IM, and a associated FITS or SDAS header HDR, this
	procedure will check that

      (1) HDR is a string array, and IM is defined and numeric   
      (2) The NAXISi values in HDR are appropiate to the dimensions of IM
      (3) The BITPIX value in HDR is appropiate to the datatype of IM.
          If HDR contain a DATATYPE keyword (as in SDAS files), then this is 
          also checked against the datatype of of IM

	If the UPDATE keyword is present, then FITS header will be modified, if
	necesary, to force agreement with the image array
 Use         : 
	check_FITS, im, hdr, [ dimen, idltype, /UPDATE, /NOTYPE, /SDAS ]
 Inputs      : 
	IM -  FITS or  STSDAS array, (e.g. as read by SXREAD or READFITS )
	HDR - FITS or  STSDAS header (string array) associated with IM
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	dimen - vector containing actual array dimensions
	idltype- data type of the FITS array as specified in the IDL SIZE
           function (1 for BYTE, 2 for INTEGER*2, 3 for INTEGER*4, etc.)
 Keywords    : 
	/NOTYPE - If this keyword is set, then only agreement of the array
		  dimensions with the FITS header are checked, and not the 
		  data type.
	/UPDATE - If this keyword is set then the BITPIX, NAXIS and DATATYPE
		  FITS keywords will be updated to agree with the arra
	/SDAS   - If this keyword is set then the header is assumed to be from
		  an SDAS (.hhh) file.    CHECK_FITS will then ensure that (1)
		  a DATATYPE keyword is included in the header and (2) BITPIX
		  is always written with positive values.
	/FITS   - If this keyword is present then CHECK_FITS assumes that it is
		  dealing with a FITS header and not an SDAS header, see notes
		  below.
 Calls       : 
	SXPAR
	SXDELPAR
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	If there is a fatal problem with the FITS array or header then !ERR is
	set to -1.  ( If the UPDATE keyword was supplied, and the header could
	be fixed then !ERR = 0.)

	An important distinction between an STSDAS header and a FITS header is
	that the BITPIX value in an STSDAS is always positive, e.g. BITPIX=32
	for REAL*4 data.  Users should use either the /SDAS or the /FITS
	keyword if it is important whether the STSDAS or FITS convention for
	REAL*4 data is used.  Otherwise, CHECK_FITS assumes that if a DATATYPE
	keyword is present then it is dealing with an STSDAS header.

 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	Written, December 1991  W. Landsman Hughes/STX to replace CHKIMHD
	No error returned if NAXIS=0 and IM is a scalar   W. Landsman  Feb 93
	Fixed bug for REAL*8 STSDAS data W. Landsman July 93
	Make sure NAXIS agrees with NAXISi  W. Landsman  October 93
 Written     : 
	Wayne Landsman, GSFC/UIT, December 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 26 October 1994
		Brought up-to-date with idlastro version.
 Version     : 
	Version 2, 26 October 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	CHECK_INT_TIME

 Purpose     :	Checks CDS internal time values for logical consistency.

 Explanation :	This procedure checks time values in CDS internal format to
		ensure that the milliseconds of day is neither negative nor
		larger than the number of milliseconds in the day in question.
		If either is true, then the day and time is repaired.  Leap
		seconds are taken into account.

		This procedure should be called whenever the internal time is
		modified.

 Use         :	CHECK_INT_TIME, INT

 Inputs      :	INT	= The UTC date/time as a data structure with the
			  elements:

				MJD	= The Modified Julian Day number
				TIME	= The time of day, in milliseconds
					  since the start of the day.

			  Both are long integers.

 Opt. Inputs :	None.

 Outputs     :	The input array will be repaired to reflect the correct number
		of milliseconds in the day.

 Opt. Outputs:	None.

 Keywords    :	ERRMSG    =  If defined and passed, then any error messages 
                            will be returned to the user in this parameter 
                            rather than using IDL's MESSAGE utility.  If no
                            errors are encountered, then a null string is
                            returned.  In order to use this feature, the 
                            string ERRMSG must be defined first, e.g.,

                                ERRMSG = ''
                                CHECK_INT_TIME, INT, ERRMSG=ERRMSG
                                IF ERRMSG NE '' THEN ...

 Calls       :	DATATYPE, GET_LEAP_SEC

 Common      :	None.

 Restrictions:	Not valid for dates before 1 January 1972.

		This procedure requires a file containing the dates of all leap
		second insertions starting with 31 December 1971.  This file
		must have the name 'leap_seconds.dat', and must be in the
		directory given by the environment variable TIME_CONV.  It must
		be properly updated as new leap seconds are announced.

 Side effects:	None.

 Category    :	Utilities, Time.

 Prev. Hist. :	Based on CHECK_TIME by M. Morrison, LPARL.

 Written     :	William Thompson, GSFC, 29 September 1993.

 Modified    :	Version 1, William Thompson, GSFC, 29 September 1993.
		Version 2, Donald G. Luttermoser, GSFC/ARC, 20 December 1994
			Added the keyword ERRMSG.  Added a check for the 
			STRUCTURE-TAG names.
		Version 3, Donald G. Luttermoser, GSFC/ARC, 30 January 1995
			Added ERRMSG keyword to internally called procedures.
			Made the error handling routine more robust.  Note
			that this procedure can handle both vectors and 
			scalars.

 Version     :	Version 3, 30 January 1995.
;-
;+
 Project     :	SOHO - CDS

 Name        :	CHECK_TAPE_DRV

 Purpose     :	Associate tape drive numbers with device files. *Unix only*

 Explanation :	This is an internal routine to the CDS/SERTS Unix tape handling
		utilities.  It converts tape drive numbers to actual device
		names, and checks to make sure that the device file is open.

		**Unix only**

 Use         :	CHECK_TAPE_DRV, UNIT, LOGICAL_DRIVE, DRIVE, LUN

 Inputs      :	UNIT = Tape unit number.  Tape drives are selected via the UNIX
		       environment variables "MT1", "MT2", etc.  The desired
		       tape drive is thus specified by numbers, as in VMS.
		       Must be from 0 to 9.

 Opt. Inputs :	None.

 Outputs     :	LOGICAL_DRIVE = Name of environment variable pointing to tape
				drive device file, e.g. "MT0".
		DRIVE	      = Name of device file, e.g. '/dev/nrst0'.
		LUN	      = Logical unit number used for reads and writes.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	CHCK_TAPE_DRVS contains array TAPE_LUN, containing logical unit
		numbers for each tape device, and TAPE_OPEN, which tells
		whether each device is open or not.

 Restrictions:	The environment variable "MTn", where n corresponds to the
		variable UNIT, must be defined.  E.g.,

			setenv MT0 /dev/nrst0

		Requires IDL v3.1 or later.

 Side effects:	If the device file is not yet open, then the tape is rewound,
		and a file unit is opened to it.

 Category    :	Utilities, I/O, Tape.

 Prev. Hist. :	William Thompson, Apr 1991.

 Written     :	William Thompson, GSFC, April 1991.

 Modified    :	Version 1, William Thompson, GSFC, 21 December 1993.
			Added keyword /NOSTDIO to OPEN statement.
			Incorporated into CDS library.
		Version 2, William Thompson, GSFC, 22 December 1993.
			Added spawn to "mt rewind".

 Version     :	Version 2, 22 December 1993.
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:	
       CHK_DIR()

 PURPOSE:
       Check the validity of a directory name.

 EXPLANATION:

 CALLING SEQUENCE: 
       Result = CHK_DIR(dir_name)

 INPUTS:
       DIR_NAME -- A string specifying the directory name. For VMS system,
                   a valid directory name can be a logical name, or
                   any string with a format of '[...]', '[...]aaa.dir', 
                   or 'aaa.dir'

 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       RESULT -- 1 if the directory name is valid, 0 otherwise

 OPTIONAL OUTPUTS:
       OUTPUT -- A string indicating the real directory path

 KEYWORD PARAMETERS: 
       FULLNAME -- if set and OUTPUT is present, OUTPUT will contain the full
                   path specification for the directory

 CALLS:
       DATATYPE, CHKLOG, STR_INDEX

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       
 PREVIOUS HISTORY:
       Written October 9, 1994, by Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 2, Liyun Wang, GSFC/ARC, December 16, 1994
          Made work for VMS directories
       Version 3, Liyun Wang, GSFC/ARC, December 29, 1994
          Added keyword FULLNAME
          Fixed bug of false reporting if the given string represents 
             a plain file under Unix OS

 VERSION:
       Version 3, December 29, 1994
;-
;+
 Project     : SDAC

 Name        : 
	CHKARG
 Purpose     : 
	Determine calling arguments of procedure or function.
 Explanation : 
	Determines the calling arguments of an IDL procedure or function.  Used
	by SCANPATH, but can also be called separately.
 Use         : 
	CHKARG  [, NAME ]
 Inputs      : 
	None required.
 Opt. Inputs : 
	NAME	= Name of procedure to check arguments of.  If not passed, then
		  it will be prompted for.
 Outputs     : 
	The arguments of the procedure are printed to the screen.
 Opt. Outputs: 
       name  = name of routine
	proc  = string array with lines of procedure 
       lname = libr/direc location of procedure
       found = 1/0 if file is found/not found
 Keywords    : 
	PATH  = optional directory/library search path.  Same format
		and semantics as !PATH.  If omitted, !PATH is used.
       SEARCH_ONLY = search path but do not print procedure arguments
       RESET = clear commons
       FOUND = 1 if found, 0 otherwise
 Calls       : 
	DATATYPE, GET_LIB, GET_MOD, GET_PROC, LOC_FILE
 Common      : 
	None.
 Restrictions: 
       Cannot access built-in IDL procedures
 Side effects: 
	None.
 Category    : 
	Documentation, Online_help.
 Prev. Hist. : 
       Written DMZ (ARC) Oct 1990
       Converted to version 2 (DMZ Jul'92)
 Written     : 
	D. Zarro, GSFC/SDAC, October 1990.
 Modified    : 
	Version 1, William Thompson, GSFC, 23 April 1993.
		Incorporated into CDS library.
       Version 2, Dominic Zarro, GSFC, 1 August 1994.
               Cleaned up
       Version 3, Dominic Zarro (GSFC) 21 September 1994.
                  added checks for blank lines in documentation
       Version 4, Zarro (GSFC), 21 April 1995
                  added SEARCH keyword
 Version     : 
	Version 4
;-
;+
 Project     : SOHO - CDS

 Name        :
	CHKLOG
 Purpose     :
	Determine actual name of logical or environment variable.
 Explanation :
	This routine determines the actual name of a logical name (VMS) or
	environment variable (UNIX).  In VMS the routine TRNLOG,/FULL is used;
	otherwise GETENV is used.
 Use         :
	Result = CHKLOG( VAR  [, OS ] )
 Inputs      :
	VAR = String containing the name of the variable to be translated.
 Opt. Inputs :
	None.
 Outputs     :
	The result of the function is the translated name, or (in VMS) an array
	containing the translated names.
 Opt. Outputs:
       OS = The name of the operating system, from !VERSION.OS.
 Keywords    :
	None.
 Calls       :
	None.
 Common      :
	None.
 Restrictions:
	None.
 Side effects:
	None.
 Category    :
	Utilities, Operating_system.
 Prev. Hist. :
       Written  - DMZ (ARC) May 1991
       Modified - DMZ (ARC) Nov 1992, to use GETENV
 Written     :
	D. Zarro, GSFC/SDAC, May 1991.
 Modified    :
	Version 1, William Thompson, GSFC, 23 April 1993.
		Incorporated into CDS library.
       Version 2, Dominic Zarro, GSFC, 1 August 1994.
               Added capability for vector inputs
       Version 3, Liyun Wang, GSFC/ARC, January 3, 1995
               Added capability of interpreting the "~" character under UNIX

 VERSION:
       Version 3, January 3, 1995
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : CIRCLE_SYM
               
 Purpose     : Define (part of) a circle as the user plotting symbol.
               
 Explanation : Calls usersym to define an circle as the user symbol
               to be used when psym=8 is specified in (o)plot. The symbol
               will be filled if requested.
               
 Use         : IDL> circle_sym, quad, thick=2, /fill
               IDL> plot,indgen(10),psym=8
    
 Inputs      : quad  - defines which quadrant of the circle to plot.
                       zero or undefined means use full circle.
               
 Opt. Inputs : None
               
 Outputs     : None
               
 Opt. Outputs: None
               
 Keywords    : thick  - the thickness of the perimeter line
               fill   - means fill the symbol

 Calls       : None

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, plotting
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 21-Apr-94
               
 Modified    : 

 Version     : Version 1, 21-Apr-94
;-
;+
 Project     :	SOHO - CDS

 Name        :	CLEANPLOT

 Purpose     :	Reset all plotting system variables to the default

 Explanation :	Reset all system variables (!P,!X,!Y,!Z) set by the user which 
		affect plotting to their default values.

		This does NOT reset the plotting device.
		This does not change any system variables that don't control
		plotting.

 Use         :	Cleanplot

 Inputs      :	None

 Opt. Inputs :	None

 Outputs     :	None

 Opt. Outputs:	None

 Keywords    :	None

 Calls       :	None

 Common      :	None

 Restrictions:	
	If user default values for !P, !X, !Y and !Z are different from
	the defaults adopted below, user should change P_old etc accordingly

 Side effects:	
	The system variables that concern plotting are reset
	to their default values.  A message is output for each
	variable changed.   The CRANGE, S, WINDOW, and REGION fields of the
	!X, !Y, and !Z system variables are not checked since these are 
	set by the graphics device and not by the user.    

 Category    :	Utilities, Graphics.

 Prev. Hist. :	
	Written IDL Version 2.3.0  W. Landsman & K. Venkatakrishna May '92
	Handle new system variables in V3.0.0     W. Landsman   Dec 92

 Written     :	W. Landsman and K. Venkatakrishna, GSFC/UIT, May 1992

 Modified    :	Version 1, William Thompson, GSFC, 14 December 1994
			Incorporated into CDS library

 Version     :	Version 1, 14 December 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	CLEAR_STRUCT

 Purpose     :	set all field values in a structure to zero

 Explanation :	initializes field values by setting to 0 or blank
               strings as appropriate.

 Use         : NEW_STRUCT=CLEAR_STRUCT(STRUCT)

 Inputs      :	STRUCT = input structure

 Opt. Inputs :	None.

 Outputs     :	NEW_STRUCT = initialized original structure

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	NEW_STRUCT (recursively for nested structures)

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Structure handling

 Prev. Hist. :	None.

 Written     :	Dominic Zarro (ARC)

 Version     :	Version 1.0, 22 September 1994
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : CLIPBOX
               
 Purpose     : To draw a box around the outside of the clip box
               
 Explanation : PLOTS is used to draw a box on the outside of clip box.
               
 Use         : CLIPBOX,THICK
    
 Inputs      : None necessary.
               
 Opt. Inputs : THICK : Thickness of the line. Default 1
               
 Outputs     : None.
               
 Opt. Outputs: None.
               
 Keywords    : None.

 Calls       : None.

 Common      : None.
               
 Restrictions: None.
               
 Side effects: None.
               
 Category    : 
               
 Prev. Hist. : None.

 Written     : SVHH, 26 May 1994
               
 Modified    : 

 Version     : 1 - 26 May 1994
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       CLS

 PURPOSE: 
       Clear screen (in Xterm's VT102 mode)

 EXPLANATION:
       
 CALLING SEQUENCE: 
       CLS 

 INPUTS:
       None.

 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       None.

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS: 
       BOTTOM -- Keep cursor at the bottom line if set.

 CALLS:
       None.

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       Utility, miscellaneous

 PREVIOUS HISTORY:
       Written December 29, 1994, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       
 VERSION:
       Version 1, December 29, 1994
;-
;+
 Project     : SOHO - CDS

 Name        : CMP_ALL_PRO

 Purpose     : Compares all procedure files in one path against another.

 Explanation : 

 Use         : CMP_ALL_PRO, PATH1, PATH2

 Inputs      : PATH1	= Primary path to use in the comparison.  All the
			  ".pro" files in PATH1 will be compared against their
			  equivalents (if any) in PATH2.

		PATH2	= Secondary path list.  This is a character string
			  listing one or more paths to use in looking for
			  equivalents of the procedure files found in PATH1.
			  The format is that used by FIND_WITH_DEF.

 Opt. Inputs : None.

 Outputs     : Messages about which files differ, or are not found, are
		printed to the terminal screen.

 Opt. Outputs: None.

 Keywords    : None.

 Calls       : CMP_FILES, FIND_WITH_DEF, CONCAT_DIR, BREAK_PATH

 Common      : None.

 Restrictions: None.

 Side effects: None.

 Category    : Software_management.

 Prev. Hist. : None.

 Written     : William Thompson, GSFC, 30 April 1993.

 Modified    : Version 1, William Thompson, GSFC, 30 April 1993.
		Version 2, William Thompson, GSFC, 21 June 1993.
			Modified so that "not found" messages are shorter.

 Version     : Version 2, 21 June 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : CMP_FILES()

 Purpose     : Checks whether two text files are identical or not.

 Explanation : This routine reads in two text files and compares them line by
		line to determine if they are different or not, similar to the
		Unix routine "cmp".

 Use         : Result = CMP_FILES( FILENAME1, FILENAME2 )

		IF CMP_FILES('file1.pro','file2.pro') EQ 1 THEN	$
			PRINT,'file1.pro and file2.pro are different'

 Inputs      : FILENAME1, FILENAME2 are the names of the two files to check
		against each other.

 Opt. Inputs : None.

 Outputs     : The result of the function is one of the following values:

			0 = The files are identical
			1 = The files are different
			2 = An error occured

 Opt. Outputs: None.

 Keywords    : None.

 Calls       : None.

 Common      : None.

 Restrictions: None.

 Side effects: None.

 Category    : Software_management.

 Prev. Hist. : None.

 Written     : William Thompson, GSFC, 30 April 1993.

 Modified    : Version 1, William Thompson, GSFC, 30 April 1993.

 Version     : Version 1, 30 April 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : CMP_LIBS

 Purpose     : Compares one IDL library against another.

 Explanation : Compares all procedure files in one path against any matches
		found in another path.  This routine differs from CMP_TREES in
		that it does not expect the two libraries to be organized in
		the same way.  Only procedure files found in the first
		directory tree will be used for comparison.

 Use         : CMP_LIBS, DIR1, PATH2

 Inputs      : DIR1	= Start of the first directory tree to use in the
			  comparison.  All the files "*.pro" in DIR1 and
			  subdirectories will be compared against their
			  equivalents (if any) in the tree given by PATH2.

		PATH2	= A path expression for the second library (or set of
			  libraries.  Use a plus sign before any directory to
			  signal that the tree should be expanded.

 Opt. Inputs : None.

 Outputs     : Messages about which files differ, or are not found, are
		printed to the terminal screen.

 Opt. Outputs: None.

 Keywords    : OUTPUT	= The name of a file to store the output in.  If not
			  passed, then the output is written to the screen
			  using /MORE.
		FILES	= The filenames to compare.  If not passed, then
			  "*.pro" is used.  The FILES keyword can be used to
			  change this to "*.*" for instance.
		UNIX	= If set, then the Unix "cmp" command is used to do the
			  comparison, rather than depending on IDL.

 Calls       : CMP_FILES, FIND_WITH_DEF, CONCAT_DIR, FIND_ALL_DIR

 Common      : None.

 Restrictions: None.

 Side effects: None.

 Category    : Software_management.

 Prev. Hist. : None.

 Written     : William Thompson, GSFC, 26 May 1995

 Modified    : Version 1, William Thompson, GSFC, 26 May 1995

 Version     : Version 1, 26 May 1995
;-
;+
 Project     : SOHO - CDS

 Name        : CMP_TREES

 Purpose     : Compares all procedure files in one path against another.

 Explanation : Compares all procedure files in one path against the
		corresponding files in another parallel path.  This routine
		differs from CMP_LIBS in that the two trees are expected to be
		identically structured.  If a routine is found in a particular
		directory in the first tree, then it is expected to be in same
		directory in the second tree.

 Use         : CMP_TREES, DIR1, DIR2

 Inputs      : DIR1	= Start of the first directory tree to use in the
			  comparison.  All the files "*.pro" in DIR1 and
			  subdirectories will be compared against their
			  equivalents (if any) in the tree starting with DIR2.

		DIR2	= Start of the second path list.

 Opt. Inputs : None.

 Outputs     : Messages about which files differ, or are not found, are
		printed to the terminal screen.

 Opt. Outputs: None.

 Keywords    : OUTPUT	= The name of a file to store the output in.  If not
			  passed, then the output is written to the screen
			  using /MORE.
		FILES	= The filenames to compare.  If not passed, then
			  "*.pro" is used.  The FILES keyword can be used to
			  change this to "*.*" for instance.
		UNIX	= If set, then the Unix "cmp" command is used to do the
			  comparison, rather than depending on IDL.

 Calls       : CMP_FILES, FIND_WITH_DEF, CONCAT_DIR, FIND_ALL_DIR

 Common      : None.

 Restrictions: None.

 Side effects: None.

 Category    : Software_management.

 Prev. Hist. : None.

 Written     : William Thompson, GSFC, 31 May 1994

 Modified    : Version 1, William Thompson, GSFC, 31 May 1994
		Version 2, William Thompson, GSFC, 13 June 1994
			Added keyword FILES.  Changed FILENAME to OUTPUT.
			Added keyword UNIX.
		Version 3, William Thompson, GSFC, 15 June 1994
			Changed so that output is the same, regardless of
			whether or not the UNIX keyword is set.
		Version 4, William Thompson, GSFC, 31 March 1995
			Changed so that only the directories where differences
			are found are printed out.
		Version 5, William Thompson, GSFC, 14 April 1995
			Made compatible with VMS.

 Version     : Version 5, 14 April 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	COLOR_BAR
 Purpose     : 
	Display a color bar on an image display screen.
 Explanation : 
	Unless the optional parameters are set, the user is prompted to enter
	in where the color bar should be placed.
 Use         : 
	COLOR_BAR  [, ARRAY ]  [, MX, MY, IX, IY ]
 Inputs      : 
	None required.
 Opt. Inputs : 
	ARRAY	= Image array to use in determining the scale.
	MX, MY	= Dimensions of color bar, in device coordinates
	IX, IY	= Position of lower left-hand corner of color bar.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	COLOR	 = Color used for drawing the box around the color bar.
	MAX	 = The maximum value of ARRAY to be considered in scaling the
		   color bar, as used by BYTSCL.  The default is either the
		   highest color index available, or the value set by SETFLAG.
	MIN	 = The minimum value of ARRAY to be considered in scaling the
		   color bar, as used by BYTSCL.  The default is either zero
		   or the value set by SETFLAG.
	TOP	 = The maximum value of the scaled color bar, as used by
		   BYTSCL.  The default is !D.N_COLORS-1.
	VELOCITY = If set, then the image is scaled using FORM_VEL as a
		   velocity image.  Can be used in conjunction with COMBINED
		   keyword.  Ignored if NOSCALE is set.
	COMBINED = Signals that the image is to be displayed in one of two
		   combined color tables.  Can be used by itself, or in
		   conjunction with the VELOCITY or LOWER keywords.
	LOWER	 = If set, then the image is placed in the lower part of the
		   color table, rather than the upper.  Used in conjunction
		   with COMBINED keyword.
	MISSING	 = Value flagging missing pixels.  Used when passing ARRAY to
		   help determine the scale.
	ABOVE	 = If set, and the color bar is horizontal, then the axis label
		   is drawn above the color bar rather than below.
	RIGHT	 = If set, and the color bar is vertical, then the axis label
		   is drawn to the right of the color bar, instead of the left.
	TITLE	 = Character string label to apply to color bar.  Default is
		   none.
	TICKLEN	 = Length of tick marks.  Default is !TICKLEN.
	TICKNAME = String array giving the annotation of each tick.
	TICKS	 = Number of major tick intervals to draw.
	TICKV	 = Array of values for each tick mark.
	TYPE	 = If 1, then the scaling is logarithmic.  If this option is
		   used, then the scale must be explicitly set, with the
		   minimum and maximum values being greater than zero.
 Calls       : 
	EXPAND_TV, GET_IM_KEYWORD, SELECT_BOX, TVAXIS, TVSELECT, TVUNSELECT
 Common      : 
	None.
 Restrictions: 
	To get the best results, care must be taken to make the color bar range
	match that of the displayed image.  The easiest way to do this is to
	use SETFLAG,MIN=...,MAX=... to control the range for both displaying
	the image and the color bar.  Or one can pass the image array to this
	routine to calculate the scale from.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	Messages about the size and position of the displayed image are printed
	to the terminal screen.  This can be turned off by setting !QUIET to 1.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, May 1992.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
	William Thompson, September 1992, use COMBINED keyword in place of
					  INTENSITY.
 Written     : 
	William Thompson, GSFC, May 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 14 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 19 October 1994
		Added keywords TICKLEN,TICKNAME,TICKS,TICKV,TYPE
 Version     : 
	Version 2, 19 October 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	COMBINE_COLORS
 Purpose     : 
	Combines two color tables into one.
 Explanation : 
	Combines two color tables into the lower and upper parts of a combined
	color table.  To use this color table, scale intensities using
	FORM_INT.  Alternately, use the /COMBINED and /LOWER keywords with
	EXPTV and PUT, which then call FORM_INT and FORM_VEL automatically.
 Use         : 
	COMBINE_COLORS

	The following example shows how to put one intensity image I1 using
	color table #3 next to another image I2 using color table #5.
 
	LOADCT,3				;Select first color table
	COMBINE_COLORS,/LOWER			;Save lower color table
	LOADCT,5				;Select second color table
	COMBINE_COLORS				;Combine the color tables
	PUT,I1,1,2,/COMBINED,/LOWER		;Display first image on left
	PUT,I2,2,2,/COMBINED			;And second image on right
 
 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	UPPER	= Save the current color table in a common block, to be the
		  upper part of the combined table.  If neither the UPPER nor
		  LOWER keyword is set, then UPPER is assumed.
	LOWER	= Save the current color table in a common block, to be
		  the lower part of the combined table.
	DISABLE	= If set, then TVSELECT is not used.
 Calls       : 
	TVSELECT, TVUNSELECT
 Common      : 
	COLORS:	The IDL color common block.
	COMBINE_COL: Used internally to save the two color tables between
	calls.
 Restrictions: 
	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	The color table is changed so that values in the lower half of the
	device range (typically 0-127) use the first color table, and values in
	the upper half (typically 128-255) use the second color table.  Each
	part of the color table has only half the resolution of the original
	color tables.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., Feb. 1992, from COMBINE_VEL.
	William Thompson, April 1992, changed to use TVLCT,/GET instead of
		common block, and added DISABLE keyword.
	W.T.T., Sep. 1992.  Returned COLORS common block.
	William Thompson, Oct 1992, added UPPER keyword, and rewrote to allow
		loading the upper and lower common blocks in any order, and to
		allow each to be independently reloaded.
 Written     : 
	William Thompson, GSFC, February 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 14 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 14 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	COMBINE_VEL
 Purpose     : 
	Combines current color table with a velocity color table.
 Explanation : 
	Combines the current color table with the velocity color table as
	formed by LOAD_VEL.

	The procedure gets the current color tables using TVLCT,/GET, and then
	uses LOAD_VEL to get the velocity color table.
 
	To use this color table, scale velocities using FORM_VEL with the
	/COMBINED keyword, and scale intensities using FORM_INT.  Alternately,
	use the /COMBINED and /VELOCITY keywords with EXPTV and PUT, which then
	call FORM_INT and FORM_VEL automatically.
 
 Use         : 
	COMBINE_VEL

	The following example shows how to put an intensity image I next to its
	corresponding velocity image V.  Standard color table #3 is used for
	the intensity image.
 
	LOADCT,3			   ;Select color table for int. image
	COMBINE_VEL			   ;Combine with velocity color table
	PUT,I,1,2,/COMBINED		   ;Display intensity image on left
	PUT,V,2,2,/COMBINED,/VELOCITY	   ;And velocity on right
 
 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	REVERSE_SWITCH	= If passed, and non-zero, then the red and blue color
			  tables in the velocity color table are switched.
	TURQUOISE	= If set, then turquoise is used instead of blue.
	GREEN_SWITCH	= If set, then red and green are used instead of red
			  and blue.  Ignored if TURQUOISE is set.
	LIGHTEN		= If set, then some green is added to the blue to
			  lighten the image.  Ignored if TURQUOISE or
			  GREEN_SWITCH are set.
	DISABLE		= If set, then TVSELECT not used.
	PRELOADED	= If set, then a color table preloaded using
			  COMBINE_VEL or COMBINE_COLORS is combined with the
			  velocity color table instead of the current table.
 Calls       : 
	COMBINE_COLORS, LOAD_VEL, TVSELECT, TVUNSELECT
 Common      : 
	None, but calls COMBINE_COLORS which uses the COLORS and COMBINE_COL
	common blocks.
 Restrictions: 
	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	The color table is changed so that values in the lower half of the
	device range (typically 0-127) represent velocities as formed by the
	routine FORM_VEL, and values in the upper half (typically 128-255)
	represent intensities.  Each part of the color table has only half the
	resolution of the original color tables.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., Oct. 1987.
	W.T.T., Nov. 1990.  Modified for version 2 of IDL.
	W.T.T., Jan. 1991.  Changed REVERSE_SWITCH to keyword.  Added keywords
		GREEN_SWITCH and LIGHTEN.
	William Thompson, April 1992, changed to use TVLCT,/GET instead of
		common block, and added DISABLE keyword.
	W.T.T., Sep. 1992.  Returned COLORS common block.
	William Thompson, Oct 1992, changed to use COMBINE_COLORS, and added
		PRELOADED keyword.
 Written     : 
	William Thompson, GSFC, October 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 13 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 13 May 1993.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : CONCAT2D()
               
 Purpose     : Concatenate two or more 2-d arrays.
               
 Explanation : Concatenate two or more 2-d arrays to produce one output array.
               eg if a  = intarr(20,25)
                     b  = intarr(20,2)
                     c  = intarr(20,27)  then 

                 x = concat3d(a,b,c) will return an array of dimensions (20,54) 
               
 Use         :  IDL>  x = concat2d(a,b [,c,d,e]  (max of 5 input arrays)
    
 Inputs      :  a,b,c...   input 2-d arrays, the first dimensions of which must
                           be the same size.
               
 Opt. Inputs : None
               
 Outputs     : Function returns the concatenation.
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : None

 Common      : None
               
 Restrictions: First dimensions of input arrays must be the same.
               
 Side effects: None
               
 Category    : Util, array
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 13-May-94
               
 Modified    : 

 Version     : Version 1,  13-May-94 
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : CONCAT3D()
               
 Purpose     : Concatenate two or more 3-d arrays.
               
 Explanation : Concatenate two or more 3-d arrays to produce one output array.
               eg if a  = intarr(20,25,10)
                     b  = intarr(20,25,12)
                     c  = intarr(20,25,5)  then 

                 x = concat3d(a,b,c) will return an array of dimensions (20,25,27) 
               
 Use         :  IDL>  x = concat3d(a,b [,c,d,e]  (max of 5 input arrays)
    
 Inputs      :  a,b,c...   input 3-d arrays, the first 2 dimensions of which must
                           have the same size.
               
 Opt. Inputs : None
               
 Outputs     : Function returns the concatenation.
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : None

 Common      : None
               
 Restrictions: First 2 dimensions of input arrays must be the same.
               
 Side effects: None
               
 Category    : Util, array
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 13-May-94
               
 Modified    : 

 Version     : Version 1,  13-May-94 
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	CONCAT4DOS
 Purpose     :	
	Concatenates IDL procedure files for copying to DOS machine.
 Explanation :	
	Concatenates IDL procedure files together into a form suitable for
	copying to a DOS machine.

	All the .PRO files in the current directory are copied into a special
	"dos" subdirectory, with the following changes made:

		1.  All filenames are truncated to eight characters.
		2.  All procedure files with names beginning with the same
		    first eight characters are concatenated together into a
		    single file.

 Use         :	
	CD, directory		;(go to desired directory)
	CONCAT4DOS		;or CONCAT4DOS, /SUBDIRECTORIES
 Inputs      :	
	None.
 Opt. Inputs :	
	None.
 Outputs     :	
	None.
 Opt. Outputs:	
	None.
 Keywords    :	
	SUBDIRECTORIES = If set, then subdirectories are also recursively
			 processed.
 Calls       :	
	FDECOMP
 Common      :	
	None.
 Restrictions:	
	None.
 Side effects:	
	A "dos" subdirectory is created.  On VMS machines, a temporary command
	file called "CONCAT4DOS.COM" is created and then destroyed.  On UNIX
	machines the temporary file is called "concat4dos.sh".
 Category    :	
	Utilities, Operating_system.
 Prev. Hist. :	
	William Thompson, August 1992.
 Written     :	
	William Thompson, GSFC, August 1992.
 Modified    :	
	Version 1, William Thompson, GSFC, 9 July 1993.
		Incorporated into CDS library.
		Modified so that a temporary file is created on UNIX machines
			as well, to speed up.
	Version 2, William Thompson, GSFC, 18 April 1994.
		Added SUBDIRECTORIES switch, and copying of documentation (.txt
		or .tex) files.
 Version     :	
	Version 2, 18 April 1994.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : CONCAT_DIR
               
 Purpose     : To concatenate directory and file names for current os.
               
 Explanation : The given file name is appended to the given directory
               name with the format appropriate to the current operating
               system. Can be also used to append two directory names
               
 Use         : IDL> full_name = concat_dir(directory,filename)
               IDL> pixfile = concat_dir('$DIR_GIS_MODEL','pixels.dat')

               IDL> file = ['f1.dat','f2.dat','f3.dat']
               IDL> dir = '$DIR_NIS_CAL'
               IDL> f = concat_dir(dir,file)

 Inputs      : DIRECTORY           the directory path (string)
               FILE                the basic file name and extension (string)
                                   can be an array of filenames or directory
                                   names

 Opt. Inputs : None
               
 Outputs     : The function returns the concatenated string.  If the file 
               input is a string array then the output will be a string 
               array also.
               
 Keywords    : DIR -- If set, the second argument is treated as a directory
                      name instead of a file name (it has no effect if not
                      under VMS system)
               CHECK -- Check the validity of directory name(s) if set

 Calls       : CHK_DIR, BELL, BREAK_PATH
               
 Restrictions: Assumes Unix type format if os is not VMS.
               
 Side effects: None
               
 Category    : Utilities, Strings
               
 Prev. Hist. : Yohkoh routine by M. Morrison

 Written     : CDS version by C D Pike, RAL, 19/3/93
               
 Modified    : 
       Version 2, Liyun Wang, GSFC/ARC, January 3, 1995
          Made it capable of concatenating directory names
          Added keywords CHECK and DIR for output
	Version 3, William Thompson, GSFC, 3 May 1995
		Modified so spurious $ characters in front of VMS logical names
		are ignored.  This makes it easier to port software written for
		Unix to VMS.

 VERSION:
       Version 2, January 3, 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	CONCAT_STRUCT

 Purpose     :	concatanate two structures

 Explanation :	concatanates two structures by using COPY_STRUCT to
               avoid the problem of concatanating two differently named
               structures.

 Use         : NEW_STRUCT=CONCAT_STRUCT(STRUCT1,STRUCT2)

 Inputs      :	STRUCT1,2 = input structures

 Opt. Inputs :	None.

 Outputs     :	NEW_STRUCT = concatanated structure

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	COPY_STRUCT

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Structure handling

 Prev. Hist. :	None.

 Written     :	Dominic Zarro (ARC)

 Version     :	Version 1.0, 22 September 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	CONGRDI()
 Purpose     : 
	Interpolates an array into another array.
 Explanation : 
	This procedure interpolates an array into another array.  It emulates
	CONGRIDI, except that the image is smoothed from edge to edge.
	Consequently, the points will not interpolate the same way.  CONGRIDI
	uses the formula:

		I_NEW = I_OLD * N_NEW / N_OLD

	where I_OLD is a point in the original array, N_OLD is the size of the
	old array (in one of the dimensions), and N_NEW is the size of the new
	array.  CONGRDI, on the other hand, uses the formula:

		I_NEW = I_OLD * (N_NEW - 1) / (N_OLD - 1)

	In this case, a point on the edge I_OLD = N_OLD-1 will transform to
	N_NEW-1.

 Use         : 
	NEW_ARRAY = CONGRDI( ARRAY, NXP, NYP )
 Inputs      : 
	ARRAY		= The two-dimensional array to be interpolated.
	NXP, NYP	= The dimensions of the output array.
 Opt. Inputs : 
	None.
 Outputs     : 
	The function returns the interpolated array.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	ARRAY must be two-dimensional, and NXP and NYP must both be > 1.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., Oct. 1987.
 Written     : 
	William Thompson, GSFC, October 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 13 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 13 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	CONTV
 Purpose     : 
	Places contour plots over displayed images.
 Explanation : 
	Places contour plots over images displayed with the EXPTV or similar
	procedure.
 Use         : 
	CONTV, ARRAY
	CONTV, ARRAY, MX, MY, JX, JY
 Inputs      : 
	ARRAY	 = Image to make contour plot from.  This may have a different
		   number of pixels as the original image being overlaid.
		   Also, the origin and pixel scale(s) may differ from the
		   original image.
 Opt. Inputs : 
	MX, MY	 = The size of the image on the display screen.
	JX, JY	 = The position of the lower left-hand corner of the image on 
		   the display screen.

	If the optional parameters are not passed, then they are retrieved with
	GET_TV_SCALE.  It is anticipated that these optional parameters will
	only be used in extremely rare circumstances.

 Outputs     : 
	The values of MX, MY and JX, JY are printed to the terminal screen.
 Opt. Outputs: 
	None.
 Keywords    : 
	COLOR	 = Color to use for drawing the contours.
	LEVELS	 = Levels to use for drawing the contours.
	MAX_VALUE= Maximum value to use for drawing the contours.  Pixels with
		   values above MAX_VALUE will be ignored in drawing the
		   contours.
	DISABLE  = If set, then TVSELECT not used.
	THICK	 = Plotting thickness.
	ORIGIN	 = Two-element array containing the coordinate value in
		   physical units of the center of the first pixel in the
		   image.  If not passed, then [0,0] is assumed.
	SCALE	 = Pixel scale in physical units.  Can have either one or two
		   elements.  If not passed, then 1 is assumed in both
		   directions.
 Calls       : 
	GET_TV_SCALE, TVSELECT, TVUNSELECT
 Common      : 
	None.
 Restrictions: 
	ARRAY must be two-dimensional.

	It is important that the user select the graphics device/window, and
	image region before calling this routine.  For instance, if the image
	was displayed using EXPTV,/DISABLE, then this routine should also be
	called with the /DISABLE keyword.  If multiple images are displayed
	within the same window, then use SETIMAGE to select the image before
	calling this routine.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	If the optional parameters MX, MY, and JX, JY are passed, then it is
	assumed that the image being overlaid was displayed with the same
	settings, and that the scale was in pixels (SCALE=1) with the first
	pixel in the original image being equivalent to [0,0].
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., Oct. 1987.
	W.T.T., Feb. 1991, modified to use TVSELECT, TVUNSELECT.
	William Thompson, May 1992, changed to call GET_TV_SCALE.
	William Thompson, Nov 1992, removed call to INIT_SC1_SC4.
	William Thompson, Dec 1992, added THICK keyword.
	William Thompson, Jan 1993, corrected small positioning error.
 Written     : 
	William Thompson, GSFC, October 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 13 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 3 September 1993.
		Added ORIGIN and SCALE keywords.  Rewrote to use the graphics
		scale generated by the routine that displayed the image.  This
		relaxes some of the restrictions imposed by the original
		routine.  It is no longer necessary for the overlaid contour
		plot and the original image to match pixel for pixel.
	Version 3, William Thompson, GSFC, 9 November 1993.
		Removed (unnecessary) restriction that scales be positive.
 Version     : 
	Version 3, 9 November 1993.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : COPY_STRUCT
               
 Purpose     : Copies one structure to another (with options).
               
 Explanation : Copy all Fields with matching Tags names (except for 
               "except_Tags" from one structure array to another structure 
               array (may be different).  Can also recursively copy from/to 
               structures nested within structures.
               
 Use         : IDL> copy_struct, struct_From, struct_To
                    copy_struct, struct_From, struct_To, EXCEPT=["imag","tag"]
                    copy_struct, struct_From, struct_To, /RECUR_FROM
    
 Inputs      : struct_From -  structure array to copy from.
               struct_To   -  structure array to copy values to.
               
 Opt. Inputs : None
               
 Outputs     : None
               
 Opt. Outputs: NF_copied = incremented by total # of Fields copied.
               
 Keywords    : EXCEPT_TAGS = string array of Tag names to ignore (NOT to copy).

               SELECT_TAGS = Tag names to copy (takes priority over EXCEPT).

               /RECUR_FROM = option to search for Tag names
                             in sub-structures of struct_From,
                             and then call copy_struct recursively
                             for those nested structures.
               /RECUR_TO = search for sub-structures of struct_To,
                           and then call copy_struct recursively
                           for those nested structures.
               /RECUR_TANDEM = call copy_struct recursively
                               for the sub-structures with matching
                               Tag names in struct_From and struct_To
                (for use when Tag names match but structure types differ).

 Calls       : For option SELECT_TAGS calls pro match.

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, structures
               
 Prev. Hist. : Frank Varosi STX @ NASA/GSFC

 Written     : CDS version, CDP, RAL, 23-Aug-94
               
 Modified    : 

 Version     : Version 1, 23-Aug-94
;-
;+
 Project     : SOHO - CDS

 Name        : 
	COUNTDOWN
 Purpose     : 
	Prints a message showing where you are in a long job.
 Explanation : 
	Calling COUNTDOWN,n_steps,/OPEN prints a character string consisting of
	some spaces, a slash, and the total number of steps.  Then each
	subsequent call prints out the iteration number on the same line in the
	spaces before the slash.  COUNTDOWN,/CLOSE then resets the behavior of
	the terminal to the default, and linefeeds to a new line.

	If the graphics device supports widgets, then a text widget is used
	instead of the terminal screen/window.

 Use         : 
	COUNTDOWN, N_STEPS, /OPEN	;To begin
	COUNTDOWN, I_STEP		;Each step
	COUNTDOWN, /CLOSE		;To finish
 Inputs      : 
	NUMBER	= Either the total number of steps, or the step number.  Not
		  required when closing the countdown.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	OPEN	= Used to open the countdown.
	CLOSE	= Used to close the countdown.
	FONT	= Font to use when displaying the countdown widget.  Only
		  meaningful when the graphics device supports widgets.  If not
		  passed, then the first available 20 point font is used.
 Calls       : 
	TRIM
 Common      : 
	Common block COUNT_DOWN is used simply to keep track of the logical
	unit number used, and whether the countdown is open or not.  It also
	keeps track of those variables used by the widget part of the software,
	when applicable.
 Restrictions: 
	No other output can be sent to the screen when countdown is in effect
	(unless the graphics device uses widgets).  Should not be used in a
	batch job.
 Side effects: 
	If the individual steps are too close together in time, then this could
	slow down the calling routine.
 Category    : 
	Utilities, User_interface.
 Prev. Hist. : 
	William Thompson, October 1991.
	William Thompson, 12 May 1993, converted to use widgets when available.
		This makes it compatible with IDL for Windows.  Also added FONT
		keyword.
 Written     : 
	William Thompson, GSFC, October 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 14 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 14 May 1993.
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       COVSRT

 PURPOSE: 
       Repack the covariance matrix to the true order of the parameters

 EXPLANATION:
       Given the covariance matrix COVAR of a fit for MFIT of MA total
       parameters, and their ordering IA(i), repack the covariance matrix to
       the true order of the parameters. Elements associated with fixed
       parameters will be zero.

 CALLING SEQUENCE: 
       COVSRT, covar, ia, mfit

 INPUTS:
       COVAR -- 
       IA    --
       MFIT  --

 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       COVAR -- 

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS: 
       None.

 CALLS:
       None.

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       
 PREVIOUS HISTORY:
       Written November 10, 1994, by Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       
 VERSION:
       Version 1, November 10, 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	CROSS_CORR2()
 Purpose     : 
	Takes two-dimensional cross-correlation of two arrays.
 Explanation : 
	The cross-correlations are calculated by shifting the second array by
	-NCORR to +NCORR pixels relative to the first array.  This permutation
	is performed in both the X and Y directions.
 Use         : 
	Result = CROSS_CORR2( ARRAY1, ARRAY2, NCORR  [, CORR_X, CORR_Y ] )
 Inputs      : 
	ARRAY1	= First array to take cross-correlation of.
	ARRAY2	= Second array.
	NCORR	= Size of the cross-correlation.  The calculation will range
		  between +/- NCORR in both directions.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	CORR_X	= Relative shift in the X direction.
	CORR_Y	= Relative shift in the Y direction.
 Keywords    : 
	MISSING	 = Value flagging missing pixels.
	COUNT	 = If set, then the COUNTDOWN routine is called to show a
		   running display of where you are in the processing.
 Calls       : 
	AVERAGE, COUNTDOWN, GET_IM_KEYWORD
 Common      : 
	None.
 Restrictions: 
	The arrays must be two-dimensional, and must have the same dimensions
	as the other.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, March 1991, modified to use BADPIXEL keyword.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
 Written     : 
	William Thompson, GSFC.
 Modified    : 
	Version 1, William Thompson, GSFC, 13 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 13 May 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	CRS
 Purpose     :	
	Simplified CURSOR, with continuous readout option.
 Explanation :	
	This procedure uses the routine CURSOR to find the coordinates,
	expressed in data units, of a point selected with the cursor.
 Use         :	
	CRS  [, X_VALUE  [, Y_VALUE  [, PRINT_SWITCH ]]]

	CRS		;Values printed to screen.
	CRS, X, Y	;Values stored in variables X and Y
	CRS, X, Y, 1	;Values stored in X,Y, and printed to screen.

 Inputs      :	
	None required.
 Opt. Inputs :	
	PRINT_SWITCH	= Switch used to control printing the values of 
			  X_VALUE, Y_VALUE to the screen.  If not passed,
			  then assumed 0 (no printing) unless no parameters
			  are passed, in which case 1 (printing) is assumed.
 Outputs     :	
	None required.
 Opt. Outputs:	
	X_VALUE		= X position in data coordinates of cursor.
	Y_VALUE		= Y position in data coordinates of cursor.
 Keywords    :	
	CONTINUOUS	= If set, then a continuously updated display of the
			  cursor X and Y positions are written to the screen.
			  On systems which support widgets, the text is
			  displayed in a special widget.

			  In continuous operation pressing either the left or
			  middle mouse button will print out the current
			  position on a fresh line on the terminal screen.
			  Pressing the right mouse button quits the program.
			  The PRINT_SWITCH parameter controls whether or not
			  the last cursor position is printed or not.

			  When CONTINUOUS is set, the PRINT_SWITCH variable is
			  ignored--the position is always printed to the
			  screen.

	FONT		= Font to use when displaying the CRS widget.  Only
			  meaningful when the graphics device supports widgets,
			  and CONTINUOUS is set.  If not passed, then the first
			  available 20 point font is used.
 Calls       :	
	None.
 Common      :	
	None.
 Restrictions:	
	Use of the CONTINUOUS keyword may not be supported on some more
	primitive graphics terminals.
 Side effects:	
	Using the CONTINUOUS keyword on a device without a mouse or trackball
	may not allow the user to exit the program.
 Category    :	
	Utilities, User_interface.
 Prev. Hist. :	
	William Thompson	Applied Research Corporation
	September, 1987		8201 Corporate Drive
				Landover, MD  20785

	William Thompson, 13 May 1993, added CONTINUOUS and FONT keywords.
	William Thompson, 1 June 1993, changed to ignore PRINT_SWITCH when
		using in CONTINUOUS mode.
 Written     :	
	William Thompson, GSFC, September 1987.
 Modified    :	
	Version 1, William Thompson, GSFC, 9 July 1993.
		Incorporated into CDS library.
 Version     :	
	Version 1, 9 July 1993.
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:	
       CW_DROPLIST()

 PURPOSE:
       Create a compound widget to simulate a droplist widget

 EXPLANATION:
       
 CALLING SEQUENCE: 
       Result = cw_droplist(parent, value=value, uvalue=uvalue)

 INPUTS:
       PARENT - The ID of the parent widget
       VALUE  - String array, Value of list
       UVALUE - User value of the list

 OPTIONAL INPUTS: 
       INITIAL - Index of item in the list to be shown initially
       XOFFSET - The X offset of the widget relative to its parent
       YOFFSET - The Y offset of the widget relative to its parent
       FONT    - The name of the font to be used for the button titles

 OUTPUTS:
       RESULT - Widget ID of this compound widget

 OPTIONAL OUTPUTS:
       BUTTONS - ID of droplist buttons, starting from the "face" (or base)
                 button (#0)

 KEYWORD PARAMETERS: 
       FRAME - Frame the list button

 CALLS:
       None.

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       
 PREVIOUS HISTORY:
       Written May 23, 1995, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 1, created, Liyun Wang, GSFC/ARC, May 23, 1995

 VERSION:
       Version 1, May 23, 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	CW_TVZOOM

 Purpose     :	
	Compound widget for displaying zoomed images. (cf CW_ZOOM).

 Explanation :	
	This compound widget displays an original image in one window
	and another window in which a portion of the original window
	is displayed.  The user may select the center of the zoom
	region, the zoom scale, the interpolation style, and the method
	of indicating the zoom center.

 Use         :	
	widget = CW_TVZOOM(parent)

	WIDGET_CONTROL, id, SET_VALUE=value can be used to change the
		original, unzoomed image displayed by the widget.
		The value may not be set until the widget has been
		realized.

	WIDGET_CONTROL, id, GET_VALUE=var can be used to obtain the current
		zoomed image displayed by the widget.

 Inputs      :	
       PARENT - The ID of the parent widget.

 Opt. Inputs :	

 Outputs     :	
       The ID of the created widget is returned.

 Opt. Outputs:	
	None.

 Keywords    :	
	FRAME - Nonzero to have a frame drawn around the widget. The
		default is FRAME=0.
	MAX -   The maximum zoom scale.  The default is 20.  The scale
		must be greater than or equal to 1.
	MIN -   The minimum zoom scale.  The default is 1.  The scale
		must be greater than or equal to 1.
	RETAIN - Controls the setting for backing store for the original
		image window and zoom window.  If backing store is provided,
		a window which was obscured will be repaired when it becomes
		exposed.  Set RETAIN=0 for no backing store.  Set RETAIN=1
		for "request backing store from server".  This is the default.
		Set RETAIN=2 for IDL to provide backing store.
	SAMPLE - Zero for bilinear interpolation, non-zero for nearest
		neighber interpolation.  Bilinear interpolation gives
		higher quality results, but requires more time.  The
		default is SAMPLE=0.
	SCALE - The initial integer scale factor to use for the zoomed image.
		The default is SCALE=4.  The scale must be greater than or
		equal to 1.
	TRACK - Zero if the zoom window should be updated only when the mouse
		is pressed. Non-zero if the zoom window should be updated
		continuously as the cursor is moved across the original
		image. Note: On slow systems, /TRACK performance can be
		inadequate. The default is TRACK=0.
	UVALUE - Supplies the user value for the widget.
	XSIZE - The width of the window for the original image.
		The default is 500.
	YSIZE - The height of the window for the original image.
		The default is 500.
	REDUCTION - An amount to reduce the resolution when displaying the
		original image.  The zoomed image is taken from the full
		resolution original image.  Must be greater than or equal to 1.
		The default is 1.
	X_SCROLL_SIZE - The width of the visible part of the original image.
		This may be smaller than the actual width controlled by
		the XSIZE keyword.  The default is 0, for no scroll bar.
	Y_SCROLL_SIZE - The height of the visible part of the original image.
		This may be smaller than the actual height controlled by
		the YSIZE keyword.  The default is 0, for no scroll bar.
	X_ZSIZE - The width of the window for the zoomed image.
		The default is 250.
	Y_ZSIZE - The height of the window for the zoomed image.
		The default is 250.

 Calls       :	
	None.

 Common      :	
	CW_TVZOOM_BLK: Private to this module.

 Restrictions:	
	Must have widget capability.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects:	
	When the "Report Zoom to Parent" button is pressed, this widget
	will generate an event structures containing several data fields.
		x_zsize, y_zsize:	size of the zoomed image
		x0, y0:			lower left corner in original image
		x1, y1:			upper right corner in original image
	This event is a report to the parent that allows retrieval of the
	zoomed image using WIDGET_CONTROL.

 Category    :	
	Utilities, Image_display.

 Prev. Hist. :	
	June 30, 1992, ACY
	May 18, 1993, William Thompson, GSFC, added keyword REDUCTION, changed
		call to TVSCL to call TV instead.  Renamed tto CW_TVZOOM.

 Written     :	
	ACY, RSI, 30 June 1993.

 Modified    :	
	Version 1, William Thompson, GSFC, 25 October 1993.
		Incorporated into CDS library.

 Version     :	
	Version 1, 25 October 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	DATA_CHK()

 Purpose     :	Checks input data for type, ndimension, etc.

 Category    :	Utilities, array

 Explanation :	Checks input data for type, ndimension, etc.
		(Uses IDL size function results.)

 Syntax      :	Result = DATA_CHK( DATA, /keyword(s) )

 Examples    :	if (data_chk(p1,/type) eq data_chk(p2,/type)) then...
		case data_chk(data,/type) of...
		if data_chk(data,/string,/scaler) then ...
		if data_chk(data,/string,/struct,/undef,/orr)

 Inputs      :	DATA	= Data array to be checked.

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	
      type -   if set, return idl data type (0,1,2..8) from size function
      ndimen - if set, return number dimensions (size(0))
      orr    - if set, return value is OR of all boolean flags (def=AND)
      string/struct/undefined - if set, return true if type matches 

 Calls       :	None.

 Common      :	None.

 Restrictions:	
      some keywords are mutually exclusive - for self-documenting code 
      and reduction of code duplicataion (not terribly speed efficient)

 Side effects:	None.

 Prev. Hist. :	
      27-Apr-1993 (SLF)
      21-Mar-1994 (SLF) documentation header

 History     :	Version 1, 21-Mar-1994, S. Freeland

 Contact     :	SFREELAND
;-
;+
 Project     : SOHO - CDS

 Name        : 
	DATATYPE()
 Purpose     : 
	Returns the data type of a variable.
 Explanation : 
	This routine returns the data type of a variable in a format specified
	by the optional flag parameter.
 Use         : 
	Result = DATATYPE( VAR  [, FLAG ] )
 Inputs      : 
	VAR	= Variable to examine.
 Opt. Inputs : 
	FLAG	= Output format flag as explained below.  The default is 0.
 Outputs     : 
	The result of the function is the either a string or integer giving the
	data type of VAR.  Depending on the value of FLAG, the result will be
	one of the values from the following table:

		FLAG = 0       FLAG = 1           FLAG = 2       FLAG = 3

		UND            Undefined          0              UND
		BYT            Byte               1              BYT
		INT            Integer            2              INT
		LON            Long               3              LON
		FLO            Float              4              FLT
		DOU            Double             5              DBL
		COM            Complex            6              COMPLEX
		STR            String             7              STR
		STC            Structure          8              STC

 Opt. Outputs: 
	None.
 Keywords    : 
	HELP	= If set, then a short explanation is printed out.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	FLAG, if passed, must be an integer between 0 and 3.
 Side effects: 
	None.
 Category    : 
	Utilities, Arrays.
 Prev. Hist. : 
	Written by R. Sterner, 24 Oct, 1985.
	RES 29 June, 1988 --- added spelled out TYPE.
	R. Sterner, 13 Dec 1990 --- Added strings and structures.
	R. Sterner, 19 Jun, 1991 --- Added format 3.
	Johns Hopkins University Applied Physics Laboratory.

 Copyright (C) 1985, Johns Hopkins University/Applied Physics Laboratory
 This software may be used, copied, or redistributed as long as it is not
 sold and this copyright notice is reproduced on each copy made.  This
 routine is provided as is without any express or implied warranties
 whatsoever.  Other limitations apply as described in the file disclaimer.txt.

 Written     : 
	R. Sterner, JHU/APL, 24 October 1985.
 Modified    : 
	Version 1, William Thompson, GSFC, 23 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 23 April 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	DATE2MJD()

 Purpose     :	Convert calendar dates to Modified Julian Days.

 Explanation :	This procedure calculates the Modified Julian Day number from
		the year, month and day, or from the year, day-of-year.

 Use         :	Result = DATE2MJD(YEAR, MONTH, DAY)
		Result = DATE2MJD(YEAR, DOY)

 Inputs      :	YEAR	= Calendar year, e.g. 1989.  All four digits are
			  required.

 Opt. Inputs :	MONTH	= Calendar month, from 1-12.
		DAY	= Calendar day, from 1-31, depending on the month.

				or

		DOY	= Day-of-year, from 1-365 or 1-366, depending on the
			  year.

		Either MONTH and DAY, or DOY must be passed.

 Outputs     :	The result of the function is the Modified Julian Day number
		for the date in question.  It is an integral number--fractional
		days are not considered.

 Opt. Outputs:	None.

 Keywords    :	ERRMSG  =  If defined and passed, then any error messages 
                          will be returned to the user in this parameter 
                          rather than being handled by the IDL MESSAGE 
                          utility.  If no errors are encountered, then a null
                          string is returned.  In order to use this feature,
                          the string ERRMSG must be defined first, e.g.,

                            ERRMSG = ''
                            MJD = DATE2MJD ( YEAR, MONTH, DAY, ERRMSG=ERRMSG )
                            IF ERRMSG NE '' THEN ...

 Calls       :	DATATYPE

 Common      :	None.

 Restrictions:	None.

 Side effects:	If number of parameters sent is invalid, ERRMSG is returned as
               a string array of 2 elements if the keyword ERRMSG is set.
		Also, the result returned has a value of -1.

 Category    :	Utilities, Time.

 Prev. Hist. :	None.  However, part of the logic of this routine is based on
		JDCNV by B. Pfarr, GSFC.

 Written     :	William Thompson, GSFC, 13 September 1993.

 Modified    :	Version 1, William Thompson, GSFC, 13 September 1993.
		Version 2, Donald G. Luttermoser, GSFC/ARC, 20 December 1994.
			Added the keyword ERRMSG.  Added test for month to 
			make sure a string is not passed.  Note that there are
			no internal procedures called that use the ERRMSG
			keyword.
		Version 3, Donald G. Luttermoser, GSFC/ARC, 30 January 1995.
			Made the error handling routine more robust.  Note 
			this routine can handle both vector and scalar input.

 Version     :	Version 3, 30 January 1995.
;-
;+
 PROJECT:
       SOHO - SUMER

 NAME:	
       DATE_CODE()

 PURPOSE:
       Convert any date/time value into YYYYMMDD format.

 EXPLANATION:
       
 CALLING SEQUENCE: 
       Result = DATE_CODE(time)

 INPUTS:
       TIME - The date/time in any of the standard CDS time formats

 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       Result - A string with 'YYYYMMDD' format. If error occurs, a null
                string is returned.

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS: 
       None.

 CALLS:
       ANYTIM2UTC

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       
 PREVIOUS HISTORY:
       Written April 24, 1995, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 1, Liyun Wang, GSFC/ARC, April 24, 1995

 VERSION:
       Version 1, April 24, 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	DB_ENT2EXT

 Purpose     :	Converts database entry from host to external format.

 Explanation :	Converts a database entry to external (IEEE) data format prior
		to writing it.  Called from DBWRT.

 Use         :	DB_ENT2EXT, ENTRY

 Inputs      :	ENTRY	= Byte array containing a single record to be written
			  to the database file.

 Opt. Inputs :	None.

 Outputs     :	ENTRY	= The converted array is returned in place of the input
			  array.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	DB_INFO, DBXPUT, DBXVAL, HOST_TO_IEEE

 Common      :	DB_COM

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Database.

 Prev. Hist. :	None.

 Written     :	William Thompson, GSFC/CDS (ARC), 1 June 1994

 Modified    :	Version 1, William Thompson, GSFC/CDS (ARC), 1 June 1994

 Version     :	Version 1, 1 June 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	DB_ENT2HOST

 Purpose     :	Converts database entry from external to host format.

 Explanation :	Converts a database entry from external (IEEE) data format to
		host format after reading it from the file.  Called from DBRD
		and DBEXT_DBF.

 Use         :	DB_ENT2HOST, ENTRY, DBNO

 Inputs      :	ENTRY	= Byte array containing a single record read from the
			  database file.
		DBNO	= Number of the opened database file.

 Opt. Inputs :	None.

 Outputs     :	ENTRY	= The converted array is returned in place of the input
			  array.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	DB_INFO, DBXPUT, DBXVAL, IEEE_TO_HOST

 Common      :	DB_COM

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Database.

 Prev. Hist. :	None.

 Written     :	William Thompson, GSFC/CDS (ARC), 1 June 1994

 Modified    :	Version 1, William Thompson, GSFC/CDS (ARC), 1 June 1994

 Version     :	Version 1, 1 June 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DB_INFO()
 Purpose     :	
	Function to obtain information on opened data base file(s)
 Explanation :	
	Function to obtain information on opened data base file(s)
 Use         :	
	1)  result = db_info(request)
	2)  result = db_info(request,dbname)

 Inputs      :	
			     (calling sequence 1):

	request - string specifying requested value(s)
		value of request	  value returned in result
			'open'		Flag set to 1 if data base(s) are opened
			'number'	Number of data base files opened
			'items'		Total number of items (all db's opened)
			'update'	update flag (1 if opened for update)
			'unit_dbf'	Unit number of the .dbf files
			'unit_dbx'	Unit number of the .dbx files
			'entries'	Number of entries in the db's
			'length'	Record lengths for the db's
			'external'	True if the db's are in external format

			     (calling sequence 2):

	request - string specifying requested value(s)
		   value of request	  value returned in result
			'name'		Name of the data base
			'number'	Sequential number of the db
			'items'		Number of items for this db
			'item1'		Position of item1 for this db
					in item list for all db's
			'item2'		Position of last item for this db.
			'pointer'	Number of the item which points
					to this db. 0 for first or primary
					db.  -1 if link file pointers.
			'length'	Record length for this db.
			'title'		Title of the data base
			'unit_dbf'	Unit number of the .dbf file
			'unit_dbx'	Unit number of the .dbx file
	    		'entries'	Number of entries in the db
			'seqnum'	Last sequence number used
			'alloc'		Allocated space (# entries)
			'update'	1 if data base opened for update
			'external'	True if data base in external format

	dbname - data base name or number

 Opt. Inputs :	None.

 Outputs     :	
	Requested value(s) are returned as the function value.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	DB_COM

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Database

 Prev. Hist. :	
	version 1  D. Lindler    Oct. 1987
       changed type from 1 to 7 for IDLV2, J. Isensee, Nov., 1990

 Written     :	D. Lindler, GSFC/HRS, October 1987

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library
		Version 2, William Thompson, GSFC/CDS (ARC), 30 May 1994
			Added EXTERNAL request type.

 Version     :	Version 2, 30 May 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DB_ITEM
 Purpose     :	
	Returns the item numbers and other info. for an item name.
 Explanation :	
	Procedure to return the item numbers and other information
	of a specified item name

 Use         :	
	db_item, items, itnum, ivalnum, idltype, sbyte, numvals, nbytes

 Inputs      :	
	items - item name or number
		form 1  scalar string giving item(s) as list of names
			separated by commas
		form 2  string array giving list of item names
		form 3	string of form '$filename' giving name
			of text file containing items (one item per
			line)
		form 4  integer scalar giving single item number or
			  integer vector list of item numbers
		form 5  Null string specifying interactive selection
                       Upon return items will contain selected items
                       in form 1
		form 6	'*'	select all items

 Opt. Inputs :	

 Outputs     :	
	itnum - item number
	ivalnum - value(s) number from multiple valued item
	idltype - data type(s) (1=string,2=byte,4=i*4,...)
	sbyte - starting byte(s) in entry
	numvals - number of data values for item(s)
		It is the full length of a vector item unless
		a subscript was supplied
	nbytes - number of bytes for each value
    All outputs are vectors even if a single item is requested

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	DATATYPE, DB_INFO, GETTOK, SCREEN_SELECT, SPEC_DIR

 Common      :	DB_COM

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Database

 Prev. Hist. :	
	version 2  D. Lindler   Oct. 1987
       Return selected items in form 5   W. Landsman    Jan. 1987

 Written     :	D. Lindler, GSFC/HRS, October 1987

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DB_ITEM_INFO()
 Purpose     :	
	Returns information on selected item(s).
 Explanation :	
	Routine to return information on selected item(s) in the opened
	data bases.

 Use         :	
	result = db_item_info( request, itnums)

 Inputs      :	
	request - string giving the requested information.
		'name'		- item names
		'idltype'	- IDL data type (integers)
				  see documentation of intrinsic SIZE funtion
		'nvalues'	- vector item length (1 for scalar)
		'sbyte'		- starting byte in .dbf record (use bytepos
				  to get starting byte in record returned by
				  dbrd)
		'nbytes'	- bytes per data value
		'index'		- index types
		'description'	- description of the item
		'pflag'		- pointer item flags
		'pointer'	- data bases the items point to
		'format'	- print formats
		'flen'		- print field length
		'headers'	- print headers
		'bytepos'	- starting byte in dbrd record for the items
		'dbnumber'	- number of the opened data base
		'pnumber'	- number of db it points to (if the db is
					opened)
		'itemnumber'	- item number in the file

 Opt. Inputs :	
	itnums -(optional) Item numbers.  If not supplied info on all items
		are returned.

 Outputs     :	
	Requested information is returned as a vector.  Its type depends
	on the item requested.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	DB_COM

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Database

 Prev. Hist. :	
	version 1  D. Lindler  Nov. 1987

 Written     :	D. Lindler, GSFC/HRS, November 1987

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library.

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DB_OR()
 Purpose     :	
	Combine two vectors of entry numbers, removing duplicates.
 Explanation :	
	Combine two vectors of entry numbers, removing duplicate values.
	DB_OR can also be used to remove duplicate values from any longword 
	vector

	DB_OR returns where the histogram of the entry vectors is non-zero

 Use         :	
	LIST = DB_OR( LIST1 )          ;Remove duplicate values from LIST1
		or
	LIST = DB_OR( LIST1, LIST2 )   ;Concatenate LIST1 and LIST2, remove dups

 Inputs      :	
	LIST1, LIST2 - Vectors containing entry numbers, must be non-negative
			integers or longwords.

 Opt. Inputs :	None.

 Outputs     :	
	LIST - Vector containing entry numbers in either LIST1 or LIST2

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	
	ZPARCHECK - checks parameters  

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Database

 Prev. Hist. :	
	Written,     W. Landsman             February, 1989
	Check for degenerate values  W.L.    February, 1993

 Written     :	W. Landsman, GSFC/UIT, February 1989

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library.

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DB_TITLES
 Purpose     :	
	Print database name and title.  Called by DBHELP
 Explanation :	
	Print database name and title.  Called by DBHELP
 Use         :	
	db_titles,fnames,titles

 Inputs      :	
	fnames - string array of data base names

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	GETLOG

 Common      :	None.

 Restrictions:	None.

 Side effects:	
	Database name is printed along with the description in the .DBC file

 Category    :	Utilities, Database

 Prev. Hist. :	
	version 2  W. Landsman May, 1989
	modified to work under Unix, D. Neill, ACC, Feb 1991.

 Written     :	W. Landsman, GSFC/UIT, May 1989

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library.
		Version 2, William Thompson, GSFC/CDS (ARC), 1 June 1994
			Added support for external (IEEE) representation.
		Version 3, William Thompson, GSFC, 3 November 1994
			Modified to allow ZDBASE to be a path string.

 Version     :	Version 3, 3 November 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBBUILD
 Purpose     :	
	Build a database by appending new values for every item.
 Explanation :	
	Build a database by appending new values for every item.  The database
	must be opened for update (with DBOPEN) before calling DBBUILD.

 Use         :	
	dbbuild, [ v1, v2, v3, v4......v25, NOINDEX = ]

	EXAMPLE: Suppose a database named STARS contains the four items
	NAME,RA,DEC, and FLUX.  Assume that one already has the four vectors
	containing the values, and that the database definition (.DBD) file
	already exists.

	IDL> !PRIV=2                  ;Writing to database requires !PRIV=2
	IDL> dbcreate,'stars',1,1   ;Create database (.DBF) & index (.DBX) file
	IDL> dbopen,'stars',1         ;Open database for update
	IDL> dbbuild,name,ra,dec,flux ;Write 4 vectors into the database

 Inputs      :	
	v1,v2....v25 - vectors containing values for all items in the database.
         V1 contains values for the first item, V2 for the second, etc.
         The number of vectors supplied must equal the number of items
         (excluding entry number) in the database.  The number of elements 
         in each vector should be the same.   A multiple valued item
         should be dimensioned NVALUE by NENTRY, where NVALUE is the number
         of values, and NENTRY is the number of entries.

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	
	NOINDEX - If this keyword is supplied and non-zero then DBBUILD will
             *not* create an indexed file.    Useful to save time if
             DBBUILD is to be called several times and indexed file need
             only be created on the last call

	STATUS - Returns a status code denoting whether the operation was
	      successful (1) or unsuccessful (0).  Useful when DBBUILD is
	      called from within other applications.

 Calls       :	DB_INFO, DB_ITEM, DB_ITEM_INFO, DBCLOSE, DBINDEX, DBWRT, DBXPUT

 Common      :	None.

 Restrictions:	
	Do not call DBCREATE before DBBUILD if you want to append entries to
	an existing database

	DBBUILD checks that each value vector matches the idl type given in the
	database definition (.DBD) file, and that character strings are the 
	proper length. 

 Side effects:	None.

 Category    :	Utilities, Database

 Prev. Hist. :	
	Written          W. Landsman           March, 1989
	Added /NOINDEX keyword           W. Landsman        November, 1992
	User no longer need supply all items   W. Landsman  December, 1992 

 Written     :	W. Landsman, GSFC/UIT, March 1989

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library
		Version 2, William Thompson, GSFC, 1 April 1994
			Added STATUS keyword.

 Version     :	Version 2, 1 April 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBCLOSE
 Purpose     :	
	Procedure to close a data base file
 Explanation :	
	Procedure to close a data base file
 Use         :	
	dbclose

 Inputs      :	None.

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	DB_INFO

 Common      :	DB_COM

 Restrictions:	None.

 Side effects:	
 	The data base files currently opened are closed

 Category    :	Utilities, Database

 Prev. Hist. :	
	version 2  D. Lindler  Oct. 1987
	For IDL version 2      August 1990

 Written     :	D. Lindler, GSFC/HRS, October 1987

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library
		Version 2, William Thompson, GSFC/CDS (ARC), 30 May 1994
			Added support for external (IEEE) data format

 Version     :	Version 2, 30 May 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBCREATE
 Purpose     :	
	Create new data base file or modify description.
 Explanation :	
	Create new data base file or modify description.  A database
	definition file (.dbd) file must already exist.
	The default directory must be a ZDBASE: directory.

 Use         :	
	dbcreate, name,[ newindex, newdb, maxitems]  [,/external]

 Inputs      :	
	name- name of the data base (with no qualifier), scalar string. 
		The description will be read from the file "NAME".dbd 

 Opt. Inputs :	
	newindex - if non-zero then a new index file is created,
		otherwise it is assumed that changes do not affect the
		index file. (default=0)
	newdb - if non-zero then a new data base file (.dbf) will
		be created. Otherwise changes are assumed not to affect
		the file's present format.
	maxitems - maximum number of items in data base.
		If not supplied then the number of items is
		limited to 200.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	
	external - If set, then the database is written with an external data
		representation.  This allows the database files to be used on
		any computer platform, e.g. through NFS mounts, but some
		overhead is added to reading the files.  The default is to
		write the data in the native format of the computer being used.

		This keyword is only paid attention to if NEWDB and NEWINDEX
		are both nonzero.  Otherwise, the database is opened to find
		out if it uses external representation or not.

 Calls       :	GETLOG, GETTOK, ZPARCHECK

 Common      :	None.

 Restrictions:	
	If newdb=0 is not specified, the changes to the .dbd file can
	not alter the length of the records in the data base file.
	and may not alter positions of current fields in the file.
	permissible changes are:
		1) utilization of spares to create a item or field
		2) change in field name(s)
		3) respecification of index items
		4) changes in default print formats
		5) change in data base title
		6) changes in pointer specification to other data
			data bases

	!priv must be 2 or greater to execute this routine.

 Side effects:	
	data base description file ZDBASE:name.dbc is created
	and optionally ZDBASE:name.dbf (data file) and
	ZDBASE.dbx (index file) if it is a new data base.

 Category    :	Utilities, Database.

 Prev. Hist. :	
	version 2  D. Lindler  OCT, 1987
	Modified to work under IDL version 2.  M. Greason, STX, June 1990.
	Modified to work under Unix  D. Neill, ACC, Feb 1991.

 Written     :	D. Lindler, GSFC/HRS, October 1987

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library
		Version 2, William Thompson, GSFC/CDS (ARC), 28 May 1994
			Added EXTERNAL keyword.
		Version 3, William Thompson, GSFC/CDS (ARC), 29 July 1994
			Modified so that EXTERNAL keyword requires both
			NEWINDEX and NEWDB to be set.
		Version 4, William Thompson, GSFC, 3 November 1994
			Modified to allow ZDBASE to be a path string.
		Version 5, William Thompson, GSFC, 22 December 1994
			Incorporated several minor changes made by Wayne
			Landsman.

 Version     :	Version 5, 22 December 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBDELETE
 Purpose     :	
	Deletes specified entries from data base
 Explanation :	
	Deletes specified entries from data base

       The procedure is rather slow because the entire database is re-
       created with the specified entries deleted.

 Use         :	
	DBDELETE, list, [ name ]   

	EXAMPLE: Delete entries in a database STARS where RA=DEC = 0.0

        IDL> !PRIV= 3                           ;Set privileges
        IDL> dbopen,'STARS',1                   ;Open for update
        IDL> list = dbfind('ra=0.0,dec=0.0')    ;Obtain LIST vector
        IDL> dbdelete, list             ;Delete specified entries from db

 Inputs      :	
	list - list of entries to be deleted, scalar or vector
	name - optional name of data base, scalar string.  If not specified
		then the data base file must be previously opened for update 
               by DBOPEN.

 Opt. Inputs :	
        Set the non-standard system variable !DEBUG = 2 to obtain 
        additional diagnostics   

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	DB_INFO, DBCLOSE, DBINDEX, DBOPEN, DBPUT, ZPARCHECK

 Common      :	
	DBCOM

 Restrictions:	
	!PRIV must be at least 3 to execute.

 Side effects:	
	The data base file (ZDBASE:name.DBF) is modified by removing the
	specified entries and reordering the remaining entry numbers
       accordingly (ie. if you delete entry 100, it will be replaced
       by entry 101 and the database will contain 1 less entry.

 Category    :	Utilities, Database.

 Prev. Hist. :	
	Version 2  D. Lindler  July, 1989
       Updated documentation   W. Landsman    December 1992

 Written     :	D. Lindler, GSFC/HRS, July 1989

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library
		Version 2, William Thompson, GSFC, 28 February 1995
			Fixed bug when external representation used.

 Version     :	Version 2, 28 February 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBEDIT

 Purpose     :	
	Interactively edit specified fields in a database.

 Explanation :	
	Interactively edit specified fields in a database.  The
	value of each field is displayed, and the user has the option
	of changing or keeping the value.  Widgets will be used if they
	are available.

	(1) Use the cursor and point to the value you want to edit.   
	(2) Type the new field value over the old field value.
	(3) When you are done changing all of the field values for each entry
	save the entry to the databases by pressing 'SAVE ENTRY TO DATABASES'.
	Here all of the values will be checked to see if they are the correct
	data type.  If a field value is not of the correct data type, it will
	not be saved.  

	Use the buttons "PREV ENTRY" and "NEXT ENTRY" to move between entry 
	numbers.  You must save each entry before going on to another entry in 
	order for your changes to be saved.

	Pressing "RESET THIS ENTRY" will remove any unsaved changes to the 
	current entry.

 Use         :	
	dbedit, list, [ items ]

	EXAMPLE: Suppose one wanted to edit all of the previously unknown moon
	angles (assigned a value of -999) the database FRAMES

	IDL> !priv=2			
	IDL> dbopen, 'frames', 1
	IDL> list = dbfind( 'moonang = -999.0')
	IDL> dbedit, list, 'moonang'

 Inputs      :	
	list - scalar or vector of database entry numberss.  Set list = 0 to 
	interactively add a new entry to a database.  Set list = -1 to edit 
	all entries.

 Opt. Inputs :	
	items - list of items to be edited.  If omitted, all fields can be 
	edited. 

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	DATATYPE, DB_INFO, DB_ITEM, DB_ITEM_INFO, DBEDIT_BASIC,
		DBINDEX, DBOPEN, DBRD, DBWRT, DBXPUT, DBXVAL, ZPARCHECK

 Common      :	
 	DB_COM -- contains information about the opened database.
  	DBW_C -- contains information intrinsic to this program.

 Restrictions:	
  	Database must be opened for update prior to running
  	this program.  User must be running DBEDIT from an 
  	account that has write privileges to the databases.  

	If one is editing an indexed item, then after all edits are complete,
	DBINDEX will be called to reindex the entire item.    This may
	be time consuming.

 Side effects:	
  	Will update the database files.

 Category    :	Utilities, Database

 Prev. Hist. :	
	Adapted from Landsman's DBEDIT
	added widgets,  Melissa Marsh, HSTX, August 1993
	do not need to press return after entering each entry,
			fixed layout problem on SUN,
			Melissa Marsh, HSTX, January 1994

 Written     :	Wayne Landsman, GSFC/UIT (STX).

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library
		Version 2, William Thompson, GSFC, 1 April 1994
			Incorporated following change:

	Only updates the fields which are changed. Joel Offenberg, HSTX, Mar 94

		Version 3, William Thompson, GSFC, 4 November 1994
			Incorporated bugfix by Wayne Landsman.
		Version 4, William Thompson, GSFC, 22 December 1994
			Incorporated more bugfixes by Wayne Landsman.
               Version 5, Trap editing of empty database.  C D Pike, RAL
                                                           3-Mar-95

 Version     :	Version 5, 3-Mar-95
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBEDIT_BASIC
 Purpose     :	
	Interactively edit specified fields in a database.
 Explanation :	
	Interactively edit specified fields in a database.  The
	value of each field is displayed, and the user has the option
	of changing or keeping the value.

 Use         :	
	dbedit_basic, list, [ items ]

	The item values for each entry to be edited are first displayed
	User is the asked "EDIT VALUES IN THIS ENTRY (Y(es), N(o), or Q(uit))?
	If user answers 'Y' or hits RETURN, then each item is displayed
	with its current value, which the user can update.  If user answered
	'N' then DBEDIT_BASIC skips to the next  entry.   If user answers 'Q'
	then DBEDIT will exit, saving all previous changes.

	EXAMPLE: Suppose V magnitudes (V_MAG) in a database STARS with unknown
	values were assigned a value of 99.9.  Once the true values become
	known, the database can be edited

	IDL> !PRIV=2 & dbopen,'STARS',1         ;Open database for update
	IDL> list =  dbfind('V_MAG=99.9')       ;Get list of bad V_MAG values
	IDL> dbedit,list,'V_MAG'       ;Interactively insert good V_MAG values

 Inputs      :	
	list - scalar or vector of database entry numbers.  Set LIST=0
		to interactively add a new entry to a database.

 Opt. Inputs :	
	items - list of items to be edited.  If not supplied, then the
		value of every field will be displayed.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	DATATYPE, DB_INFO, DB_ITEM, DB_ITEM_INFO, DBINDEX, DBOPEN,
		DBPRINT, DBRD, DBWRT, DBXPUT, DBXVAL, ZPARCHECK

 Common      :	None.

 Restrictions:	
	(1) Database must be opened for update (dbopen,<dbname>,1) before
	calling DBEDIT_BASIC.  User must have write privileges on the database
	files.
	(2) User gets a second chance to look at edited values, before
	they are actually written to the database

 Side effects:	None.

 Category    :	Utilities, Database.

 Prev. Hist. :	
	Written  W. Landsman     STX        April, 1989
	Rename DBEDIT_BASIC from DBEDIT            July, 1993

 Written     :	W. Landsman, GSFC/UIT (STX), April 1989

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBEXT
 Purpose     :	
	Extract values of up to 12 items from data base file.
 Explanation :	
	Procedure to extract values of up to 12 items from
	data base file, and place into IDL variables

 Use         :	
	dbext,list,items,v1,[v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12]

	EXAMPLE: Extract all RA and DEC values from the currently opened
	database, and place into the IDL vectors, IDLRA and IDLDEC.

		IDL> DBEXT,-1,'RA,DEC',idlra,idldec

 Inputs      :	
	list - list of entry numbers to be printed, vector or scalar
		If list = -1, then all entries will be extracted.
		list may be converted to a vector by DBEXT 
	items - standard item list specification.  See DBPRINT for 
		the 6 different ways that items may be specified. 

 Opt. Inputs :	None.

 Outputs     :	
	v1...v12 - the vectors of values for up to 12 items.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	DB_INFO, DB_ITEM, DB_ITEM_INFO, DBEXT_DBF, DBEXT_IND, ZPARCHECK

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Database

 Prev. Hist. :	
	version 2  D. Lindler  NOV. 1987
	check for INDEXED items   W. Landsman   Feb. 1989

 Written     :	D. Lindler, GSFC/HRS, November 1987

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBEXT_DBF
 Purpose     :	
	Extract values of up to 12 items -- subroutine of DBEXT

 Explanation :	
	Procedure to extract values of up to 12 items from a data base file. 
	This is a subroutine of DBEXT, which is the routine a user should 
	normally use.

 Use         :	
	dbext_dbf,list,dbno,sbyte,nbytes,idltype,nval,v1,v2,v3,v4,v5,v6,v7,
					v8,v9,v10,v11,v12

 Inputs      :	
	list - list of entry numbers to extract desired items.   It is the 
		entry numbers in the primary data base unless dbno is greater 
		than or equal to -1.  In that case it is the entry number in 
		the specified data base.
	dbno - number of the opened db file
		if set to -1 then all data bases are included
	sbyte - starting byte in the entry.  If single data base then it must 
		be the starting byte for that data base only and not the 
		concatenation of db records 
	nbytes - number of bytes in the entry
	idltype - idl data type of each item to be extracted
	nval - number of values per entry of each item to be extracted

 Opt. Inputs :	None.

 Outputs     :	
	v1...v12 - the vectors of values for up to 12 items

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	DB_INFO, DBRD

 Common      :	DB_COM

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Database

 Prev. Hist. :	
	version 1  D. Lindler  Nov. 1987
	Extract multiple valued entries    W. Landsman   May 1989

 Written     :	D. Lindler, GSFC/HRS, November 1987

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library
		Version 2, William Thompson, GSFC/CDS (ARC), 1 June 1994
			Added support for external (IEEE) representation.

 Version     :	Version 2, 1 June 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBEXT_IND
 Purpose     :	
	routine to read a indexed item values from index file
 Explanation :	
	routine to read a indexed item values from index file
 Use         :	
	dbext_ind,list,item,dbno,values

 Inputs      :	
	list - list of entry numbers to extract values for
		(if it is a scalar, values for all entries are extracted)
	item - item to extract
	dbno - number of the opened data base

 Opt. Inputs :	None.

 Outputs     :	
	values - vector of values returned as function value

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	DB_INFO, DB_ITEM, DB_ITEM_INFO

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Database

 Prev. Hist. :	
	version 1  D. Lindler  Feb 88
	Faster processing of string values    W. Landsman   April, 1992

 Written     :	D. Lindler, GSFC/HRS, February 1988

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library
		Version 2, William Thompson, GSFC/CDS (ARC), 30 May 1994
			Added support for external (IEEE) data format

 Version     :	Version 2, 30 May 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBFIND()
 Purpose     :	
	Search data base for entries with specified characteristics
 Explanation :	
	Function to search data base for entries with specified
	search characteristics.

 Use         :	
	result = dbfind(spar,[ listin, /SILENT, /FULLSTRING])

 Inputs      :	
	spar - search_parameters (string)...each search parameter 
		is of the form:

		option 1) min_val < item_name < max_val
		option 2) item_name = value
		option 3) item_name = [value_1, value_10]
			Note: option 3 is also the slowest.
		option 4) item_name > value
		option 5) item_name < value
		option 6) item_name = value(tolerance) ;eg. temp=25.0(5.2)
		option 7) item_name			;must be non-zero

 		Multiple search parameters are separated by a comma.
		eg.     'cam_no=2,14<ra<20'

		Note: < is interpreted as less than or equal.
		      > is interpreted as greater than or equal.
	
		RA and DEC keyfields are stored as floating point numbers 
		in the data base may be entered as HH:MM:SEC and
		DEG:MIN:SEC. Where:

			HH:MM:SEC   equals  HH + MM/60.0  + SEC/3600.
			DEG:MIN:SEC equals DEG + MIN/60.0 + SEC/3600.
			
		For example:
			40:34:10.5 < dec < 43:25:19 , 8:22:1.0 < ra < 8:23:23.0

		Specially encoded date/time in the data base may
		be entered by  YY/DAY:hr:min:sec which is
		interpreted as  
			YY*1000+DAY+hr/24.0+min/24.0/60.+sec/24.0/3600.

		For example
			85/201:10:35:30<date_time<85/302:10:33:33.4
		would specify all entries between:
			year 1985 day 201 at 10:35:30 to
			day 302 at 10:33:33.4
		The date/time may also be encoded as:
			DD-MMM-YEAR HH::MM:SS.SS	
			eg.  12-JUL-86 10:23:33.45
		(this is the format of system variable !stime)

		Multiple search parameters may be stored in a string
		array (one parameter per array element) instead of
		concatenating them with commas in a single string.
		Example:
			input_array = strarr(2)
			input_array(0) = '14<ra<16'   ; 14-16 hrs of ra.
			input_array(1) = '8<dec<20'   ; + 8-20 deg. decl.

 Opt. Inputs :	
	listin - gives list of entries to be searched.  If not supplied or 
		set to -1 then all entries are searched.

 Outputs     :	
	List of ENTRY numbers satisfying search characteristics
		is returned as the function value.

 Opt. Outputs:	None.

 Keywords    :	
	SILENT  - If the keyword SILENT is set and non-zero, then DBFIND
		will not print the number of entries found.

	FULLSTRING - By default, one has a match if a search string is 
		included in any part of a database value (substring match).   
		But if /FULLSTRING is set, then all characters in the database
		value must match the search string (excluding leading and 
		trailing blanks).    Both types of string searches are case
		insensitive.

 Calls       :	DB_INFO, DB_ITEM, DB_ITEM_INFO, DBEXT, DBEXT_IND, DBFIND_ENTRY,
		DBFIND_SORT, DBFPARSE, DBRD, DBSEARCH, ZPARCHECK

 Common      :	None.

 Restrictions:	
	The data base must be previously opened with DBOPEN.

 Side effects:	
	!ERR is set to number of entries found

 Category    :	Utilities, Database

 Prev. Hist. :	
	version 4  by D. Lindler  Nov. 1987 (new db format)
	LIST creation corrected    Wayne B Landsman STX      Feb. 1989
	Removed EXTRAC calls, fixed problem with large DBs WBL June, 1991

 Written     :	D. Lindler, GSFC/HRS, November 1987

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library
		Version 2, Wayne Landsman, GSFC/UIT (STX), 1 April 1994
			Added FULLSTRING keyword.
		Version 3, William Thompson, GSFC, 1 April 1994
			Added check for empty database
		Version 4, William Thompson, GSFC, 5 April 1994
			Changed so that !ERR is zero when database is empty,
			and LISTIN is returned, based on discussion with Wayne
			Landsman.
		Version 5, Wayne Landsman, GSFC/UIT (STX), 26 May 1994
			Added error message when database is empty.
		Version 6, William Thompson, GSFC, 14 March 1995
			Added FULLSTRING keyword to DBFIND_SORT call

 Version     :	Version 6, 14 March 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBFIND_ENTRY
 Purpose     :	
	Performs an entry number search.  Subroutine of DBFIND.
 Explanation :	
	This is a subroutine of dbfind and is not a standalone procedure
	It performs a entry number search.

 Use         :	
	dbfind_entry, type, svals, nentries, values

 Inputs      :	
	type - type of search (output from dbfparse)
	svals - search values (output from dbfparse)
	values - array of values to search

 Opt. Inputs :	

 Outputs     :	
	good - indices of good values
	!err is set to number of good values

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Database

 Prev. Hist. :	
	D. Lindler  July,1987

 Written     :	D. Lindler, GSFC/HRS, July 1987

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBFIND_SORT   
 Purpose     :	
	Limits the search using sorted values.
 Explanation :	
	This is a subroutine of dbfind and is not a standalone procedure
	It is used to limit the search using sorted values

 Use         :	
	dbfind_sort, it, type, svals, list

 Inputs      :	
	it - item number, scalar
	type - type of search (output from dbfparse)
	svals - search values (output from dbfparse)

 Opt. Inputs :	None.

 Outputs     :	
	list - found entries
	!err is set to number of good values
	!ERR = -2 for an invalid search

 Opt. Outputs:	None.

 Keywords    :	
	FULLSTRING - By default, one has a match if a search string is 
		included in any part of a database value (substring match).   
		But if /FULLSTRING is set, then all characters in the database
		value must match the search string (excluding leading and 
		trailing blanks).    Both types of string searches are case
		insensitive.

 Calls       :	DB_INFO, DB_ITEM, DB_ITEM_INFO, DBSEARCH, MATCH

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Database

 Prev. Hist. :	
	D. Lindler  July,1987

 Written     :	D. Lindler, GSFC/HRS, July 1987

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library
		Version 2, William Thompson, GSFC/CDS (ARC), 30 May 1994
			Added support for external (IEEE) data format
		Version 3, William Thompson, GSFC, 14 March 1995
			Added keyword FULLSTRING

 Version     :	Version 3, 14 March 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBFPARSE
 Purpose     :	
	Parse the search string.  Subroutine of DBFIND.
 Explanation :	
	Parse the search string supplied to DBFIND.   Not a standalone routine
 Use         :	
	DBFPARSE, [ spar, items, stype, values ]

 Inputs      :	
	spar - search parameter specification, scalar string

 Opt. Inputs :	None.

 Outputs     :	
	items - list of items to search on
	stype - search type, numeric scalar
		0    item=values(j,0)
		-1   item>values(j,0)
		-2   item<values(j,1)
		-3   values(j,0)<item<values(j,1)
		-4   item is non zero
		-5   item=values(j,0) within tolerance values(j,1)
		0<   items in list values(j,i) for i=0,stype-1
	values - search values, 20 x 10 string array, can parse a string
		with up to 20 items specifications, each item can have 10
		values

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	GETTOK, STRNUMBER

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Database

 Prev. Hist. :	
	D. Lindler NOV, 1987
	Check for valid numeric values before assuming a date string
	W. Landsman                    July, 1993

 Written     :	D. Lindler, GSFC/HRS, November 1987

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBGET()
 Purpose     :	
	Find entry number of fields with specified values.
 Explanation :	
	Find entry number of fields which contain specified values in
	a specified item.   DBGET is an altnerative to DBFIND when the
	desired search values are not easily expressed as a string.  

 Use         :	
	list = dbget( item, values, [ listin ], SILENT = )

	EXAMPLE:  Get info on selected HD stars in Bright Star catalogue

	IDL> dbopen, 'YALE_BS' 
	IDL> hdno = [1141,2363,3574,4128,6192,6314,6668]    ;Desired HD numbers
	IDL> list = dbget( 'HD', hdno )        ;Get corresponding entry numbers

 Inputs      :	
	item - Item name or number
	values -  scalar or vector containing item values to search for.

 Opt. Inputs :	
	listin - list of entries to be searched.  If not supplied, or
		set to -1, then all entries are searched

 Outputs     :	
	list - vector giving the entry number of entries containing desired
		item values.  The number of elements in  LIST may be different 
		from that of VALUE, since a value might be located zero, once, 
		or many times in the database.  Use the function DBMATCH if a 
		one to one correspondence is desired between VALUES and LIST. 

	!ERR is set to the number of entries found

 Opt. Outputs:	None.

 Keywords    :	
	SILENT - If this keyword is supplied, then DBGET will not display
		the number of entries found
	FULLSTRING - By default, one has a match if a search string is 
		included in any part of a database value (substring match).   
		But if /FULLSTRING is set, then all characters in the database
		value must match the search string (excluding leading and 
		trailing blanks).    Both types of string searches are case
		insensitive.

 Calls       :	DB_INFO, DB_ITEM, DB_ITEM_INFO, DBEXT, DBFIND_SORT, DBSEARCH

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Database.

 Prev. Hist. :	
	Written,    W. Landsman      STX     February, 1989

 Written     :	W. Landsman, GSFC/UIT (STX), February 1989

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library.
		Version 2, William Thompson, GSFC, 14 March 1995
			Added keyword FULLSTRING

 Version     :	Version 2, 14 March 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBHELP
 Purpose     :	
	List available databases or items in current database
 Explanation :	
	Procedure to either list available databases (if no database is 
	currently open) or the items in the currently open database.

	If no data base is opened then a list of data bases are
	printed, otherwise the items in the open data base are printed.

	If a string is supplied for flag and a data base is opened
	flag is assumed to be an item name.  The information for that
	item is printed along with contents in a optional file
	zdbase:dbname_itemname.hlp
	if a string is supplied for flag and no data base is opened,
	then string is assumed to be the name of a data base file.
	only information for that file is printed along with an
	optional file zdbase:dbname.hlp.

 Use         :	
	dbhelp, [ flag , TEXTOUT = ]

 Inputs      :	
	flag - (optional) if set to nonzero then item or database
		descriptions are also printed
		default=0
		If flag is a string, then it is interpreted as the
		name of a data base (if no data base is opened) or a name 
		of an item in the opened data base.   In this case, help
		is displayed only for the particular item or database

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	
	textout   Used to determine output device.  If not present, the
		value of !TEXTOUT system variable is used (see TEXTOPEN )
		textout=1	Terminal with /MORE
		textout=2	Terminal without /MORE
		textout=3	<PROGRAM>.PRT
		textout=4	LASER PRINTER
		textout=5      USER MUST OPEN FILE;            

 Calls       :	DB_INFO, DB_ITEM, DB_ITEM_INFO, FDECOMP, GETLOG, TEXTCLOSE,
		TEXTOPEN

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Database.

 Prev. Hist. :	
	Version 2  D. Lindler  Nov 1987 (new db format)
	Faster printing of title desc. W. Landsman  May 1989 
	Keyword textout added, J. Isensee, July, 1990
	Modified to work on Unix, D. Neill, ACC, Feb 1991.

 Written     :	D. Lindler, GSFC/HRS, November 1987

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library
		Version 2, William Thompson, GSFC/CDS (ARC), 1 June 1994
			Added support for external (IEEE) representation.
		Version 3, William Thompson, GSFC, 3 November 1994
			Modified to allow ZDBASE to be a path string.
		Version 4, Wayne Landsman, GSFC/UIT, December 1994
			Remove duplicate database names

 Version     :	Version 4, 19 December 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBINDEX
 Purpose     :	
	Procedure to create index file for data base

 Explanation :	
	Procedure to create index file for data base

 Use         :	
	dbindex, [ items ]

 Inputs      :	None.

 Opt. Inputs :	
	items - names or numbers of items to be index -- if not supplied,
		then all indexed fields will be processed.  

 Outputs     :	
	Index file <name>.dbx is created on disk location ZDBASE:

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	BSORT, DB_INFO, DB_ITEM, DB_ITEM_INFO, DBEXT_DBF, DBINDEX_BLK

 Common      :	None.

 Restrictions:	
	Data base must have been previously opened for update
	by DBOPEN 

 Side effects:	None.

 Category    :	Utilities, Database

 Prev. Hist. :	
	version 2  D. Lindler  Nov 1987 (new db format)
	W. Landsman    added optional items parameter Feb 1989 
	M. Greason     converted to IDL version 2.  June 1990.

 Written     :	D. Lindler, GSFC/HRS, November 1987

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library
		Version 2, Wayne Landsman, GSFC/UIT (STX), 26 May 1994
			Miscellaneous changes
		Version 3, William Thompson, GSFC/CDS (ARC), 30 May 1994
			Added support for external (IEEE) data format
               Version 3.1, Dominic Zarro, (ARC/GSFC) 16 December 1994.
                       Added /INFO to 
                       message, 'ERROR - database contains no entries',/INF
                       This is to avoid halting MK_DETAILS when a user
                       deletes all the plan entries (a rare happening).

 Version     :	Version 3.1, 16 December 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBINDEX_BLK()
 Purpose     :	
	Set associated variable in preparation for writing to file.
 Explanation :	
	To set up an associated variable of the correct data-type and offset
	into the file by some amount in preparation for writing to the file.

 Use         :	
	res = dbindex_blk(unit, nb, bsz, ofb, dtype)

 Inputs      :	
	unit   The unit number assigned to the file.
	nb     The number of blocks to offset into the file.
	bsz    The size of each block, in bytes, to offset into the file.
	ofb    The offset into the block, in bytes.
	dtype  The IDL datatype as defined in the SIZE function

 Opt. Inputs :	None.

 Outputs     :	
	res    The returned variable.  This is an associated variable.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	
	The file must have been previously opened.

 Side effects:	None.

 Category    :	Utilities, Database.

 Prev. Hist. :	
	Written by Michael R. Greason, STX, 14 June 1990.

 Written     :	Michael R. Greason, GSFC/UIT (STX), 14 June 1990

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBMATCH()
 Purpose     :	
	Find entry number in a database for item values.
 Explanation :	
	Find one entry number in a database for each element in a vector of
	item values.   DBMATCH is especially useful for finding a one-to-one 
	correspondence between entries in different databases, and thus to 
	create the vector needed for database pointers.

	DBMATCH is meant to be used for items which do not have duplicate values
	in a database (e.g. catalog numbers).  If more than one entry is found
	for a particular item value, then only the first one is stored in LIST.

 Use         :	
	list = DBMATCH( item, values, [ listin ] )

	EXAMPLE: Make a vector which points from entries in the Yale Bright
	Star catalog to those in the SAO catalog, using the HD number

	IDL> dbopen, 'yale_bs'            ;Open the Yale Bright star catalog
	IDL> dbext, -1, 'HD', hd          ;Get the HD numbers
	IDL> dbopen, 'sao'                ;Open the SAO catalog
	IDL> list = dbmatch( 'HD', HD)    ;Get entries in SAO catalog 
					  ;corresponding to each HD number.

 Inputs      :	
	ITEM - Item name or number, scalar
	VALUES -  scalar or vector containing item values to search for.

 Opt. Inputs :	
	LISTIN - list of entries to be searched.  If not supplied, or
		set to -1, then all entries are searched

 Outputs     :	
	LIST - vector of entry numbers with the same number of elements as 
		VALUES.  Contains a value of 0 wherever the corresponding item
		value was not found.

 Opt. Outputs:	None.

 Keywords    :	
	FULLSTRING - By default, one has a match if a search string is 
		included in any part of a database value (substring match).   
		But if /FULLSTRING is set, then all characters in the database
		value must match the search string (excluding leading and 
		trailing blanks).    Both types of string searches are case
		insensitive.

 Calls       :	DATATYPE, DB_INFO, DB_ITEM, DB_ITEM_INFO, DBEXT, DBFIND_SORT

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Database.

 Prev. Hist. :	
	Written,    W. Landsman      STX     February, 1990
	Fixed error when list in parameter used May, 1992
	Faster algorithm with sorted item when listin parameter supplied 
	Nov 1992

 Written     :	W. Landsman, GSFC/UIT (STX), February 1990

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library.
		Version 2, William Thompson, GSFC, 14 March 1995
			Added keyword FULLSTRING
		Version 3, William Thompson, GSFC, 15 March 1995
			Added check for empty database
		Version 4, William Thompson, GSFC, 30 March 1995
			Fixed bug with FULLSTRING for non-sorted item.

 Version     :	Version 4, 30 March 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBOPEN
 Purpose     :	
	Routine to open an IDL database

 Explanation :	
	Routine to open an IDL database

 Use         :	
	dbopen, name, update

 Inputs      :	
	name - (Optional) name or names of the data base files to open.
		It has one of the following forms:

		'name'		-open single data base file
		'name1,name2,...,nameN' - open N files which are
				connected via pointers.
		'name,*'	-Open the data base with all data
				bases connected via pointers
		''		-Interactively allow selection of
				the data base files.

		If not supplied then '' is assumed.
		name may optionally be a string array with one name
		per element.

	update - (Optional) Integer flag specifing openning for update.
		0 	- Open for read only
		1	- Open for update
		2	- Open index file for update only
		!PRIV must be 2 or greater to open a file for update.
		If a file is opened for update only a single data base
		can be specified.

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	
	UNAVAIL - If present, a "database doesn't exit" flag is returned
	          through it.  0 = the database exists and was opened (if
	          no other errors arose).  1 = the database doesn't exist.
	          Also if present, the error message for non-existant databases
	          is suppressed.  The action, however, remains the same.  If
	          specifiying this, be sure that the variable passed exists
	          before the call to DBOPEN.

 Calls       :	DB_INFO, DBCLOSE, FDECOMP, GETLOG, GETTOK, SCREEN_SELECT,
		ZPARCHECK, LIST_WITH_PATH, FIND_WITH_DEF

 Common      :	DB_COM

 Restrictions:	None.

 Side effects:	
	The .DBF and .dbx files are opened using unit numbers obtained by
 	GET_LUN.  Descriptions of the files are placed in the common block
 	DB_COM.

 Category    :	Utilities, Database.

 Prev. Hist. :	
	Version 2, D. Lindler, Nov. 1987
       For IDL Version 2  W. Landsman May 1990 -- Will require further 
           modfication once SCREEN_SELECT is working
	Modified to work under Unix, D. Neill, ACC, Feb 1991.

 Written     :	D. Lindler, GSFC/HRS, November 1987

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library.
		Version 2, William Thompson, GSFC/CDS (ARC), 1 June 1994
			Added support for external (IEEE) representation.
		Version 3, William Thompson, GSFC/CDS (ARC), 20 June 1994
			Incorporated UNAVAIL keyword, added by M. Greason,
			Hughes STX, Feb 1993.
		Version 4, William Thompson, GSFC, 3 November 1994
			Modified to allow ZDBASE to be a path string.
               Version 5, CDP, RAL 25-Apr-95
                       Changed error message to put out root file name.

 Version     :	Version 5, 25 April 1995

;-
;+
 Project     :	SOHO - CDS

 Name        :	
     DBPRINT
 Purpose     :	
	Print specified items from a list of database entries
 Explanation :	
	Procedure to print specified items from a list of database entries
 Use         :	
	dbprint, list, [items, FORMS= , TEXTOUT= , NOHeader = ]  

	Users may want to adjust the default lines_per_page value given at
	the beginning of the program for their own particular printer.

 Inputs      :	
	list  - list of entry numbers to be printed, vector or scalar 
		if list = -1, then all entries will be printed.
		An error message is returned if any entry number is larger
		than the number of entries in the database

 Opt. Inputs :	
	items - items to be printed, specified in any of the following ways:

		form 1  scalar string giving item(s) as list of names
			separated by commas
		form 2  string array giving list of item names
		form 3	string of form '$filename' giving name
			of text file containing items (one item per
			line)
		form 4  integer scalar giving single item number or
			  integer vector list of item numbers
		form 5  Null string specifying interactive selection.   This
                       is the default if 'items' is not supplied
		form 6	'*'	select all items, printout will be in
                       table format. 

            If items was undefined or a null string on input, then
            on output it will contain the items interactively selected.

	Output device controlled by non-standard system varaible !TEXTOUT, if 
	TEXTOUT keyword is not used.    

 Outputs     :	None.

 Opt. Outputs:	
	items can also be an output variable--see above.

 Keywords    :	
	FORMS     The number of printed lines per page. If forms is not 
		present, output assumed to be in PORTRAIT form, and 
		a heading and 47 lines are printed on each page, with
		a page eject between each page.  For LANDSCAPE form with
		headings on each page, and a page eject between pages, set 
		forms = 34.  For a heading only on the first page, and no
		page eject, set forms = 0.   This is the default for output
		to the terminal

	TEXTOUT   Used to determine output device.  If not present, the
		value of !TEXTOUT system variable is used.
		textout=1	Terminal with /MORE
		textout=2	Terminal without /MORE
		textout=3     	<program>.prt    
		textout=4	laser.tmp
		textout=5      user must open file          
		textout = filename (default extension of .prt)

	NOHEADER - If this keyword is set, then the column headers will not
		be printed

 Calls       :	DATATYPE, DB_INFO, DB_ITEM, DB_ITEM_INFO, DBRD, DBTITLE,
		DBXVAL, GETLOG, TEXTCLOSE, TEXTOPEN, ZPARCHECK

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Database.

 Prev. Hist. :	
	version 2  D. Lindler  Nov. 1987 (new db format)
	Extra space added at end of printout  W. Landsman Nov. 1990
	Test if user pressed 'Q' in response to /MORE W. Landsman  Sep 1991
	Apply STRTRIM to free form output        W. Landsman   Dec 1992
	Test for string value of TEXTOUT         W. Landsman   Feb 1994

 Written     :	D. Lindler, GSFC/HRS, November 1987.

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library
		Version 2, William Thompson, GSFC, 3 November 1994
			Modified to allow ZDBASE to be a path string.

 Version     :	Version 2, 3 November 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBPUT
 Purpose     :	
	Put new value for specified item into data base file entry.

 Explanation :	
	Procedure to place a new value for a specified item into
	a data base file entry.

 Use         :	
	dbput, item, val, entry

 Inputs      :	
	item - item name or number
	val - item value(s)
	entry - entry (byte array) or scalar entry number.
	        if entry is a scalar entry number then the data
	        base file will be updated.  Otherwise the change
	        will be only made to the entry array which must
	        be written latter using DBWRT.

 Opt. Inputs :	None.

 Outputs     :	
	entry can also be an output array--see above.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	DB_ITEM, DBRD, DBWRT, DBXPUT

 Common      :	None.

 Restrictions:	
	If entry is a scalar entry number or the input file name
	is supplied, the entry in the data base will be updated
	instead of a supplied entry variable.  In this case, !priv
	must be greater than 1.

 Side effects:	None.

 Category    :	Utilities, Database.

 Prev. Hist. :	
	version 2  D. Lindler  Feb 1988 (new db formats)
	modified to convert blanks into zeros correctly D. Neill Jan 1991

 Written     :	D. Lindler, GSFC/HRS, February 1988.

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library.

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBRD
 Purpose     :	
	Read an entry from a data base or linked multiple databases.
 Explanation :	
	Procedure to read an entry from a data base file or from
	linked multiple databases.

	If multiple data base files are opened, the records are
	concatenated with each other

 Use         :	
	dbrd, enum, entry, [available, dbno]

 Inputs      :	
	enum - entry number to read, integer scalar

 Opt. Inputs :	
	dbno - specification of the data base number to return.  If
		supplied, only the record for the requested data base
		number is returned in entry.  Normally this input should
		not be supplied.  dbno is numbered for 0 to n-1 and gives
		the number of the data base opened.  The data bases are 
		numbered in the order supplied to dbopen.  If dbno is supplied 
		then the entry number refers to that data base and not the
		primary or first data base. If set to -1, then it means all
		data bases opened (same as not supplying it)

 Outputs     :	
	entry - byte array containing the entry

 Opt. Outputs:	
	available - byte array with length equal to number of data
		bases opened.  available(i) eq 1 if an entry (pointed
		to) is available.  It always equals 1 for the first 
		data base, otherwise it is an error condition.

 Keywords    :	None.

 Calls       :	DB_INFO, DB_ITEM, DBXVAL

 Common      :	DB_COM

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Database

 Prev. Hist. :	
	version 2  D. Lindler  Nov. 1987

 Written     :	D. Lindler, GSFC/HRS, November 1987

 Modified    :	Version 1, William Thompson, GSFC, 28 March 1994
			Incorporated into CDS library.
		Version 2, William Thompson, GSFC/CDS (ARC), 1 June 1994
			Added support for external (IEEE) representation.

 Version     :	Version 2, 1 June 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBSEARCH
 Purpose     :	
	Search a vector for specified values.  Subroutine of DBFIND.
 Explanation :	
	Search a vector for specified values
	This is a subroutine of dbfind and is not a standalone procedure

 Use         :	
	dbsearch, type, svals, values, good, FULLSTRING = fullstring

 Inputs      :	
	type - type of search (output from dbfparse)
	svals - search values (output from dbfparse)
	values - array of values to search

 Opt. Inputs :	None.

 Outputs     :	
	good - indices of good values
	!err is set to number of good values

 Opt. Outputs:	None.

 Keywords    :	
	FULLSTRING - By default, one has a match if a search string is 
		included in any part of a database value (substring match).   
		But if /FULLSTRING is set, then all characters in the database
		value must match the search string (excluding leading and 
		trailing blanks).    Both types of string searches are case
		insensitive.

 Calls       :	None.

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Database.

 Prev. Hist. :	
	D. Lindler  July,1987

 Written     :	D. Lindler, GSFC/HRS, July 1987

 Modified    :	Version 1, William Thompson, GSFC, 28 March 1994
			Incorporated into CDS library.
		Version 2, Wayne Landsman, GSFC/UIT (STX), 1 April 1994
			Added FULLSTRING keyword.

 Version     :	Version 2, 1 April 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBSORT()
 Purpose     :	
	Routine to sort list of entries in data base
 Explanation :	
	Routine to sort list of entries in data base
	The list is sorted such that each item is sorted into
	asscending order starting with the last item.

 Use         :	
	result = dbsort( list, items , [ REVERSE = ])

	EXAMPLE: Sort an astronomical catalog with RA as primary sort, and
	declination as secondary sort (used when RA values are equal)

	   IDL> NEWLIST = DBSORT( -1, 'RA,DEC' )

	If for some reason, one wanted the DEC sorted in descending order, but
	the RA in ascending order

	   IDL> NEWLIST = DBSORT( -1, 'RA,DEC', REV = [ 0, 1 ] )

 Inputs      :	
	list - list of entry numbers to sort
		-1 to sort all entries
	items - list of items to sort (up to 9 items)

 Opt. Inputs :	None.

 Outputs     :	
	result - numeric vector giving input list sorted by items

 Opt. Outputs:	None.

 Keywords    :	
	REVERSE - scalar or vector with the same number of elements as the
	  the number of items to sort.  If the corresponding element of REVERSE 
	  is non-zero then that item is sorted in descending rather than 
	  ascending order.

 Calls       :	BSORT, DB_ITEM, DBEXT, ZPARCHECK

 Common      :	
	DBCOM

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Database.

 Prev. Hist. :	
	VERSION 1  D. Lindler  Oct. 86
       Added REVERSE keyword   W. Landsman        August, 1991

 Written     :	D. Lindler, GSFC/HRS, October 1986

 Modified    :	Version 1, William Thompson, GSFC, 28 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 28 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBTITLE()
 Purpose     :	
	Function to create title line.  Subroutine of DBPRINT
 Explanation :	
	Function to create title line for routine dbprint.
	This is a subroutine of DBPRINT.
 Use         :	
	result = dbtitle( c, f )
 Inputs      :	
	c = string array of titles for each item
	f = field length of each item

 Opt. Inputs :	None.

 Outputs     :	
	header string returned as function value

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	
	This is a subroutine of DBPRINT.

 Side effects:	None.

 Category    :	Utilities, Database.

 Prev. Hist. :	
	version 1  D. Lindler  Sept 86

 Written     :	D. Lindler, GSFC/HRS, September 1986.

 Modified    :	Version 1, William Thompson, GSFC, 28 March 1994.
			Incorporated into CDS library

 Version     :	Version 1, 28 March 1994.
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBUPDATE
 Purpose     :	
	Update columns of data in a database  -- inverse of DBEXT
 Explanation :	
	Update columns of data in a database  -- inverse of DBEXT
	Database must be open for update before calling DBUPDATE

 Use         :	
	dbupdate, list, items, v1, [ v2, v3, v4......v14 ]

	EXAMPLES:  A database STAR contains RA and DEC in radians, convert to
		   degrees

	IDL> !PRIV=2 & dbopen,'STAR',1          ;Open database for update
	IDL> dbext,-1,'RA,DEC',ra,dec          ;Extract RA and DEC, all entries 
	IDL> ra = ra*!RADEG & dec=dec*!RADEG    ;Convert to degrees
	IDL> dbupdate,-1,'RA,DEC',ra,dec        ;Update database with new values

 Inputs      :	
	list - entries in database to be updated, scalar or vector
		If list=-1 then all entries will be updated
	items -standard list of items that will be updated.  
	v1,v2....v14 - vectors containing values for specified items.  The
		number of vectors supplied must equal the number of items
		specified.   The number of elements in each vector should be
		the same.

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	DB_INFO, DB_ITEM, DB_ITEM_INFO, DBINDEX, DBRD, DBWRT, DBXPUT

 Common      :	None.

 Restrictions:	
	It is quicker to update several items simultaneously rather than use
	repeated calls to DBUPDATE.  
 
	It is possible to update multiple valued items.  In this case, the
	input vector should be of dimension (NVAL,NLIST) where NVAL is the
	number of values per item, and NLIST is the number of entries to be
	updated.  This vector will be temporarily transposed by DBUPDATE but
	will be restored before DBUPDATE exits.

 Side effects:	None.

 Category    :	Utilities, Database.

 Prev. Hist. :	
	Written W. Landsman      STX       March, 1989
	Work for multiple valued items     May, 1991
	String arrays no longer need to be fixed length      December 1992
	Transpose multiple array items back on output        December 1993

 Written     :	W. Landsman, GSFC/UIT (STX), March 1989

 Modified    :	Version 1, William Thompson, GSFC, 28 March 1994
			Incorporated into CDS library.

 Version     :	Version 1, 28 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBVAL()
 Purpose     :	
	Extract value(s) of an item from a data base file entry.
 Explanation :	
	Procedure to extract value(s) of the specified item from
	a data base file entry.

 Use         :	
	result = dbval( entry, item )

	EXAMPLE:  Extract a flux vector from entry 28 of the database FARUV
	==> flux = dbval(28,'FLUX')

 Inputs      :	
	entry - byte array containing the entry, or a scalar entry number
	item - name (string) or number (integer) of the item

 Opt. Inputs :	None.

 Outputs     :	
	the value(s) will be returned as the function value

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	DB_ITEM, DBRD, DBXVAL

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Database.

 Prev. Hist. :	
   version 2  D. Lindler Nov, 1987	(new db format)

 Written     :	D. Lindler, GSFC/HRS, November 1987

 Modified    :	Version 1, William Thompson, GSFC, 28 March 1994.
			Incorporated into CDS library.

 Version     :	Version 1, 28 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBWRT
 Purpose     :	
	Procedure to update or add a new entry to a data base
 Explanation :	
	Procedure to update or add a new entry to a data base
 Use         :	
	dbwrt, entry, [ index, append ]
 Inputs      :	
	entry - entry record to be updated or added if first
		item (entry number=0)

 Opt. Inputs :	
	index - optional integer flag,  if set to non zero then index
		file is  updated. (default=0, do not update index file)
		(Updating the index file is time-consuming, and should
		normally be done after all changes have been made.
	append - optional integer flag, if set to non-zero the record
		is appended as a new entry, regardless of what the
		entry number in the record is.  The entry number will
		be reset to the next entry number in the file.

 Outputs     :	
	data base file is updated.                    
	If index is non-zero then the index file is updated.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	BSORT, DB_INFO, DB_ITEM, DB_ITEM_INFO, DBINDEX_BLK, DBXPUT,
		DBXVAL

 Common      :	DB_COM

 Restrictions:	
	!PRIV must be greater than 1 to execute

 Side effects:	None.

 Category    :	Utilities, Database.

 Prev. Hist. :	
	version 2  D. Lindler  Feb. 1988 (new db format)
	converted to IDL Version 2.  M. Greason, STX, June 1990.

 Written     :	D. Lindler, GSFC/HRS, February 1988

 Modified    :	Version 1, William Thompson, GSFC, 28 March 1994
			Incorporated into CDS library.
		Version 2, William Thompson, GSFC/CDS (ARC), 28 May 1994
			Added support for external (IEEE) representation.

 Version     :	Version 2, 28 May 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBXPUT
 Purpose     :	
	Routine to replace value of an item in a data base entry
 Explanation :	
	Routine to replace value of an item in a data base entry
 Use         :	
	dbxput, val, entry, idltype, sbyte, nbytes
 Inputs      :	
	val - value(s) to be placed into entry, string values might be
		truncated to fit number of allowed bytes in item
	entry - entry to be updated
	idltype - idl data type for item
	sbyte - starting byte in record
	nbytes - total number of bytes in value added

 Opt. Inputs :	None.

 Outputs     :	
	entry - (updated)

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	
	This routine assumes that the calling procedure or user
	knows what he or she is doing.  No validity checks are made

 Side effects:	None.

 Category    :	Utilities, Database.

 Prev. Hist. :	
	version 1, D. Lindler   Aug, 1986
	converted to IDL Version 2.  M. Greason, STX, June 1990.

 Written     :	D. Lindler, GSFC/HRS, August 1986

 Modified    :	Version 1, William Thompson, GSFC, 28 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 28 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	DBXVAL()
 Purpose     :	
	Quickly return a value of the specified item number
 Explanation :	
	Procedure to quickly return a value of the specified item number
	from the entry.

 Use         :	
	result = dbxval( entry, idltype, nvalues, sbyte, nbytes )

 Inputs      :	
	entry - entry from data base (bytarr)
	idltype - idl data type (obtained with db_item_info)
	nvalues - number of values to return (obtained with db_item)
	sbyte - starting byte in the entry (obtained with db_item)
	nbytes - number of bytes (needed only for string type)
			(obtained with db_item)

 Opt. Inputs :	None.

 Outputs     :	
	function value is value of the specified item in entry

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	
	To increase speed the routine assumes that entry and item are
	valid and that the data base is already opened using dbopen.

 Side effects:	None.

 Category    :	Utilities, Database.

 Prev. Hist. :	
	version 2  D. Lindler Nov. 1987  (for new db format)

 Written     :	D. Lindler, GSFC/HRS, November 1987.

 Modified    :	Version 1, William Thompson, GSFC, 28 March 1994.
			Incorporated into CDS library.

 Version     :	Version 1, 28 March 1994.
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       DD

 PURPOSE: 
       Display directory stack used by PD and PPD

 EXPLANATION:
       
 CALLING SEQUENCE: 
       DD

 INPUTS:
       None.

 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       None.

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS: 
       None.

 CALLS:
       CDD

 COMMON BLOCKS:
	DIR_STACK:  Contains the directory stack.
       CDD:        Common block used by CDD.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       
 PREVIOUS HISTORY:
       Written January 10, 1995, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 2, Liyun Wang, GSFC/ARC, February 3, 1995
          Renamed from SD to DD

 VERSION:
       Version 2, February 3, 1995
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : DEC2BIN
               
 Purpose     : Convert integer decimal number to binary representation.
               
 Explanation : The binary representation of a decimal number is calculated
               and can be displayed or returned or both or neither.
               
 Use         : IDL> dec2bin, decimal [, binary, /quiet]
    
 Inputs      : decimal - the number to convert
               
 Opt. Inputs : None
               
 Outputs     : See below
               
 Opt. Outputs: binary - the binary representation of the input.
               
 Keywords    : quiet - unless given the binary number is printed to the
                       terminal

 Calls       : None
               
 Restrictions: Input must be of byte, int or long type.
               
 Side effects: When the input variable DECIMAL is an array, then the output
		variable BINARY is also an array with the dimensions
		(32,N_ELEMENTS(DECIMAL)) no matter what the dimensions of
		DECIMAL are.
               
 Category    : Utils, Numerical
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 7-Oct-93
               
 Modified    : Version 1, C D Pike, RAL, 7-Oct-93
		Version 2, William Thompson, GSFC, 23 December 1994
			Modified to work with arrays.

 Version     : Version 2, 23 December 1994
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : DEC2HEX
               
 Purpose     : Convert a non-negative decimal integer to a hex string.
               
 Explanation : 
               
 Use         : IDL> dec2hex,decimal [,hex, nchar=nchar, /quiet, /upper]
    
 Inputs      : decimal - non-negative decimal integer, scalar.  All leading 
                         blanks are removed.
               
 Opt. Inputs : None
               
 Outputs     : See below
               
 Opt. Outputs: hex - the hexadecimal representation of the number.
               
 Keywords    : quiet - if not present, the hex form will be output to the
                       terminal.
               nchar - number of characters in the output hexadecimal string.
                       If not supplied, then the hex string will contain no 
                       leading zeros.

               upper - converts hex letters to uppercase for output

 Calls       : None
               
 Restrictions: Input can only be non-negative integer number.
               
 Side effects: None
               
 Category    : Util, numerical
               
 Prev. Hist. : Written by W. Landsman, November, 1990 

 Written     : CDS version by C D Pike, RAL, 7-Oct-93
               
 Modified    : Added /upper keyword, CDP, 20-Dec-1993
               Trap negatives, CDP, 19-May-94

 Version     : Version 3, 19-May-94
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : DEF_UTPLOT
               
 Purpose     : Setup x-axis for time plot.
               
 Explanation : Adjusts relevant x-axis parameters to plot data on a labelled
               time axis.
               
 Use         : Usually only from within UTPLOT.
    
 Inputs      : None
               
 Opt. Inputs : None
               
 Outputs     : Adjusts current copies of global plotting variables
               
 Opt. Outputs: None
               
 Keywords    : xrange - array of seconds of time, the limits of which are
                        taken to define the plotting range.

               xstyle - if = 1 then fixes range to exactly that requested.

 Calls       :

 Common      : None
               
 Restrictions: None
               
 Side effects: Sets global variables.
               
 Category    : Util, plotting
               
 Prev. Hist. : Based entirely on SET_UTPLOT by Schwartz, Morrison

 Written     : CDS version by C D Pike, RAL, 20-Apr-94
               
 Modified    : 

 Version     : Version 1,  20-Apr-94
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : DELETE_FILE()
               
 Purpose     : Delete a named file.
               
 Explanation : Spawn the OS appropriate delete command.
               
 Use         : IDL> status = delete_file(filename [,report=report])
    
 Inputs      : filename   - file to be deleted, must include path
               
 Opt. Inputs : None
               
 Outputs     : Function value = 1 for success = 0 for failure
               
 Opt. Outputs: Report   -  the os response to the delete command
               
 Keywords    : NOCONFIRM  - suppress any delete confirmation requests

 Calls       : None
               
 Restrictions: VMS and Unix only
               
 Side effects: None
               
 Category    : Util, Operating_system
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 13-May-93
               
 Modified    : Added NOCONFIRM keyword.  CDP, 26-Apr-95

 Version     : Version 2, 26-Apr-95
;-
;+
 Project     :	SOHO - CDS

 Name        :	DELVARX

 Purpose     : Delete variables for memory management (can call from
               routines) 

 Use         : DELVARX,  a [,b,c,d,e,f,g,h,i,j]
                                 	;deletes named variables
					;like idl delvar, but may be used
					;from any calling level;
 Explanation :

 Inputs      : p0, p1...p9 - variables to delete

 Opt. Inputs : None.

 Outputs     : None.

 Opt. Outputs: None.

 Keywords    : None.

 Calls       : None.

 Common      : None.

 Restrictions: Can't use recursively due to EXECUTE function, TEMPORARY 
		function not available in idl versions < 2.2

 Side effects: None.

 Method      : Uses EXECUTE and TEMPORARY function   

 Category    :

 Prev. Hist. :
      slf,  8-mar-1993			; bug fix
      slf, 25-mar-1993			; made it work for non-scalers!

 Written     :	 slf, 25-feb-1993

 Modified    :

 Version     :
;-
;+
 Project     : SOHO - CDS

 Name        : 
	DETABIFY()
 Purpose     : 
	Converts tabs to spaces in character strings.
 Explanation : 
	Replaces tabs in character strings with the appropriate number of
	spaces.  The number of space characters inserted is calculated to space
	out to the next effective tab stop, each of which is eight characters
	apart.
 Use         : 
	Result = DETABIFY(CHAR_STR)
 Inputs      : 
	CHAR_STR = Character string variable (or array) to remove tabs from.
 Opt. Inputs : 
	None.
 Outputs     : 
	Result of function is CHAR_STR with tabs replaced by spaces.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	CHAR_STR must be a character string variable.
 Side effects: 
	None.
 Category    : 
	Utilities, Strings.
 Prev. Hist. : 
	William Thompson, Feb. 1992.
 Written     : 
	William Thompson, GSFC, February 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 April 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	DEVICELIB
 Purpose     : 
	Definitions needed for the SERTS graphics device library.
 Explanation : 
	Defines variables and common blocks needed for the SERTS graphics
	device library.  Adds system variables !BCOLOR and !ASPECT.
 Use         : 
	DEVICELIB
 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	This routine should be called only once, preferably in the startup
	procedure.
 Side effects: 
	System variables may be changed to their default values.
 Category    : 
	Utilities,
 Prev. Hist. : 
	William Thompson, 10 November 1992.
 Written     : 
	William Thompson, GSFC, 10 November 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 23 June 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 23 June 1993.
;-
;+
 PROJECT:
       SOHO - SUMER

 NAME:
       DHELP

 PURPOSE: 
       Diagnostic HELP (activated only when DEBUG reaches DLEVEL)

 EXPLANATION:
       This routine acts similarly to the HELP command, except that
       it is activated only when the environment variable DEBUG is
       set to be equal to or greater than the debugging level set by
       DLEVEL (default to 1).  It is useful for debugging.  
       
 CALLING SEQUENCE: 
       DHELP, [,/structure] v1 [, v2, ...] [,dlevel=dlevel]

 INPUTS:
       V1, V2, ... - List of variables to be passed to the HELP command

 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       All input variables are printed out on the screen

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS: 
       STRUCTURE - Set this keyword to show strcuture
       DLEVEL    - An integer indicating the debugging level; defaults to 1

 CALLS:
       None.

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       Can be activated only when the environment variable DEBUG (indicating 
          the debugging level) is set to an integer which is equal to
          or greater than DLEVEL
       Can print out a maximum of 20 variables (depending on how many
          is listed in the code)

 SIDE EFFECTS:
       None.

 CATEGORY:
       
 PREVIOUS HISTORY:
       Written March 20, 1995, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 1, Liyun Wang, GSFC/ARC, March 20, 1995

 VERSION:
       Version 1, March 20, 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	DISMOUNT

 Purpose     :	Emulates the VMS DISMOUNT function in Unix.

 Explanation :	Emulates the VMS DISMOUNT function in the Unix environment.
		Although this is not a standard IDL function, it is available
		as a separate LINKIMAGE routine for VMS.

		The main purpose of this procedure is to close the file unit
		open on the tape device, and optionally to unload the tape.
		Errors can result if the tape is unloaded manually rather than
		using this routine.

		**Unix only**

 Use         :	DISMOUNT, UNIT

 Inputs      :	UNIT = Tape unit number.  Tape drives are selected via the UNIX
		       environment variables "MT1", "MT2", etc.  The desired
		       tape drive is thus specified by numbers, as in VMS.
		       Must be from 0 to 9.

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	NOUNLOAD = If set, then the tape is simply rewound, not taken
			   off line.

 Calls       :	CHECK_TAPE_DRV

 Common      :	CHCK_TAPE_DRVS contains array TAPE_LUN, containing logical unit
		numbers for each tape device, and TAPE_OPEN, which tells
		whether each device is open or not.

 Restrictions:	The environment variable "MTn", where n corresponds to the
		variable UNIT, must be defined.  E.g.,

			setenv MT0 /dev/nrst0

		Requires IDL v3.1 or later.

 Side effects:	The device file is opened.

 Category    :	Utilities, I/O, Tape.

 Prev. Hist. :	None.

 Written     :	William Thompson, GSFC, 21 December 1993.

 Modified    :	Version 1, William Thompson, GSFC, 21 December 1993.

 Version     :	Version 1, 21 December 1993.
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:	
       DMY2YMD()

 PURPOSE:
       To convert date string DD-MM-YY format to YY/MM/DD format.
 EXPLANATION:
       
 CALLING SEQUENCE: 
       Result = DMY2YMD(date)

 INPUTS:
       DATE -- A string scalar in DD-MM-YY or DD/MM/YY format.

 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       Result -- A string scalar in 19YY/MM/DD format.

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS: 
       None.

 CALLS:
       None.

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       
 PREVIOUS HISTORY:
       Written September 26, 1994, by Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       
 VERSION:
       Version 1, September 26, 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	DOC
 Purpose     : 
	Obsolete -- use XDOC instead
 Explanation : 
	This routine exists merely to maintain backwards compatibility.  The
	routine XDOC is now the preferred name to use.  It was changed because
	it was found that DOC is commonly used as an environment variable or
	logical name, and this would cause IDL to not be able to find the DOC
	routine.
 Use         : 
	DOC		;For prompting.
	DOC, NAME	;Extract documentation for procedure NAME.
 Inputs      : 
	None required.
 Opt. Inputs : 
	NAME = String containing the name of the procedure.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
       RESET	= If set, then clear out procedures from memory.  Only useful
		  when using a display that supports widgets.
 Calls       : 
	XDOC
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	None.
 Category    : 
	Documentation, Online_help.
 Prev. Hist. : 
       W. Thompson and D. Zarro (ARC/GSFC)
 Written     : 
	William Thompson, GSFC, 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 23 April 1993.
		Changed test for widgets and incorporated into CDS library.
	Version 2, William Thompson, GSFC, 24 June 1993.
		Added ON_ERROR statement to correct problem on VMS machines.
       Version 3, Dominic Zarro, GSFC, 1 August 1994.
               Changed name from DOC to XDOC and added keyword-inheritance
               to inherit keywords from SCANPATH.
 Version     : 
	Version 3, 1 August 1994.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	DOC_MENU
 Purpose     : 
	Extract documentation template of one or more procedures.
 Explanation : 
	If NAME is not passed, then this procedure will first display a list of
	the directories in !PATH, and ask for the user to select one.  Then a
	list of procedures in the selected directory are displayed, and the
	user is again asked to select one of them.  Finally, the routine
	DOC_LIB_xxx, where xxx represents the operating system, is called to
	display the documentation in the file between the lines containing the
	characters ";+" and ";-".

	VMS text libraries can also be searched by this routine.

	If a file named "aaareadme.txt" is also found in the selected
	directory, then this can be selected as the topic "*INFO*".

 Use         : 
	DOC_MENU	;For prompting.
	DOC_MENU, NAME	;Extract documentation for procedure NAME using
			the current !PATH.
 Inputs      : 
	None required.
 Opt. Inputs : 
	NAME	= String containing the name of the procedure.  Under Unix,
		  NAME may be "*" for all modules.

	If NAME is not passed, then DOC_MENU will go into an interactive
	mode to prompt the user for the directory or library to search, and
	then for the routine to get information on.
	
 Outputs     : 
	Documentation is sent to the standard output unless /PRINT
	is specified.
 Opt. Outputs: 
	None.
 Keywords    : 
	PRINT = Keyword parameter which, if set to 1, sends output
		of DOC_MENU to the default printer. Under Unix, if PRINT
		is a string, it is a shell command used for output with
		its standard input set to the documentation
		(i.e. PRINT="cat > junk")

 Unix KEYWORDS
	DIRECTORY = directory to search.  If omitted, use  current directory
		and !PATH.
	MULTI = flag to allow printing of more than one file if the module
		exists in more than one directory in the path + the current
		directory.

 VMS KEYWORDS
	FILE - If present and non-zero, the output is left in the file
		userlib.doc, in the current directory.
	PATH = optional directory/library search path.  Same format
		and semantics as !PATH.  If omitted, !PATH is used.

 Calls       : 
	PATH_EXPAND, GETTOK, LOC_FILE, HAVE_WINDOWS
 Common      : 
	None.
 Restrictions: 
	The DIRECTORY and MULTI keywords are ignored under VMS. The
	FILE and PATH keywords are ignored under Unix.
 Side effects: 
	Output is produced on terminal or printer.
 Category    : 
	Documentation, Online_help.
 Prev. Hist. : 
	Written, DMS, Sept, 1982.
	Added library param, Jul 1987.
	Unix version, DMS, Feb, 1988.
	New VMS version, DMS, Dec. 1989
	Wrapper procedure to call the correct version
		under Unix and VMS, AB, Jan 1990
       Added support for DOS, SNG, Dec, 1990
	Added interactive capabilities, William Thompson, July 1991.
	Renamed to DOC_MENU, William Thompson, 1992.
 Written     : 
	D. Stern, RSI, September 1982.
 Modified    : 
	Version 1, William Thompson, GSFC, 23 April 1993.
		Changed test for windows and incorporated into CDS library.
	Version 2, William Thompson, GSFC, 27 April 1993.
		Restored support for versions of IDL previous to 2.4.0.
	Version 3, William Thompson, GSFC, 7 May 1993.
		Added IDL for Windows compatibility.
	Version 4, William Thompson, GSFC, 24 September 1993.
		Changed EXPAND_PATH to PATH_EXPAND
 Version     : 
	Version 3, 24 September 1993.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : DOY2UTC()
               
 Purpose     : Converts day of year to internal CDS time format.
               
 Explanation : Takes day-of-year value and year (default=current) and
               converts to the internal CDS UTC time structure.
               
 Use         : IDL> utc = doy2utc(doy [,year])
    
 Inputs      : doy - integer day-of-year value (can be an array)
               
 Opt. Inputs : year - the applicable year (default is current year)
                      If this is an array it must have the same dimensions
                      as doy.
               
 Outputs     : Function returns a CDS UTC structure.
               
 Opt. Outputs: None
               
 Keywords    :	ERRMSG       =	If defined and passed, then any error messages 
				will be returned to the user in this parameter 
				rather than being handled by the IDL MESSAGE 
				utility.  If no errors are encountered, then a 
				null string is returned.  In order to use this 
				feature, the string ERRMSG must be defined 
				first, e.g.,

					ERRMSG = ''
					RESULT = DOY2UTC( DOY, ERRMSG=ERRMSG )
					IF ERRMSG NE '' THEN ...

 Calls       :	None

 Common      : None
               
 Restrictions: None
               
 Side effects: If an error is encountered and the ERRMSG keyword has been 
		set, the result returned is an integer -1.  If ERRMSG has
		not been set and an error occurs, DOY2UTC returns with a
		null result.
               
 Category    : Util, time
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 5-Jan-95
               
 Modified    :	Version 1, C.D. Pike, RAL, 5 January 1995
		Version 2, C.D. Pike, RAL, 9 January 1995
			Fix bug if input is single value array.
		Version 3, Donald G. Luttermoser, GSFC/ARC, 1 February 1995
			Added the keyword ERRMSG.  Set ONERROR flag to 2.
			Corrected bug in YEAR calculation.  Note that this
			routine can handle both scalar and vector input.
               Version 4, Changed handling of input year array, as 
                          suggested by S Paswaters.  CDP, 10-Mar-95

 Version     : Version 4, 10-Mar-95
;-
;+
 PROJECT:
       SOHO - CDS/SUMER

 NAME:
       DPRINT

 PURPOSE: 
       Diagnostic PRINT (activated only when DEBUG reaches DLEVEL)

 EXPLANATION:
       This routine acts similarly to the PRINT command, except that
       it is activated only when the environment variable DEBUG is
       set to be equal to or greater than the debugging level set by
       DLEVEL (default to 1).  It is useful for debugging.  

 CALLING SEQUENCE: 
       DPRINT, v1 [,v2 ...] [,format=format] [,dlevel=dlevel]

 INPUTS:
       V1, V2, ... - List of variables to be printed out.

 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       All input variables are printed out on the screen (or the
       given unit)

 OPTIONAL OUTPUTS:
       FORMAT - Output format to be used
       UNIT   - Output unit through which the variables are printed. If 
                missing, the standard output (i.e., your terminal) is used.

 KEYWORD PARAMETERS: 
       DLEVEL - An integer indicating the debugging level; defaults to 1

 CALLS:
       DATATYPE

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       Can be activated only when the environment variable DEBUG (indicating 
          the debugging level) is set to an integer which is equal to
          or greater than DLEVEL
       Can print out a maximum of 20 variables (depending on how many
          is listed in the code)

 SIDE EFFECTS:
       None.

 CATEGORY:
       Utility, miscellaneous

 PREVIOUS HISTORY:
       Written March 18, 1995, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 1, Liyun Wang, GSFC/ARC, March 18, 1995

 VERSION:
       Version 1, March 18, 1995
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : DSP_STRUCT
               
 Purpose     : Display contents of a structure as a pulldown menu.
               
 Explanation : A pulldown menu is created representing all the
		levels of "introspection" of the structure variable.

		If a tag in a structure is an array, it's "written out"
		if it's less than SIZE, which by default is set to 30.

		It may be used as a standalone widget or as part of a
		menu. In the latter case, it generates a pulldown button
		that unfolds the structure.
               
 Use         : DSP_STRUCT, DATA_STRUCTURE
    
 Inputs      : DATA_STRUCTURE: Any IDL structure.
               
 Opt. Inputs : None.
               
 Outputs     : None.
               
 Opt. Outputs: None.
               
 Keywords    : TITLE: The title of the menu/button.

		SIZE: Controls the maximum size of arrays to be expanded

		ON_BASE: The base to place the button on if it's supposed
			to be a subpart of another widget hierarchy.
			
		ALONE: Set to make it be a stand-alone widget application.

 Calls       : DATATYPE(), TRIM()

 Common      : None.
               
 Restrictions: None.
               
 Side effects: 
               
 Category    : CDS, QL, DISPLAY, UTILITY
               
 Prev. Hist. : Requested simultaneously by the Goddard & Rutherford
		people, independent of each other.

 Written     : SVHH, 15 January 1994
               
 Modified    : SVHH, Documentation added March 1994, stand-alone mode added.
		SVHH, 3-May-1995, Version 1.1
			Made arrays unfold the first <SIZE> number
			of elements.
 Version     : 1.1
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       ELLIPSE

 PURPOSE: 
       Return function value and its derivatives of an ellipse

 EXPLANATION:
       
 CALLING SEQUENCE: 
       ELLIPSE, x, a, y, dyda

 INPUTS:
       X -- A two element vector for position of the point on the ellipse
       A -- A four-element vector representing central position (x0, y0) and
            semi-major and -minor axes (a0, b0) of the ellipse
       
 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       Y    -- Function value of the ellipse equation.
       DYDA -- Derivatives of the function

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS: 
       None.

 CALLS:
       None.

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       Misc, user-supplied function
       
 PREVIOUS HISTORY:
       Written November 22, 1994, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       
 VERSION:
       Version 1, November 22, 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	ENABLEFLAG
 Purpose     : 
	Reenable a previously set but disabled image display flag.
 Explanation : 
	Reenables one of the previously set flag fields in the !IMAGE
	structure.  Only use this routine if the value has already been set by
	SETFLAG, but the value was disabled with UNSETFLAG.

	Keywords that take only true/false values, such as "NOBOX", are
	controlled solely by the SETFLAG and UNSETFLAG routines.

 Use         : 
	ENABLEFLAG, /Keyword, ...

	Use only the /KEYWORD form for the keywords.  Do not use KEYWORD=VALUE.

 Inputs      : 
	None.  Only keyword parameters are used by this routine.
 Opt. Inputs : 
	Noen.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	MISSING	 = Value flagging missing pixels.  These points are scaled to
		   zero.  Ignored if NOSCALE is set.
	SIZE	 = If passed and positive, then used to determine the scale of
		   the image.
	XALIGN	 = Alignment within the image display area.  Ranges between 0
		   (left) to 1 (right).  Default is 0.5 (centered).
	YALIGN	 = Alignment within the image display area.  Ranges between 0
		   (bottom) to 1 (top).  Default is 0.5 (centered).
	RELATIVE = Size of area to be used for displaying the image, relative
		   to the total size available.  Must be between 0 and 1.
		   Default is 1.  Passing SIZE explicitly will override this
		   keyword.
	MAX	 = The maximum value to be considered in scaling images, as
		   used by BYTSCL.
	MIN	 = The minimum value to be considered in scaling images, as
		   used by BYTSCL.
	VELOCITY = If set then the MIN and MAX values pertain to velocity
		   images rather than intensity images.  (An alternate way to
		   do the same thing is to use the keywords VMIN and VMAX.)
	TOP	 = The maximum value of the scaled image array, as used by
		   BYTSCL.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, June 1991.
	W.T.T., Nov. 1991, added keywords MIN, MAX, VMIN, VMAX, and TOP.
	W.T.T., May 1992, added VELOCITY keyword, and made VMIN, VMAX alternate
			  format.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
 Written     : 
	William Thompson, GSFC, June 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 13 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 13 May 1993.
;-
;+
 Project     :	SDAC

 Name        : EPLOT

 Purpose     : Overplot x and y error bars on a previously drawn plot.

 Use         : EPLOT,X,Y, EX=EX,EY=EY

 Inputs      : X,Y = vectors values 

 Opt. Inputs : None.

 Outputs     : None.

 Opt. Outputs: None.

 Keywords    :
            	EX = error in x 
               EY = error in y
               [2-d array where 1st column is + error, 2nd column is - error]
               /UPPER = plot positive errors only
               /LOWER = plot negative errors only
               COLOR = color for error bars
               NOCLIP = set to not clip off at plot boundaries
 Explanation : 
           	Error bars are drawn for each element.
               If input errors are 1-d, then they are concatanated to 2-d 

 Calls       : None.

 Common      : None.

 Restrictions: 
              Initial call to plot must be made to establish scaling

 Side effects: None.

 Category    : Graphics

 Prev. Hist. : 
              Jan'91, DMZ, (ARC) -- written
              Sep'93, DMZ  -- added Yohkoh index option for x input
              Oct'93, DMZ  -- added option for entering single vectors

 Version:     1
;-
;+
 Project     :	SDAC

 Name        :	EXIST

 Purpose     :	To See if variable Exists

 Explanation :	So obvious, that explaining it will take more
               lines than the code.

 Use         :	A=EXIST(VAR)

 Inputs      :	VAR = variable name

 Opt. Inputs : None.

 Outputs     :	1/0 if variable exists or not

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Useful stuff

 Prev. Hist. :	None.

 Written     :	Dominic Zarro (ARC)

 Version     :	Version 1.0, 18 September 1993
;-
;+
 Project     : SOHO - CDS

 Name        : 
	EXPAND_TV
 Purpose     : 
	Expands and displays an image.
 Explanation : 
	This procedure expands an image to the dimensions MX, MY and displays
	it at position IX, IY on the image display screen.  Called from EXPTV
	and other routines.

	The scaling parameters MX,MY and IX,IY are stored using STORE_TV_SCALE
	for later retrieval using GET_TV_SCALE.

 Use         : 
	EXPAND_TV, ARRAY, MX, MY, IX, IY
 Inputs      : 
	ARRAY	= Image to be displayed.
	MX, MY	= Dimensions to expand image to.
	IX, IY	= Position of lower left-hand corner of image.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	SMOOTH	 = If set, then the image is expanded with bilinear
		   interpolation.
	NOBOX	 = If set, then the box is not drawn around the image.
	NOSCALE  = If set, then the command TV is used instead of TVSCL to
		   display the image.
	MISSING	 = Value flagging missing pixels.  These points are scaled to
		   zero.  Ignored if NOSCALE is set.
	DISABLE  = If set, then TVSELECT not used.
	COLOR	 = Color used for drawing the box around the image.
	MAX	 = The maximum value of ARRAY to be considered in scaling the
		   image, as used by BYTSCL.  The default is the maximum value
		   of ARRAY.
	MIN	 = The minimum value of ARRAY to be considered in scaling the
		   image, as used by BYTSCL.  The default is the minimum value
		   of ARRAY.
	TOP	 = The maximum value of the scaled image array, as used by
		   BYTSCL.  The default is !D.N_COLORS-1.
	VELOCITY = If set, then the image is scaled using FORM_VEL as a
		   velocity image.  Can be used in conjunction with COMBINED
		   keyword.  Ignored if NOSCALE is set.
	COMBINED = Signals that the image is to be displayed in one of two
		   combined color tables.  Can be used by itself, or in
		   conjunction with the VELOCITY or LOWER keywords.
	LOWER	 = If set, then the image is placed in the lower part of the
		   color table, rather than the upper.  Used in conjunction
		   with COMBINED keyword.
	NOSTORE	 = If set, then information about the position of the plot is
		   not stored in the TV_SCALE common block.  This is for
		   special purpose images, such as generated by COLOR_BAR or
		   PLOT_IMAGE.
	ORIGIN	 = Two-element array containing the coordinate value in
		   physical units of the center of the first pixel in the
		   image.  If not passed, then [0,0] is assumed.  Ignored if
		   NOSTORE is set.
	SCALE	 = Pixel scale in physical units.  Can have either one or two
		   elements.  If not passed, then 1 is assumed in both
		   directions.  Ignored if NOSTORE is set.
	DATA	 = If set, then immediately activate the data coordinates for
		   the displayed image.  Ignored if NOSTORE is set.
 Calls       : 
	BSCALE, CONGRDI, GET_IM_KEYWORD, IM_KEYWORD_SET, STORE_TV_SCALE, TRIM,
	TVSELECT, TVUNSELECT
 Common      : 
	None.
 Restrictions: 
	ARRAY must be two-dimensional.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	Messages about the size and position of the displayed image are printed
	to the terminal screen.  This can be turned off by setting !QUIET to 1.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., Oct. 1987.
	W.T.T., Jan. 1990, added BADPIXEL keyword.
	W.T.T., Feb. 1991, modified to use TVSELECT, TVUNSELECT.
	W.T.T., Nov. 1991, added MAX, MIN, and TOP keywords.
	W.T.T., Nov. 1991, added INTENSITY, VELOCITY and COMBINED keywords.
	W.T.T., Feb. 1992, added LOWER keyword.
	W.T.T., May  1992, modified to use BSCALE.
	William Thompson, May 1992, modified to call STORE_TV_SCALE.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
	William Thompson, September 1992, use COMBINED keyword in place of
					  INTENSITY.  Also, sped up by using
					  REBIN when possible.
 Written     : 
	William Thompson, GSFC, October 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 13 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 2 September 1993.
		Added ORIGIN, SCALE and DATA keywords.
 Version     : 
	Version 2, 2 September 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	EXPTV
 Purpose     : 
	Uses SCALE_TV and EXPAND_TV to display an image.
 Explanation : 
	SCALE_TV is called to scale the image, and EXPAND_TV is called to 
	display the image.  As much of the image display screen as possible is 
	filled.
 Use         : 
	EXPTV, ARRAY
 Inputs      : 
	ARRAY	 = Image to be displayed.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	NOSQUARE = If passed, then pixels are not forced to be square.
	SMOOTH	 = If passed, then image is expanded with interpolation.
	NOBOX	 = If passed, then box is not drawn, and no space is reserved
		   for a border around the image.
	NOSCALE	 = If passed, then the command TV is used instead of TVSCL to
		   display the image.
	MISSING	 = Value flagging missing pixels.  These points are scaled to
		   zero.  Ignored if NOSCALE is set.
	SIZE	 = If passed and positive, then used to determine the scale of
		   the image.  Returned as the value of the image scale.  May
		   not be compatible with /NOSQUARE.
	DISABLE  = If set, then TVSELECT not used.
	NOEXACT  = If set, then exact scaling is not imposed.  Otherwise, the
		   image scale will be either an integer, or one over an
		   integer.  Ignored if SIZE is passed with a positive value.
	XALIGN	 = Alignment within the image display area.  Ranges between 0
		   (left) to 1 (right).  Default is 0.5 (centered).
	YALIGN	 = Alignment within the image display area.  Ranges between 0
		   (bottom) to 1 (top).  Default is 0.5 (centered).
	RELATIVE = Size of area to be used for displaying the image, relative
		   to the total size available.  Must be between 0 and 1.
		   Default is 1.  Passing SIZE explicitly will override this
		   keyword.
	COLOR	 = Color used for drawing the box around the image.
	MAX	 = The maximum value of ARRAY to be considered in scaling the
		   image, as used by BYTSCL.  The default is the maximum value
		   of ARRAY.
	MIN	 = The minimum value of ARRAY to be considered in scaling the
		   image, as used by BYTSCL.  The default is the minimum value
		   of ARRAY.
	TOP	 = The maximum value of the scaled image array, as used by
		   BYTSCL.  The default is !D.N_COLORS-1.
	VELOCITY = If set, then the image is scaled using FORM_VEL as a
		   velocity image.  Can be used in conjunction with COMBINED
		   keyword.  Ignored if NOSCALE is set.
	COMBINED = Signals that the image is to be displayed in one of two
		   combined color tables.  Can be used by itself, or in
		   conjunction with the VELOCITY or LOWER keywords.
	LOWER	 = If set, then the image is placed in the lower part of the
		   color table, rather than the upper.  Used in conjunction
		   with COMBINED keyword.
	NORESET	 = If set, then SETIMAGE is not called, and the screen is not
		   erased.
	ORIGIN	 = Two-element array containing the coordinate value in
		   physical units of the center of the first pixel in the
		   image.  If not passed, then [0,0] is assumed.
	SCALE	 = Pixel scale in physical units.  Can have either one or two
		   elements.  If not passed, then 1 is assumed in both
		   directions.
	DATA	 = If set, then immediately activate the data coordinates for
		   the displayed image.
 Calls       : 
	EXPAND_TV, GET_IM_KEYWORD, SCALE_TV, SETIMAGE, TVERASE
 Common      : 
	None.
 Restrictions: 
	ARRAY must be two-dimensional.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	The image display window is erased before the image is displayed, and
	SETIMAGE is called to reset to the default, unless NORESET is set.

	Messages about the size and position of the displayed image are printed
	to the terminal screen.  This can be turned off by setting !QUIET to 1.

 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., Oct. 1987.
	W.T.T., Jan. 1991, added BADPIXEL keyword.
	W.T.T., Feb. 1991, modified to use common block IMAGE_AREA.
	W.T.T., Feb. 1991, added SIZE keyword.
	W.T.T., Nov. 1991, added MAX, MIN, and TOP keywords.
	W.T.T., Nov. 1991, added INTENSITY, VELOCITY and COMBINED keywords.
	W.T.T., Feb. 1992, added LOWER keyword.
	W.T.T., Feb. 1992, added call to SETIMAGE, removed common block, and
			   added keyword NORESET.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
	William Thompson, September 1992, use COMBINED keyword in place of
					  INTENSITY.
 Written     : 
	William Thompson, GSFC, October 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 13 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 2 September 1993.
		Added ORIGIN, SCALE and DATA keywords.
 Version     : 
	Version 2, 2 September 1993.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : EXT_RANGE()
               
 Purpose     : Calculate extended range for plotting variables.
               
 Explanation : In order to keep plotted values away from the axes of a plot
               this function returns values of the axis limits to be used.
               If max = min of data then range is set to [data-px%,data+px%]
               if min=max=0 then [-1,1] is returned.
               
 Use         : IDL> ax_lim = ext_range(x, px [,y, py, z, pz])
    
 Inputs      : x  - 2-data vector containing data min,max values
               px - percentage by which to extend range of variable
               
 Opt. Inputs : y(z)  - same as x
               py(z) - same as px
               
 Outputs     : Function returns (2 x N) vector where N is the number of
               input variables, giving the extended min,max axis values.
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : None

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, display
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 23-Jun-94
               
 Modified    : 

 Version     : Version 1, 23-Jun-94
;-
;+
 Project     :	SOHO - CDS

 Name        :	FASTFIT

 Purpose     :	Least-squares fit of linear function without error analysis

 Explanation :	Fits a linear function to a series of data points via a
		least-squares technique.

		This routine differs from FITTER in that no error analysis is
		performed, and the correlation matrix is not calculated.

 Use         :	FASTFIT, X, Y, FDER, PARAM

 Inputs      :	X	= Positions.
		Y	= Data values.
		FDER	= Array of partial derivatives of fitted function.
			  This array will have the dimensions: FDER(
			  N_ELEMENTS(X) , N_ELEMENTS(PARAM) )

 Opt. Inputs :	None.

 Outputs     :	PARAM	= Returned parameters of fit.

 Opt. Outputs:	None.

 Keywords :	POISSON	= If set, then a Poisson error distribution is assumed,
			  and the weights are set accordingly to 1/Y.
		ERROR	= Array of errors.  The weights are set accordingly to
			  1/ERROR^2.  Overrides POISSON.
		WEIGHT	= Array of weights to use in fitting.  Overrides
			  POISSON and ERROR.

 Calls       :	None.

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Curve_Fitting

 Prev. Hist. :	William Thompson, June 1991, modified to use keywords.

 Written     :	William Thompson, GSFC, June 1991

 Modified    :	Version 1, William Thompson, GSFC, 9 January 1995
			Incorporated into CDS library

 Version     :	Version 1, 9 January 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	FDECOMP
 Purpose     :	
	Decompose file name into components.
 Explanation :	
	Routine to decompose file name into disk (VMS) + directory +
       name + qualifier + version (VMS).    

	On a Vax the filenames "MOTD" and "MOTD." are distinguished by the fact
	that qual = '' for the former and qual = ' ' for the latter.

 Use         :	
	fdecomp, filename, disk, dir, name, qual, version

 Inputs      :	
	filename - string file name, scalar

 Opt. Inputs :	None.

 Outputs     :	
	All the output parameters are scalar strings
	disk - disk name, always '' on a Unix machine
	dir - directory name
	name - file name
	qual - qualifier, set equal to the characters beyond the last "."
	version - version number, always '' on a Unix machine

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	
	GETTOK

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Operating_System

 Prev. Hist. :	
	version 1  D. Lindler  Oct 1986
	converted to SUN IDL.  M. Greason, STX, 30 July 1990.
	W. Landsman     STX, August, 1991

 Written     :	D. Lindler, GSFC/HRS, October 1986

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     : SOHO-CDS

 Name        : FILE_ACC

 Purpose     : Determine existence, type and access of file on UNIX system.

 Explanation :
	This routine is intended to supplement the IDL findfile function.
	For a given unix path name, e.g '/disk2/bowen/adas/file', this
	routine returns certain information.
		1.	Whether the path exists.
		2.	Whether the user has read permission.
		3.	Whether the user has write permission.
		4.	Whether the user has execute permission.
		5.	What the file type is i.e file, directory etc.
	The routine works by spawning various UNIX commands and
	interpreting the information returned.  A directory listing
	command is used to get basic file information; on ULTRIX 'ls -ld',
	which establishes whether the file exists and also returns the
	file type, access and ownership information.  The 'd' parameter
	ensures that directory information is listed rather than the
	contents of a directory.
	
	Before the access information can be interpreted the current user
	is found by spawning the 'whoami' UNIX command.  If the user is not
	the owner of the file the UNIX 'groups' command is used to determine
	whether or not the owner and the user are in the same group.
	Using all of this information the correct read, write and execute
	permissions are derived from the owner, group or world access 
	codes given in the directory listing information.

	This processing is performed in a group of four routines which
	are all incorporated in the file_acc.pro file.

	Note: the syntax of the UNIX commands and the output which is
	returned may vary from one operating system to another.  The
	operating system is checked and specific code executed for that
	system.  Currently the routine has specific code for;
	
	****	File listing command:    ****
	ULTRIX:	Command 'ls -ld /.../file.dat'
		Output  '-rw-r--r--  1 bowen        5688 May 27 17:15 file.dat'

	OSF:	(Same command as ULTRIX but different output, difference
		doesn't matter though, only first three fields used.)
		Output  '-rw-r--r--  1 bowen  user  5688 May 27 17:15 file.dat'

	SUNOS:	(Same command and output as ULTRIX)

	All others: (same as ULTRIX code)


	****	Groups identification:    ****
	ULTRIX:	Command 'groups root'
		Output	'system daemon tty'

	OSF:	(Same command and output as ULTRIX)

	SUNOS:	(Same command but, importantly, different output)
		Command 'groups root'
		Output	'root: system daemon tty'

	All others: (Same as ULTRIX code)


	****	User identification:	****
	ULTRIX, OSF and SUNOS: Command 'whoami'
			       Output  'name'

 Use         :
	Example of file_acc usage;

		file = '/disk2/fred/data'
		file_acc, file, exist, read, write, execute, filetype
		if exist eq 1 then begin
		  print,'Permissions for file ',file,' are;'
		  if read eq 1 print,'read'
		  if write eq 1 print,'write'
		  if execute eq 1 print,'execute'
		  print,'The file type is ',filetype
		end else begin
		  print,file,' does not exist'
		end

 Inputs      :
	FILE	- The UNIX system name of the file. For example
		  'file.dat' refers to the current directory and
		  '/disk2/fred/data' is a full path name.

 Opt. inputs :
	None

 Outputs     :
	EXIST	- Integer, 1 if the file exists, 0 if it does not.

	READ	- Integer, 1 if the user has read permission 0 if not.

	WRITE	- Integer, 1 if the user has write permission 0 if not.

	EXECUTE	- Integer, 1 if the user has execute permission 0 if not.

	FILETYPE- String, the file description character from the
		  directory listing output. e.g for ULTRIX '-' indicates
		  a file and 'd' indicates a directory file.

 Opt. outputs:
	None

 Keywords    :
	None

 Calls:
	All of thses routines are in the file_acc.pro file.

	FILE_ACC_DET	Get basic file information through 'ls' command.
	FILE_ACC_GRP	See if two users share a group.

	Called from FILE_ACC_DET and FILE_ACC_GRP;
	FILE_ACC_SPLIT	Split a space separated string of output into
			an array of strings.

 Restrictions: None

 Sise effects:
	A number of UNIX commands are spawned.

 Category:
	UNIX system IDL utility.

 Prev. Hist. : None

 Written: 
       Andrew Bowen, Tessella Support Services plc, 29-Apr-1993

 Modified:  Version 2, Header format updated, C D Pike, 7-Oct-93

 Version: Version 2       7-Oct-1993

;-
;+
 Project     : SOHO - CDS     
                   
 Name        : FILE_EXIST()
               
 Purpose     : Test whether a file exists.
               
 Explanation : Returns true(1) if any files match pattern=file
	        or false(0) if no files found.
               
 Use         : IDL> file_ok = file_exist(filename [,/direct])
    
 Inputs      : file -  file, pathname or file filter to check

 Opt. Inputs : None
               
 Outputs     : Returns 1/0 as each file does/does not exist.
               
 Opt. Outputs: None
               
 Keywords    : direct - set if want full check (slower) - use if might be an
		empty directory you are looking for

 Calls       : FILE_STAT
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Utilities, Files, OS
               
 Prev. Hist. : Yohkoh procedure by Sam Freeland, LPARL, 30-Nov-1991

	4-Sep-92 (MDM) - Modified to handle an array of input files
      23-sep-93 (slf) - make sure null file returns false
			 (findfile count=1! when null requested)
      17-Mar-94 (SLF) - use file_stat(/exist) for non wild card cases
      April Fools'94 (DMZ) -- added check for :: in file name
                              (file_stat doesn't work across DECNET)
      31-May-94 (DMZ)      -- added check for VMS directory name input
                              (file_stat doesn't seem to work on VMS
                               dir names like '[ys.atest.soft]')
      16-Aug-94 (DMZ)      -- added another VMS patch to handle
                              case when user enters  a VMS subdirectory name
                              without a file name.

 Written     : CDS version by C D Pike, RAL, 2-Jul-1993
               
 Modified    : Version 2, William Thompson, GSFC, 21 June 1995
			Remerged CDS and Yohkoh versions.

 Version     : Version 2, 21 June 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	FILE_STAT()

 Purpose     :	Vector version of FSTAT

 Category    :	Utility, Operating_system

 Explanation :	Vector version of FSTAT

 Syntax      :	Result = FILE_STAT( FILES )

 Examples    :	

 Inputs      :	FILES	= List of files to check.

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	EXIST	= If set, then the returned values are whether the
			  files exist or not.  This is the default behavior.
		SIZE	= If set, then the returned values are the sizes of the
			  files.

 Calls       :	DATA_CHK

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Prev. Hist. :	11-Mar-1994 (SLF) Wanted faster file_exist function

 History     :	Version 1, 11-Mar-1994, S. Freeland

 Contact     :	SFREELAND
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : FILL_BOX
               
 Purpose     : To fill a plot box with one of a selection of patterns.
               
 Explanation : In a line plot fill column from x-bin/2 to x+bin/2 and 
               from y=0 to y with the selected pattern.
               
 Use         : IDL> fill_box,x,y,bin [,patt, /border, ymin=ymin, /bstyle]
    
               
 Inputs      : x    -  the x-axis location of the box
               y    -  the maximum y-axis extent of the box
               bin  -  the width of the box on x-axis

 Opt. Inputs : patt -      0:  solid (default)
                           1:  hatch backward
                           2:  hatch forward
                           3:  vertical
                           4:  horizontal
                           5:  grid
                           6:  cross hatch
                           7:  empty
                     

 Outputs     : None
               
 Opt. Outputs: None
               
 Keywords    : border  - if present a border is drawn around the filled box.
               ymin    - if present the box is filled from ymin to y otherwise
                         from 0 to y.
               bstyle  - sets line style for border or if requested

 Calls       : None
               
 Restrictions: Plot must have been performed before call to this routine.
               
 Side effects: None
               
 Category    : Utilities, Plotting
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 10-May-1993
               
 Modified    : Added ymin keyword.  CDP 21-Apr-94
               Add empty possibility, add bstyle/outline keywords. 
                                    CDP 14-Jul-94
               Temporarily suspend X-windows mode.  CDP, 18-Jul-94
               (It was crashing my Alpha)

 Version     : Version 3, 14-Jul-94
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : FILL_CATEGORY
               
 Purpose     : Load save file with current categories 
               
 Explanation : Uses the CATEGORY routine to create a list of
               relevant names and categories and then stores then in
               $CDS_INFO/categories.save for later retrieval by TFTD with
               the CAT keyword.
               
 Use         : IDL>  fill_category [,/prog]
    
 Inputs      : None 
               
 Opt. Inputs : None
               
 Outputs     : Save file created in /cs
               
 Opt. Outputs: None
               
 Keywords    : PROG - if present fill tables for 'programmers' routines.

 Calls       : PURPOSE

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, help
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 20-Sep-94 
               
 Modified    : 

 Version     : Version 1, 20-Sep-94
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : FILL_TFTD
               
 Purpose     : Load save file with current one-liners 
               
 Explanation : Uses the PURPOSE routine to create a list of
               relevant one-liners and then stores then in
               $CDS_INFO/1liners.save for later retrieval by TFTD.
               
 Use         : IDL>  fill_tftd [,/prog]
    
 Inputs      : None 
               
 Opt. Inputs : None
               
 Outputs     : Save file created in /cs
               
 Opt. Outputs: None
               
 Keywords    : PROG - if present fill tables for 'programmers' routines.

 Calls       : PURPOSE

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, help
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 13-May-94 
               
 Modified    : Change storage directory of save file, CDP, 20-May-1994
               To include list of intrinsic routines. CDP, 25-May-95
               Add PROG keyword.  CDP, 13-Jun-94
               Take account of new directory structure. CDP, 21-Jun-94
               Add database directories.  CDP, 22-Jul-94
               Add ql_disp directory to user lists. CDP, 14-Sep-94
               Added specific routines in the planning
               directories.   CDP, 11-Jan-95
               Add wavelength calibration routines.  CDP, 30-Jan-95
               Add user telemetry calibration programs.  CDP, 3-Feb-95
               Add /xdr to save file.  CDP, 3-Apr-95

 Version     : Version 11, 3-Apr-95
;-
;+
 Project     :	SOHO - CDS

 Name        :	FIND_ALL_DIR()

 Purpose     :	Finds all directories under a specified directory.

 Explanation :	This routines finds all the directories in a directory tree
		when the root of the tree is specified.  This provides the same
		functionality as having a directory with a plus in front of it
		in the environment variable IDL_PATH.

 Use         :	Result = FIND_ALL_DIR( PATH )

		PATHS = FIND_ALL_DIR('+mypath', /PATH_FORMAT)
		PATHS = FIND_ALL_DIR('+mypath1:+mypath2')

 Inputs      :	PATH	= The path specification for the top directory in the
			  tree.  Optionally this may begin with the '+'
			  character but the action is the same unless the
			  PLUS_REQUIRED keyword is set.

			  One can also path a series of directories separated
			  by the correct character ("," for VMS, ":" for Unix)

 Opt. Inputs :	None.

 Outputs     :	The result of the function is a list of directories starting
		from the top directory passed and working downward from there.
		Normally, this will be a string array with one directory per
		array element, but if the PATH_FORMAT keyword is set, then a
		single string will be returned, in the correct format to be
		incorporated into !PATH.

 Opt. Outputs:	None.

 Keywords    :	PATH_FORMAT	= If set, then a single string is returned, in
				  the format of !PATH.

		PLUS_REQUIRED	= If set, then a leading plus sign is required
				  in order to expand out a directory tree.
				  This is especially useful if the input is a
				  series of directories, where some components
				  should be expanded, but others shouldn't.

 Calls       :	FIND_WITH_DEF, BREAK_PATH

 Common      :	None.

 Restrictions:	PATH must point to a directory that actually exists.

		On VMS computers this routine calls a command file,
		FIND_ALL_DIR.COM, to find the directories.  This command file
		must be in one of the directories in IDL's standard search
		path, !PATH.

 Side effects:	None.

 Category    :	Utilities, Operating_system.

 Prev. Hist. :	None.

 Written     :	William Thompson, GSFC, 3 May 1993.

 Modified    :	Version 1, William Thompson, GSFC, 3 May 1993.
		Version 2, William Thompson, GSFC, 6 July 1993.
			Added sort to spawned command under Unix.
		Version 3, William Thompson, GSFC, 16 May 1995
			Modified to support multiple directories.
			Added keyword PLUS_REQUIRED

 Version     :	Version 3, 16 May 1995
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : FIND_COMMON()
               
 Purpose     : Find which elements are common to the input vectors.
               
 Explanation : Returns the indices of the elements in second vector which
               are also present in the first vector.
               
 Use         : IDL> c = find_common(first, second)
    
 Inputs      : first  -  vector to be searched
               second -  search vector
               
 Opt. Inputs : None
               
 Outputs     : Function returns indices of elements in second vector which
               are common to first and second vectors
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : FIND_DUP()

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 9-Nov-94
               
 Modified    : 

 Version     : Version 1, 9-Nov-94
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : FIND_DATA_RUNS()
               
 Purpose     : Detect runs of data in an array and return their boundaries.
               
 Explanation : This function finds valid data windows in a data array. 
               Valid windows are those containing data not having a value 
               equal to the 'invalid' flag and having at least 'min_data_win' 
               valid data points in them. Groups with less than this number 
               of data points are ignored. A break in the data window is 
               also considered to have occurred if the time interval between 
               successive valid data points is greater than 'max_time_int'
               units. 
               
 Use         : IDL> limits = find_data_runs(x, y, min_data_win, $
                                            max_time_int [,maxrun=maxrun])
    
 Inputs      : x        -  input data array 'time' values

               y        -  input data array data values

               invalid  -  value of datum to be ignored

               min_wind_size  -  chosen data runs must contain at least this 
                                 many data points otherwise they are ignored.

               max_time_step  -  maximum 'time' step which is considered 
                                 legitimate within a window. If two 
                                 consecutive data points in the x array are 
                                 separated in value by more than this then a 
                                 new data window is started.

               
 Opt. Inputs : None
               
 Outputs     : Function returns start and stop indices (in input arrays) of
               runs of valid data as a 2-d array. eg:
                  dw = find_data_runs(x,y.......)
               then dw(0,0) will be the start index of the first run
                    dx(0,1) the stop index of the first run
                    dx(1,0) the start index of the second run etc etc

               Example:
                          y = [0,0,1,1,1,0,0,0,1,1,0,1,1]
                          dw = find_data_runs(indgen(13),y,0,0,1)
                          print, dw  will give
                           2  8  11
                           4  9  12

               An array [-1,-1] is returned if no valid data runs are found.
               
 Opt. Outputs: None
               
 Keywords    : maxrun - max number of data points in a run.  A new run
                        is started when this limit is reached.

 Calls       : None
               
 Restrictions: x and y array inputsmust be of the same size.
               
 Side effects: None
               
 Category    : Util, misc
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 16-Nov-93
               
 Modified    : Add maxrun keyword.  CDP, 1-Nov-94

 Version     : Version 2, 1-Nov-94
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : FIND_DUP()
               
 Purpose     : Function to identify duplicate values in a vector. 
               
 Explanation : The function returns a vector pointing to duplicated values
               in the input array such that
                         print,a(find_dup(a))
               will print a list of duplicate values. But beware that the
               function returns a value -1 if no duplicates are found.
               
 Use         : result = find_dup(vector)  

 Inputs      : vector - vector of values from which duplicates are to be found
               
 Opt. Inputs : None
               
 Outputs     : A vector of subscripts in 'vector' is returned.  Each subscript
               points to a duplicated value. If no duplicates are found, a
               value -1 is returned.
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, misc
               
 Prev. Hist. : Based on REM_DUP by D. Lindler  Mar. 87

 Written     : CDS version by C D Pike, RAL, 12-Nov-93
               
 Modified    : Use BSORT to maintain order.  CDP, 9-Nov-94

 Version     : Version 2, 9-Nov-94
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FIND_WITH_DEF()
 Purpose     : 
	Searches for files with a default path and extension.
 Explanation :
	Finds files using default paths and extensions, similar to using the
	DEFAULT keyword with the OPEN statement in VMS.  Using this routine
	together with environment variables allows an OS-independent approach
	to finding files.
 Use         : 
	Result = FIND_WITH_DEF( FILENAME, PATHS  [, EXTENSIONS ] )

	FILENAME = ''
	READ, 'File to open: ', FILENAME
	FILE = FIND_WITH_DEF( FILENAME, 'SERTS_DATA', '.fix' )
	IF FILE NE '' THEN ...

 Inputs      : 
	FILENAME   = Name of file to be searched for.  It may either be a
		     complete filename, or the path or extension could be left
		     off, in which case the routine will attempt to find the
		     file using the default paths and extensions.

	PATHS	   = One or more default paths to use in the search in case
		     FILENAME does not contain a path itself.  The individual
		     paths are separated by commas, although in UNIX, colons
		     can also be used.  In other words, PATHS has the same
		     format as !PATH, except that commas can be used as a
		     separator regardless of operating system.  The current
		     directory is always searched first, unless the keyword
		     NOCURRENT is set.

		     A leading $ can be used in any path to signal that what
		     follows is an environmental variable, but the $ is not
		     necessary.  (In VMS the $ can either be part of the path,
		     or can signal logical names for compatibility with Unix.)
		     Environmental variables can themselves contain multiple
		     paths.

 Opt. Inputs : 
	EXTENSIONS = One or more extensions to append to end of filename if the
		     filename does not contain one (e.g. ".dat").  The period
		     is optional.  Multiple extensions can be separated by
		     commas or colons.
 Outputs     : 
	The result of the function is the name of the file if successful, or
	the null string if unsuccessful.
 Opt. Outputs: 
	None.
 Keywords    : 
	NOCURRENT = If set, then the current directory is not searched.
 Calls       : 
	STR_SEP, BREAK_PATH
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	None.
 Category    : 
	Utilities, Operating_system
 Prev. Hist. : 
	None, but influenced by TEST_OPENR by William Thompson, and CONCAT_DIR
	by M. Morrison.
 Written     : 
	William Thompson, GSFC, 5 April 1993.
 Modified    : 
	Version 1, William Thompson, GSFC, 3 May 1993.
		Removed trailing / and : characters.
		Fixed bugs
		Allow for commas within values of logical names.
		Added keyword NOCURRENT.
		Changed to call BREAK_PATH
	Version 2, William Thompson, GSFC, 3 November 1994
		Made EXTENSIONS optional.
 Version     : 
	Version 2, 3 November 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	FIT_GAUSS

 Purpose     :	Fits a gaussian plus a quadratic to data points

 Explanation :	Fit Y=F(X) where:
	 	F(X) = A0*EXP(-Z^2/2) + A3 + A4*X + A5*X^2
 			and Z=(X-A1)/A2
		A0 = height of exp, A1 = center of exp, A2 = Gaussian width,
		A3 = constant term, A4 = linear term, A5 = quadratic term.
	 	Estimate the parameters A0,A1,A2,A3 and then call LSTSQR.

		If the (max-avg) of Y is larger than (avg-min) then it is
		assumed the line is an emission line, otherwise it is assumed
		there is an absorbtion line.  The estimated center is the max
		or min element.  The height is (max-avg) or (avg-min)
		respectively.  The width is foun by searching out from the
		extrem until a point is found < the 1/e value.

 Use         :	YFIT = FIT_GAUSS( X, Y  [, A  [, ASIG  [, CHISQR ]]] )

 Inputs      :	X = independent variable, must be a vector.
		Y = dependent variable, must have the same number of points
		    as X.

 Opt. Inputs :	None.

 Outputs     :	YFIT = fitted function.

 Opt. Outputs:	A    = Coefficients -- a six element vector as described above.
		ASIG = Estimated errors in A.

 Keywords    :	
	ACCURACY = Accuracy to cut off at.  Defaults to 1E-5.
	MAX_ITER = Maximum number of reiterations.  Defaults to 20.
	POISSON	 = If set, then a Poisson error distribution is assumed, and
		   the weights are set accordingly to 1/Y.
	ERROR	 = Array of errors.  The weights are set accordingly to
		   1/ERROR^2.  Overrides POISSON.
	WEIGHT	 = Array of weights to use in fitting.  Overrides POISSON and
		   ERROR.
	LAMBDA	 = Initial value of LAMBDA.  Defaults to 1E-2.
	NOPRINT	 = If set, then no printout is generated.
	CHISQR	 = Returned value of chi-squared.  Only relevant if ERROR
		   passed explicitly.
	N_ITER	 = Number of iterations used.
	CMATRIX	 = Correlation matrix.

 Calls       :	LSTSQR

 Common      :	None.

 Restrictions:	The peak or minimum of the gaussian must be the largest or
		respectively the smallest point in the Y vector.

 Side effects:	None.

 Category    :	Utilities, Curve_Fitting

 Prev. Hist. :	
	DMS, RSI, Dec, 1983.
	Modified to use LSTSQR, William Thompson, Feb. 1990.
	William Thompson, June 1991, modified to use keywords.

 Written     :	David M. Stern, RSI, December 1983

 Modified    :	Version 1, William Thompson, GSFC, 9 January 1995
			Incorporated into CDS library

 Version     :	Version 1, 9 January 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	FIT2GIF

 Purpose     :	convert FITS file to a GIF image file

 Explanation :	Reads a FITS file, byte scales it, and
               then writes it to a GIF file.

 Use         :	FITS2GIF,INFILE

 Inputs      :	INFILE = fits file name

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	HEADER = fits file header

 Keywords    :	OFILE = output GIF file name [def = INFILE with .GIF extension]
               TITLE = title for image
               COLOR = color table to load [def= 0 , B/W]
               RED, GREEN, BLUE = optional color vectors to override COLOR
               FRAC  = fraction by which to increase image
                       size in Y-direction to fit title [def = 15%]
               XPOS, YPOS = normalized coordinates for title [def=.1,.9]
               ROTATE = value for rotate (see ROTATE function)
               FLIP = flip image to to bottom
               REVERSE = flip image left to right
               PREVIEW = preview image before writing
               SIG  = select significant range of image

 Calls       :	WRITE_GIF

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Plotting.

 Prev. Hist. :	None.

 Written     :	Dominic Zarro (ARC)

 Version     :	Version 1.0, 11 November 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	FITS_INFO

 Purpose     :	Provides info about FITS file, primary and extensions.

 Explanation :	
	Provide information about the contents of a FITS file, (primary header
	and data if any + extensions).  Information is printed at the terminal
	and/or stored in a common block

 Use         :	
	FITS_INFO, filename, [ SILENT = , TEXTOUT = , N_ext = ]

	Example:  Display info about all FITS files of the form '*.fit' in the
	current directory

		IDL> fits_info, '*.fit'

	Any time a *.fit file is found which is *not* in FITS format, an error 
	message is displayed at the terminal and the program continues

 Inputs      :	
	FILENAME = Scalar or vector string giving the name of the FITS file(s)
		Can include wildcards such as '*.fits'

 Opt. Inputs :	None.

 Outputs     :	Information is printed to the screen.

 Opt. Outputs:	None.

 Keywords    :	
	SILENT - This key word will suppress display of the file description
		on the terminal
	TEXTOUT - specifies output device.
		textout=1        TERMINAL using /more option
		textout=2        TERMINAL without /more option
		textout=3        <program>.prt
		textout=4        laser.tmp
		textout=5        user must open file, see TEXTOPEN
		textout = filename (default extension of .prt)
	N_ext - Returns an integer scalar giving the number of extensions in
		the FITS file

 Calls       :	
	GETTOK, STRN, SXPAR, TEXTOPEN, TEXTCLOSE 

 Common      :	
	DESCRIPTOR = File descriptor string of the form N_hdrrec Naxis IDL_type
		Naxis1 Naxis2 ... Naxisn [N_hdrrec table_type Naxis
		IDL_type Naxis1 ... Naxisn] (repeated for each extension) 
		See the procedure RDFITS_STRUCT for an example of the
		use of this common block

 Restrictions:	
	Uses the non-standard system variable !TEXTOUT to select an output
	device if the TEXTOUT keyword is not supplied

 Side effects:	None.

 Category    :	Data handling, I/O, FITS, Generic

 Prev. Hist. :	
	Written, K. Venkatakrishna, Hughes STX, May 1992
	Added N_ext keyword, and table_name info, G. Reichert
	Some cleaning up of the code W. Landsman   October 1992
	Work on *very* large FITS files   October 92

 Written     :	K. Venkatakrishna, Hughes STX, May 1992

 Modified    :	Version 1, William Thompson, GSFC, 10 June 1994
			Incorporated into CDS library.
		Version 2, William Thompson, GSFC, 9 January 1995
			Incorporated following changes:

       More checks to recognize corrupted FITS files     February, 1993
	Proper check for END keyword    December 1994
	Correctly size variable length binary tables   December 1994

 Version     :	Version 2, 9 January 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FITSTAPE()
 Purpose     : 
	Function to perform FITS tape I/O.
 Explanation : 
	Function to perform FITS tape I/O.  Called by FITSREAD.   
	FOR VMS IDL ONLY!
 Use         : 
	status=fitstape(command,unit,bitpix,data)
 Inputs      : 
	command - string command from the following choices
             'init' - initialization (must be first call to fitstape)
             'read' - get next 2880 byte data buffer
             'eof'  - check for end of tape file
             'write'- write 2880 byte data buffer
             'woef' - empty buffer and write end-of-file
	unit -   tape unit number
	bitpix - bits/per data element (used to control byte swapping)
            (required for 'read' and 'write')
            (for 'init' command this parameter gives
             the blocking factor, number of 2880 byte
             records per tape record. if not supplied 1 is
             assumed)
	data - 2880 byte data array if 'write' command
 Opt. Inputs : 
	None.
 Outputs     : 
	data - 2880 byte data array if 'read' command
	status is returned as the function value
	with the following meanings.
		'init' = 1
		'read' = !err returned by taprd
		'write' = 1
		'eof'  = 1 if at end of file
			 0 if not at end of file
		'weof' = 1
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	QFITSTAPE
 Restrictions: 
	None.
 Side effects: 
	None.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	Version 1  D. Lindler  Nov 1986
	Converted to IDL Version 2.  M. Greason, STX, June 1990.
	Recognize BITPIX = -32 and BITPIX = -64   W. Landsman April 1992
 Written     : 
	Don Lindler, GSFC/HRS November 1986.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 April 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	FITTER

 Purpose     : Least-squares fit of linear function

 Explanation :	Fits a linear function to a series of data points via a
		least-squares technique.

 Use         :	FITTER, X, Y, FDER, PARAM  [, PERR ]

 Inputs      :	X	= Positions.
		Y	= Data values.
		ERR	= Errors in Y.
		FDER	= Array of partial derivatives of fitted function.
			  This array will have the dimensions: FDER(
			  N_ELEMENTS(X) , N_ELEMENTS(PARAM) )

 Opt. Inputs :	None.

 Outputs     :	PARAM	= Returned parameters of fit.

 Opt. Outputs:	PERR	= Errors in PARAM.

 Keywords :	POISSON	= If set, then a Poisson error distribution is assumed,
			  and the weights are set accordingly to 1/Y.
		ERROR	= Array of errors.  The weights are set accordingly to
			  1/ERROR^2.  Overrides POISSON.
		WEIGHT	= Array of weights to use in fitting.  Overrides
			  POISSON and ERROR.
		YZERO	= Amount to subtract from Y (only for use with
			  REGRESS).
		CHISQR	= Returned value of chi-squared.  Only relevant if
			  ERROR passed explicitly.
		CMATRIX	= Correlation matrix.

 Calls       :	None.

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Curve_Fitting

 Prev. Hist. :	William Thompson, June 1991, modified to use keywords.

 Written     :	William Thompson, GSFC, June 1991

 Modified    :	Version 1, William Thompson, GSFC, 9 January 1995
			Incorporated in CDS library

 Version     :	Version 1, 9 January 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	FLAG_LONG_NAMES
 Purpose     :	
	Flags procedure names that would appear the same under DOS
 Explanation :	
	Flags sets of IDL procedure names which have the same first eight
	characters.  These would appear to be the same file on DOS machines.
	The names of each set of .PRO files with the same first eight
	characters are printed to the screen.
 Use         :	
	CD, directory	;(go to desired directory)
	FLAG_LONG_NAMES
 Inputs      :	
	None.
 Opt. Inputs :	
	None.
 Outputs     :	
	None.
 Opt. Outputs:	
	None.
 Keywords    :	
	None.
 Calls       :	
	None.
 Common      :	
	None.
 Restrictions:	
	None.
 Side effects:	
	None.
 Category    :	
	Utilities, Operating_system.
 Prev. Hist. :	
	William Thompson, January 1993.
 Written     :	
	William Thompson, GSFC, January 1993.
 Modified    :	
	Version 1, William Thompson, GSFC, 9 July 1993.
		Incorporated into CDS library.
 Version     :	
	Version 1, 9 July 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : FLASH_MSG

 Purpose     : Flashes an information message in a text widget.

 Explanation : Write a text message to the specified widget, and alternates
               it with setting it blank in order to simulate a flashing
               message.

 Use         : IDL> flash_msg, widget_id, text [, other_keywords]

 Inputs      : widget_id  - the id of the text widget
               text       - the message to be flashed

 Opt. Inputs : None.

 Outputs     : None.

 Opt. Outputs: None.

 Keywords    : NUM    -- Number of flashing times; default is 4 times.
               NOBEEP -- Set this keyword to suppress the beep
               RATE   -- Flashing rate in seconds; default: 0.25 sec.
               APPEND -- Appends to widget text rather than overwriting

 Calls       : BELL

 Restrictions: Widget must be already set up.

 Side effects: Can be annoying if called frequently with beeping!

 Category    : Utilities, Help

 Prev. Hist. : None

 Written     : C D Pike, RAL, 2-Jul-1993

 Modified    : Liyun Wang, GSFC/ARC, August 25, 1994
                  Added optional keyword NUM to control number of flashing
                  times and NOBEEP to suppress the beep.

               Add append keyword,  CDP, 14-Oct-94
               Fix working of /append mode, CDP, 19-Oct-94
               Limit rewrite of old text in /append mode to 20 lines.
                                            CDP, 9-Jan-95

 Version     : Version 5, 9-Jan-95
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : FMT_VECT()
               
 Purpose     : Formats a vector (any length) into a parenthesized string.
               
 Explanation : This function returns the given vector in parenthesized 
               coordinates as in the form (X,Y).  No limit on the number 
               of dimensions.  Also note that the vector does not need to 
               be numbers.  It may also be a string vector.  e.g. ['X','Y']
               
 Use         : IDL> tmp = VECT( vctr, [ form, FORMAT = , DELIM =  ] )
    
 Inputs      : VCTR      The vector to be displayed  e.g. [56,44]
               
 Opt. Inputs : FORM      This may be used instead of the keyword FORMAT
               
 Outputs     : tmp       A returned string of the parenthesized vector
               
 Opt. Outputs: 
               
 Keywords    : FORMAT    Allows the specification of a format for the 
                         elements.  e.g.: VECT([2,3],format='(f7.1)') 
                         gives '(2.0,3.0)'

               DELIM     Specifies the delimeter.  The default is ',' but
                         other useful examples might be ', ' or ':'

 Calls       : NUM2STR
               
 Restrictions: 
               
 Side effects: 
               
 Category    : 
               
 Prev. Hist. : Original VECT, 29-Aug-91 by E. Deutsch 

 Written     : E Deutsch
               
 Modified    : CDS version by  C D Pike, RAL, 13-May-93

 Version     : Version 1, 13-May-1993
;-
;+
 Project     :	SOHO - CDS

 Name        :	FORM_CHISQR

 Purpose     :	Forms function to be minimized

 Explanation :	Called from fitting routines to form the function to be
		minimized (normally chi-squared).

 Use         :	Result = FORM_CHISQR(Z)

 Inputs      :	Z	 = Array containing the difference between the fitted
			   and measured values, divided by the error (sigma).

 Opt. Inputs :	None.

 Outputs     :	The result of the function is the sum of the error estimates,
		normally the squares of Z.

 Opt. Outputs:	None.

 Keywords    :	ABSOLUTE = If set, then the sum of the absolute differences is
			   minimized instead of the sum of the squares.  This
			   is equivalent to assuming a double-sided exponential
			   distribution.
		LORENTZ	 = If set, then a Lorentz distribution is used instead
			   of a normal distribution.  Overrides ABSOLUTE.

 Calls       :	None.

 Common      :	None.

 Restrictions:	None.

 Side effects:	The statistical interpretation of the value of this function is
		unclear if either ABSOLUTE or LORENTZ is set.

 Category    :	Utilities, Curve_Fitting

 Prev. Hist. :	William Thompson, December, 1992.

 Written     :	William Thompson, GSFC, December 1992

 Modified    :	Version 1, William Thompson, GSFC, 9 January 1995
			Incorporated into CDS library

 Version     :	Version 1, 9 January 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FORM_FILENAME()
 Purpose     : 
	Adds default paths and extensions to filenames.
 Explanation : 
	This procedure tests whether or not a given filename already has an
	extension on it.  If not, then a default extension is appended.
	Optionally, the same can be done with a default path.  This is similar
	to using the DEFAULT keyword with the OPEN statement in VMS.

	Using this routine together with environment variables for the optional
	directory path allows an OS-independent approach to forming filenames.
 Use         : 
	result = FORM_FILENAME( FILENAME, EXTENSION )

	OPENW, UNIT, FORM_FILENAME( FILENAME, '.fits' ), ...

 Inputs      : 
	FILENAME  = Name of file to test.
	EXTENSION = Default filename extension.  Ignored if FILENAME already
		    contains an extension.
 Opt. Inputs : 
	None.
 Outputs     : 
	Result of function is the name of the file complete with (optional)
	directory and extension.
 Opt. Outputs: 
	None.
 Keywords    : 
	DIRECTORY = Default directory path.  Ignored if FILENAME already
		    contains directory information.
 Calls       : 
	STR_SEP
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	None.
 Category    : 
	Utilites, Operating System.
 Prev. Hist. : 
	William Thompson, October 1991.
 Written     : 
	William Thompson, GSFC, October 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 7 May 1993.
		Incorporated into CDS library.
		Changed to be compatible with CONCAT_DIR by M. Morrison.
		Made more OS-independent.  Relaxed punctuation requirements.
		Fixed small bug with blank extensions.
		Added IDL for Windows compatibility.
 Version     : 
	Version 1, 7 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FORM_INT()
 Purpose     : 
	Scales an intensity image for use with split color tables.
 Explanation : 
	Takes an intensity image, and scales it into a byte array suitable for 
	use with the combined intensity/velocity color table created by
	COMBINE_VEL.

	Alternatively, two intensity images can be displayed with different
	color tables merged via COMBINE_VEL, if the /LOWER switch is used for
	one of them.

	This function scales an array into the upper (or lower) half of the
	color table.  If passed, only values of IMAGE within the range IMIN to
	IMAX will be used to set the scaling.  Missing pixels (MISSING) are
	scaled to zero.
 
 Use         : 
	B = FORM_INT(IMAGE)

	The following example shows how to put a 256 by 256 intensity image I
	next to its corresponding velocity image V.  Standard color table #3 is
	used for the intensity image.
 
	LOADCT,3			   ;Select color table for intensity
	COMBINE_VEL			   ;Combine with velocity color table
	TV,FORM_INT(I),0,128		   ;Display intensity image on left
	TV,FORM_VEL(V,/COMBINED),256,128   ;And velocity on right

	The following example shows how to put one 256 by 256 intensity image I1
	using color table #3 next to another image of the same size I2 using
	color table #5.
 
	LOADCT,3			   ;Select first color table
	COMBINE_COLORS,/LOWER		   ;Save lower color table
	LOADCT,5			   ;Select second color table
	COMBINE_COLORS			   ;Combine the color tables
	TV,FORM_INT(I1,/LOWER),0,128	   ;Display first image on left
	TV,FORM_INT(I2),128		   ;And second image on right

 Inputs      : 
	IMAGE	= Intensity image to be scaled.
 Opt. Inputs : 
	None.
 Outputs     : 
	This function returns the scaled image.
 Opt. Outputs: 
	None.
 Keywords    : 
	MIN	   = Lower limit placed on intensity image when selecting scale.
	MAX	   = Upper limit placed on intensity image when selecting scale.
	MISSING	   = Value flagging missing pixels.
	LOWER	   = If set, then the image is placed in the lower part of the
		     color table, rather than the upper.
 Calls       : 
	BYTSCLI, GET_IM_KEYWORD
 Common      : 
	None.
 Restrictions: 
	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., Dec. 1990.  Created from FORM_VEL.
	W.T.T., Nov. 1991.  Changed IMIN and IMAX to keywords MIN and MAX.
			    Added support for flag variables VMIN and VMAX.
	W.T.T., Feb. 1992.  Added LOWER keyword.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
 Written     : 
	William Thompson, GSFC, December 1990.
 Modified    : 
	Version 1, William Thompson, GSFC, 13 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 22 October 1993.
		Modified to call BYTSCLI instead of BYTSCL.
 Version     : 
	Version 2, 22 October 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	FORM_SIGMAS

 Purpose     :	Forms denominator in function to be minimized.

 Explanation :	Called from fitting routines to form the denominator in the
		argument of the function to be minimized (normally
		chi-squared).

 Use         :	FORM_SIGMAS, Y, SIG  [, /POISSON ]  [, ERROR=ERR ]

 Inputs      :	Y	 = Data values.  Must always be present, but only used
			   if the POISSON switch is set.

 Opt. Inputs :	None.

 Outputs     :	SIG	 = Array of sigmas to be used in evaluating the
			   function to be minimized.

 Opt. Outputs:	SIG_SET	 = A logical switch signalling that a non-trivial SIG
			   array was returned.

 Keywords    :	POISSON	 = If set, then a Poisson error distribution is
			   assumed, and the sigmas are set accordingly to 1/Y.
		ERROR	 = Array of errors.  The sigmas are set accordingly to
			   ABS(ERROR).  Overrides POISSON.

 Calls       :	None.

 Common      :	None

 Restrictions:	If passed, ERROR must have the same number of elements as Y.
		Alternately, ERROR can be passed as a scalar value, and all the
		values of SIG returned will be the same.

 Side effects:	If nothing but Y is passed, then SIG is returned as an array of
		ones.

 Category    :	Utilities, Curve_Fitting

 Prev. Hist. :	William Thompson, December, 1992.

 Written     :	William Thompson, GSFC, December 1992

 Modified    :	Version 1, William Thompson, GSFC, 9 January 1995
			Incorporated into CDS library

 Version     :	Version 1, 9 January 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FORM_VEL()
 Purpose     : 
	Scales a velocity image for display.
 Explanation : 
	Takes a velocity image, and scales it into a byte array suitable for 
	use with the velocity color table created by LOAD_VEL.

	This function scales an array into the range 1 to MAXCOLOR (either
	!D.N_COLORS-1 or (!D.N_COLORS - 1)/2, depending on the value of
	combined), with values of zero scaling to (MAXCOLOR+1)/2.  If passed,
	only values of IMAGE within the range MIN to MAX will be used to set
	the scaling.  Missing pixels (MISSING) are scaled to zero.  When used
	with LOAD_VEL, positive velocities will be shown in blue, negative
	velocities in red (or visa-versa), velocities at or near zero will be
	shown in grey, and missing pixels will be black.
 
 Use         : 
	Result = FORM_VEL(IMAGE)

	The following example shows how to put a 256 by 256 intensity image I
	next to its corresponding velocity image V.  Standard color table #3 is
	used for the intensity image.
 
	LOADCT,3			   ;Select color table for intensity
	COMBINE_VEL			   ;Combine with velocity color table
	TV,FORM_INT(I),0,128		   ;Display intensity image on left
	TV,FORM_VEL(V,/COMBINED),256,128   ;And velocity on right
 
 Inputs      : 
	IMAGE	= Velocity image to be scaled.
 Opt. Inputs : 
	None.
 Outputs     : 
	This function returns the scaled image.
 Opt. Outputs: 
	None.
 Keywords    : 
	MIN	   = Lower limit placed on velocity image when selecting scale.
	MAX	   = Upper limit placed on velocity image when selecting scale.
		     If neither MIN or MAX are passed, then the scaling is
		     derived from the image.  If both MIN and MAX are passed,
		     then the scale is set by the least restrictive of the two
		     values.
	MISSING	   = Value flagging missing pixels.
	COMBINED   = If passed, then velocities are scaled into the bottom half
		     of the color table, so that intensities can be displayed
		     using the top half of the color table.
 Calls       : 
	GET_IM_KEYWORD, IM_KEYWORD_SET
 Common      : 
	None.
 Restrictions: 
	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., Oct. 1987.
	W.T.T., Nov. 1990.  Modified for version 2 of IDL.
	W.T.T., Dec. 1990.  Added COMBINED keyword.
	W.T.T., Jan. 1991.  Changed FLAG to keyword BADPIXEL.
	W.T.T., Nov. 1991.  Changed VMIN and VMAX to keywords MIN and MAX.
			    Added support for flag variables VMIN, VMAX and
			    COMBINED.
	W.T.T., Jun. 1992.  Changed so that topmost color reserved for
			    overplotting with white lines.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
 Written     : 
	William Thompson, GSFC, October 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 13 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 13 May 1993.
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       FUNCIR

 PURPOSE: 
       Return function value and its derivatives of the equation of a circle

 EXPLANATION:
       
 CALLING SEQUENCE: 
       FUNCIR, x, a, y, dyda

 INPUTS:
       X -- A two element vector for position of the point on the circle
       A -- A three element vector representing position (x0, y0) and radius
            (r0) of the circle center 

 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       Y    -- Function value of the circle equation.
       DYDA -- Derivatives of the function

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS: 
       None.

 CALLS:
       None.

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       Misc, user-supplied function

 PREVIOUS HISTORY:
       Written November 10, 1994, by Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       
 VERSION:
       Version 1, November 10, 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXADDPAR
 Purpose     : 
	Add or modify a parameter in a FITS header array.
 Explanation : 

 Use         : 
	FXADDPAR, HEADER, NAME, VALUE, COMMENT
 Inputs      : 
	HEADER	= String array containing FITS header.  The maximum string
		  length must be equal to 80.  If not defined, then FXADDPAR
		  will create an empty FITS header array.

	NAME	= Name of parameter.  If NAME is already in the header the
		  value and possibly comment fields are modified. Otherwise a
		  new record is added to the header.  If NAME is equal to
		  either "COMMENT" or "HISTORY" then the value will be added to
		  the record without replacement.  In this case the comment
		  parameter is ignored.

	VALUE	= Value for parameter.  The value expression must be of the
		  correct type, e.g. integer, floating or string.  String
		  values of 'T'	or 'F' are considered logical values.

 Opt. Inputs : 
	COMMENT	= String field.  The '/' is added by this routine.  Added
		  starting in position 31.  If not supplied, or set equal to ''
		  (the null string), then any previous comment field in the
		  header for that keyword is retained (when found).
 Outputs     : 
	HEADER	= Updated header array.
 Opt. Outputs: 
	None.
 Keywords    : 
	BEFORE	= Keyword string name.  The parameter will be placed before the
		  location of this keyword.  For example, if BEFORE='HISTORY'
		  then the parameter will be placed before the first history
		  location.  This applies only when adding a new keyword;
		  keywords already in the header are kept in the same position.

	AFTER	= Same as BEFORE, but the parameter will be placed after the
		  location of this keyword.  This keyword takes precedence over
		  BEFORE.

       FORMAT	= Specifies FORTRAN-like format for parameter, e.g. "F7.3".  A
		  scalar string should be used.  For complex numbers the format
		  should be defined so that it can be applied separately to the
		  real and imaginary parts.
 Calls       : 
	FXPAR, FXPARPOS
 Common      : 
	None.
 Restrictions: 
	Warning -- Parameters and names are not checked against valid FITS
	parameter names, values and types.

	The required FITS keywords SIMPLE (or XTENSION), BITPIX, NAXIS, NAXIS1,
	NAXIS2, etc., must be entered in order.  The actual values of these
	keywords are not checked for legality and consistency, however.

 Side effects: 
	All HISTORY records are inserted in order at the end of the header.

	All COMMENT records are also inserted in order at the end of the
	header, but before the HISTORY records.  The BEFORE and AFTER keywords
	can override this.

	All records with no keyword (blank) are inserted in order at the end of
	the header, but before the COMMENT and HISTORY records.  The BEFORE and
	AFTER keywords can override this.

	All other records are inserted before any of the HISTORY, COMMENT, or
	"blank" records.  The BEFORE and AFTER keywords can override this.

 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	William Thompson, Jan 1992, from SXADDPAR by D. Lindler and J. Isensee.
	Differences include:

		* LOCATION parameter replaced with keywords BEFORE and AFTER.
		* Support for COMMENT and "blank" FITS keywords.
		* Better support for standard FITS formatting of string and
		  complex values.
		* Built-in knowledge of the proper position of required
		  keywords in FITS (although not necessarily SDAS/Geis) primary
		  headers, and in TABLE and BINTABLE extension headers.

	William Thompson, May 1992, fixed bug when extending length of header,
	and new record is COMMENT, HISTORY, or blank.
 Written     : 
	William Thompson, GSFC, January 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 April 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXBADDCOL
 Purpose     : 
	Adds a column to a binary table extension.
 Explanation : 
	Modify a basic FITS binary table extension (BINTABLE) header array to
	define a column.
 Use         : 
	FXBADDCOL, INDEX, HEADER, ARRAY  [, TTYPE [, COMMENT ]]
 Inputs      : 
	HEADER	= String array containing FITS extension header.
	ARRAY	= IDL variable used to determine the data size and type
		  associated with the column.  If the column is defined as
		  containing variable length arrays, then ARRAY must be of the
		  maximum size to be stored in the column.
 Opt. Inputs : 
	TTYPE	= Column label.
	COMMENT = Comment for TTYPE
 Outputs     : 
	INDEX	= Index (1-999) of the created column.
	HEADER	= The header is modified to reflect the added column.
 Opt. Outputs: 
	None.
 Keywords    : 
	VARIABLE= If set, then the column is defined to contain pointers to
		  variable length arrays in the heap area.
	DCOMPLEX= If set, and ARRAY is complex, with the first dimension being
		  two (real and imaginary parts), then the column is defined as
		  double-precision complex (type "M").
	BIT	= If passed, and ARRAY is of type byte, then the column is
		  defined as containg bit mask arrays (type "X"), with the
		  value of BIT being equal to the number of mask bits.
	LOGICAL	= If set, and array is of type byte, then the column is defined
		  as containing logical arrays (type "L").
	NO_TDIM	= If set, then the TDIMn keyword is not written out to the
		  header.  No TDIMn keywords are written for columns containing
		  variable length arrays.
	TUNIT	= If passed, then corresponding keyword is added to header.
	TSCAL	= Same.
	TZERO	= Same.
	TNULL	= Same.
	TDISP	= Same.
	TDMIN	= Same.
	TDMAX	= Same.
	TDESC	= Same.
	TCUNI	= Same.
	TROTA	= Same.
	TRPIX	= Same.
	TRVAL	= Same.
	TDELT	= Same.
	ERRMSG	= If defined and passed, then any error messages will be
		  returned to the user in this parameter rather than
		  depending on the MESSAGE routine in IDL.  If no errors are
		  encountered, then a null string is returned.  In order to
		  use this feature, ERRMSG must be defined first, e.g.

			ERRMSG = ''
			FXBADDCOL, ERRMSG=ERRMSG, ...
			IF ERRMSG NE '' THEN ...

 Calls       : 
	FXADDPAR, FXPAR
 Common      : 
	None.
 Restrictions: 
	Warning: No checking is done of any of the parameters defining the
	values of optional FITS keywords.

	FXBHMAKE must first be called to initialize the header.

	If ARRAY is of type character, then it must be of the maximum length
	expected for this column.  If a character string array, then the
	largest string in the array is used to determine the maximum length.

	The DCOMPLEX keyword is ignored if ARRAY is not double-precision.
	ARRAY must also have a first dimension of two representing the real and
	imaginary parts.

	The BIT and LOGICAL keywords are ignored if ARRAY is not of type byte.
	BIT takes precedence over LOGICAL.

 Side effects: 
	If the data array is multidimensional, then a TDIM keyword is added to
	the header, unless either NO_TDIM or VARIABLE is set.

	No TDIMn keywords are written out for bit arrays (format 'X'), since
	the dimensions would refer to bits, not bytes.

 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	William Thompson, Jan 1992.
	W. Thompson, Feb 1992, changed from function to procedure.
	W. Thompson, Feb 1992, modified to support variable length arrays.
 Written     : 
	William Thompson, GSFC, January 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 31 May 1994
		Added ERRMSG keyword.
       Version 3, William Thompson, GSFC, 23 June 1994
               Modified so that ERRMSG is not touched if not defined.
	Version 4, William Thompson, GSFC, 30 December 1994
		Added keyword TCUNI.
 Version     :
       Version 4, 30 December 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXBCLOSE
 Purpose     : 
	Close a FITS binary table extension opened for read.
 Explanation : 
	Closes a FITS binary table extension that had been opened for read by
	FXBOPEN.
 Use         : 
	FXBCLOSE, UNIT
 Inputs      : 
	UNIT	= Logical unit number of the file.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	ERRMSG	  = If defined and passed, then any error messages will be
		    returned to the user in this parameter rather than
		    depending on the MESSAGE routine in IDL.  If no errors are
		    encountered, then a null string is returned.  In order to
		    use this feature, ERRMSG must be defined first, e.g.

			ERRMSG = ''
			FXBCLOSE, ERRMSG=ERRMSG, ...
			IF ERRMSG NE '' THEN ...

 Calls       : 
	None.
 Common      : 
	Uses common block FXBINTABLE--see "fxbintable.pro" for more
	information.
 Restrictions: 
	The file must have been opened with FXBOPEN.
 Side effects: 
	None.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	W. Thompson, Feb. 1992.
 Written     : 
	William Thompson, GSFC, February 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 21 June 1994
		Added ERRMSG keyword.
       Version 3, William Thompson, GSFC, 23 June 1994
               Modified so that ERRMSG is not touched if not defined.
 Version     :
       Version 3, 23 June 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXBCOLNUM()
 Purpose     : 
	Returns a binary table column number.
 Explanation : 
	Given a column specified either by number or name, this routine will
	return the appropriate column number.
 Use         : 
	Result = FXBCOLNUM( UNIT, COL )
 Inputs      : 
	UNIT	= Logical unit number corresponding to the file containing the
		  binary table.
	COL	= Column in the binary table, given either as a character
		  string containing a column label (TTYPE), or as a numerical
		  column index starting from column one.
 Opt. Inputs : 
	None.
 Outputs     : 
	The result of the function is the number of the column specified, or
	zero if no column is found (when passed by name).
 Opt. Outputs: 
	None.
 Keywords    : 
	ERRMSG	  = If defined and passed, then any error messages will be
		    returned to the user in this parameter rather than
		    depending on the MESSAGE routine in IDL.  If no errors are
		    encountered, then a null string is returned.  In order to
		    use this feature, ERRMSG must be defined first, e.g.

			ERRMSG = ''
			Result = FXBCOLNUM( ERRMSG=ERRMSG, ... )
			IF ERRMSG NE '' THEN ...

 Calls       : 
	None.
 Common      : 
	Uses common block FXBINTABLE--see "fxbintable.pro" for more
	information.
 Restrictions: 
	The binary table file must have been opened with FXBOPEN.

	If COL is passed as a number, rather than as a name, then it must be
	consistent with the number of columns in the table.

 Side effects: 
	None.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	None.
 Written     : 
	William Thompson, GSFC, 2 July 1993.
 Modified    : 
	Version 1, William Thompson, GSFC, 2 July 1993.
	Version 2, William Thompson, GSFC, 29 October 1993.
		Added error message for not finding column by name.
	Version 3, William Thompson, GSFC, 21 June 1994
		Added ERRMSG keyword.
       Version 4, William Thompson, GSFC, 23 June 1994
               Modified so that ERRMSG is not touched if not defined.
 Version     :
       Version 4, 23 June 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXBCREATE
 Purpose     : 
	Open a new binary table at the end of a FITS file.
 Explanation : 
	Write a binary table extension header to the end of a disk FITS file,
	and leave it open to receive the data.

	The FITS file is opened, and the pointer is positioned just after the
	last 2880 byte record.  Then the binary header is appended.  Calls to
	FXBWRITE will append the binary data to this file, and then FXBFINISH
	will close the file.

 Use         : 
	FXBCREATE, UNIT, FILENAME, HEADER
 Inputs      : 
	FILENAME = Name of FITS file to be opened.
	HEADER	 = String array containing the FITS binary table extension
		   header.
 Opt. Inputs : 
	None.
 Outputs     : 
	UNIT	 = Logical unit number of the opened file.
 Opt. Outputs: 
	None.
 Keywords    : 
	ERRMSG	  = If defined and passed, then any error messages will be
		    returned to the user in this parameter rather than
		    depending on the MESSAGE routine in IDL.  If no errors are
		    encountered, then a null string is returned.  In order to
		    use this feature, ERRMSG must be defined first, e.g.

			ERRMSG = ''
			FXBCREATE, ERRMSG=ERRMSG, ...
			IF ERRMSG NE '' THEN ...

 Calls       : 
	FXADDPAR, FXBFINDLUN, FXBPARSE, FXFINDEND
 Common      : 
	Uses common block FXBINTABLE--see "fxbintable.pro" for more
	information.
 Restrictions: 
	The primary FITS data unit must already be written to a file.  The
	binary table extension header must already be defined (FXBHMAKE), and
	must match the data that will be written to the file.
 Side effects: 
	None.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	W. Thompson, Jan 1992, based on WRITEFITS by J. Woffard and W. Landsman.
	W. Thompson, Feb 1992, changed from function to procedure.
	W. Thompson, Feb 1992, removed all references to temporary files.
 Written     : 
	William Thompson, GSFC, January 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 21 July 1993.
		Fixed bug with variable length arrays.
	Version 3, William Thompson, GSFC, 21 June 1994
		Added ERRMSG keyword.
       Version 4, William Thompson, GSFC, 23 June 1994
               Modified so that ERRMSG is not touched if not defined.
 Version     :
       Version 4, 23 June 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	FXBDIMEN()

 Purpose     :	Returns the dimensions for a column in a FITS binary table.

 Explanation :	This procedure returns the dimensions associated with a column
		in a binary table opened for read with the command FXBOPEN.

 Use         :	Result = FXBDIMEN(UNIT,COL)

 Inputs      :	UNIT	= Logical unit number returned by FXBOPEN routine.
			  Must be a scalar integer.

		COL	= Column in the binary table to read data from, either
			  as a character string containing a column label
			  (TTYPE), or as a numerical column index starting from
			  column one.

 Opt. Inputs :	None.

 Outputs     :	The result of the function is an array containing the
		dimensions for the specified column in the FITS binary table
		that UNIT points to.

 Opt. Outputs:	None.

 Keywords :	ERRMSG	= If defined and passed, then any error messages will
			  be returned to the user in this parameter rather than
			  depending on the MESSAGE routine in IDL.  If no
			  errors are encountered, then a null string is
			  returned.  In order to use this feature, ERRMSG must
			  be defined first, e.g.

				ERRMSG = ''
				Result = FXBDIMEN( ERRMSG=ERRMSG, ... )
				IF ERRMSG NE '' THEN ...

 Calls       :	FXBCOLNUM, FXBFINDLUN

 Common      :	Uses common block FXBINTABLE--see "fxbintable.pro" for more
		information.

 Restrictions:	None.

 Side effects:	The dimensions will be returned whether or not the table is
		still open or not.

		If UNIT does not point to a binary table, then 0 is returned.

		If UNIT is an undefined variable, then 0 is returned.

 Category    :	Data Handling, I/O, FITS, Generic.

 Prev. Hist. :	None.

 Written     :	William Thompson, GSFC, 4 March 1994.

 Modified    :	Version 1, William Thompson, GSFC, 4 March 1994.
		Version 2, William Thompson, GSFC, 21 June 1994
			Added ERRMSG keyword.
		Version 3, William Thompson, GSFC, 23 June 1994
               	Modified so that ERRMSG is not touched if not defined.

 Version     :	Version 3, 23 June 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXBFIND
 Purpose     : 
	Find column keywords in a FITS binary table header.
 Explanation : 
	Finds the value of a column keyword for all the columns in the binary
	table for which it is set.  For example,

		FXBFIND, UNIT, 'TTYPE', COLUMNS, VALUES, N_FOUND

	Would find all instances of the keywords TTYPE1, TTYPE2, etc.  The
	array COLUMNS would contain the column numbers for which a TTYPEn
	keyword was found, and VALUES would contain the values.  N_FOUND would
	contain the total number of instances found.

 Use         : 
	FXBFIND, [UNIT or HEADER], KEYWORD, COLUMNS, VALUES, N_FOUND
		[, DEFAULT ]
 Inputs      : 
	Either UNIT or HEADER must be passed.

	UNIT	= Logical unit number of file opened by FXBOPEN.
	HEADER	= FITS binary table header.
	KEYWORD	= Prefix to a series of FITS binary table column keywords.  The
		  keywords to be searched for are formed by combining this
		  prefix with the numbers 1 through the value of TFIELDS in the
		  header.
 Opt. Inputs : 
	DEFAULT	= Default value to use for any column keywords that aren't
		  found.  If passed, then COLUMNS and VALUES will contain
		  entries for every column.  Otherwise, COLUMNS and VALUES only
		  contain entries for columns where values were found.
 Outputs     : 
	COLUMNS	= Array containing the column numbers for which values of the
		  requested keyword series were found.
	VALUES	= Array containing the found values.
	N_FOUND	= Number of values found.  The value of this parameter is
		  unaffected by whether or not DEFAULT is passed.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	FXBFINDLUN, FXPAR
 Common      : 
	Uses common block FXBINTABLE--see "fxbintable.pro" for more
	information.
 Restrictions: 
	If UNIT is passed, then the file must have been opened with FXBOPEN.
	If HEADER is passed, then it must be a legal FITS binary table header.

	The type of DEFAULT must be consistent with the values of the requested
	keywords, i.e. both most be either of string or numerical type.

	The KEYWORD prefix must not have more than five characters to leave
	room for the three digits allowed for the column numbers.

 Side effects: 
	None.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	William Thompson, Feb. 1992.
 Written     : 
	William Thompson, GSFC, February 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 April 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXBFINDLUN()
 Purpose     : 
	Find logical unit number UNIT in FXBINTABLE common block.
 Explanation : 
	Finds the proper index to use for getting information about the logical
	unit number UNIT in the arrays stored in the FXBINTABLE common block.
	Called from FXBCREATE and FXBOPEN.
 Use         : 
	Result = FXBFINDLUN( UNIT )
 Inputs      : 
	UNIT	= Logical unit number.
 Opt. Inputs : 
	None.
 Outputs     : 
	The result of the function is an index into the FXBINTABLE common
	block.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	Uses common block FXBINTABLE--see "fxbintable.pro" for more
	information.
 Restrictions: 
	None.
 Side effects: 
	If UNIT is not found in the common block, then it is added to the
	common block.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	William Thompson, Feb. 1992.
 Written     : 
	William Thompson, GSFC, February 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 21 July 1993.
		Added DHEAP variable to fix bug with variable length arrays.
 Version     : 
	Version 2, 21 July 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXBFINISH
 Purpose     : 
	Close a FITS binary table extension file opened for write.
 Explanation : 
	Closes a FITS binary table extension file that had been opened for
	write by FXBCREATE.
 Use         : 
	FXBFINISH, UNIT
 Inputs      : 
	UNIT	= Logical unit number of the file.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	ERRMSG	= If defined and passed, then any error messages will be
		  returned to the user in this parameter rather than
		  depending on the MESSAGE routine in IDL.  If no errors are
		  encountered, then a null string is returned.  In order to
		  use this feature, ERRMSG must be defined first, e.g.

			ERRMSG = ''
			FXBFINISH, ERRMSG=ERRMSG, ...
			IF ERRMSG NE '' THEN ...

 Calls       : 
	None.
 Common      : 
	Uses common block FXBINTABLE--see "fxbintable.pro" for more
	information.
 Restrictions: 
	The file must have been opened with FXBCREATE, and written with
	FXBWRITE.
 Side effects: 
	Any bytes needed to pad the file out to an integral multiple of 2880
	bytes are written out to the file.  Then, the file is closed.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	W. Thompson, Jan 1992.
	W. Thompson, Feb 1992, modified to support variable length arrays.
	W. Thompson, Feb 1992, removed all references to temporary files.
 Written     : 
	William Thompson, GSFC, January 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 21 July 1993.
		Fixed bug with variable length arrays.
	Version 3, William Thompson, GSFC, 31 May 1994
		Added ERRMSG keyword.
       Version 4, William Thompson, GSFC, 23 June 1994
               Modified so that ERRMSG is not touched if not defined.
 Version     :
       Version 4, 23 June 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	FXBHEADER()

 Purpose     :	Returns the header of an open FITS binary table.

 Explanation :	This procedure returns the FITS extension header of a FITS
		binary table opened for read with the command FXBOPEN.

 Use         :	Result = FXBHEADER(UNIT)

 Inputs      :	UNIT	= Logical unit number returned by FXBOPEN routine.
			  Must be a scalar integer.

 Opt. Inputs :	None.

 Outputs     :	The result of the function is a string array containing the
		header for the FITS binary table that UNIT points to.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	FXBFINDLUN

 Common      :	Uses common block FXBINTABLE--see "fxbintable.pro" for more
		information.

 Restrictions:	None.

 Side effects:	The string array returned always has as many elements as the
		largest header read by FXBOPEN.  Any extra elements beyond the
		true header are blank or null strings.

		The header will be returned whether or not the table is still
		open or not.

		If UNIT does not point to a binary table, then a string array
		of nulls is returned.

		If UNIT is an undefined variable, then the null string is
		returned.

 Category    :	Data Handling, I/O, FITS, Generic.

 Prev. Hist. :	None.

 Written     :	William Thompson, GSFC, 1 July 1993.

 Modified    :	Version 1, William Thompson, GSFC, 1 July 1993.

 Version     :	Version 1, 1 July 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXBHELP
 Purpose     : 
	Prints short description of columns in a FITS binary table.
 Explanation : 
	Prints a short description of the columns in a FITS binary table to the
	terminal screen.
 Use         : 
	FXBHELP, UNIT
 Inputs      : 
	UNIT	= Logical unit number of file opened by FXBOPEN.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	FXBFIND, FXBFINDLUN, FXPAR
 Common      : 
	Uses common block FXBINTABLE--see "fxbintable.pro" for more
	information.
 Restrictions: 
	The file must have been opened with FXBOPEN.
 Side effects: 
	Certain fields may be truncated in the display.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	William Thompson, Feb. 1992, from TBHELP by W. Landsman.
 Written     : 
	William Thompson, GSFC, February 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 12 May 1993.
		Modified to not write to a logical unit number assigned to the
		terminal.  This makes it compatible with IDL for Windows.
 Version     : 
	Version 2, 12 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXBHMAKE
 Purpose     : 
	Create basic FITS binary table extension (BINTABLE) header.
 Explanation : 
	Creates a basic header array with all the required keywords, but with
	none of the table columns defined.  This defines a basic structure
	which can then be added to or modified by other routines.
 Use         : 
	FXBHMAKE, HEADER, NROWS  [, EXTNAME  [, COMMENT ]]
 Inputs      : 
	NROWS	= Number of rows in the binary table.
 Opt. Inputs : 
	EXTNAME	= If passed, then the EXTNAME record is added with this value.
	COMMENT = Comment to go along with EXTNAME.
 Outputs     : 
	HEADER = String array containing FITS extension header.
 Opt. Outputs: 
	None.
 Keywords    : 
	INITIALIZE = If set, then the header is completely initialized, and any
		     previous entries are lost.
	DATE	   = If set, then the DATE keyword is added to the header.
	EXTVER	   = Extension version number (integer).
	EXTLEVEL   = Extension level number (integer).
	ERRMSG	   = If defined and passed, then any error messages will be
		     returned to the user in this parameter rather than
		     depending on the MESSAGE routine in IDL.  If no errors are
		     encountered, then a null string is returned.  In order to
		     use this feature, ERRMSG must be defined first, e.g.

			ERRMSG = ''
			FXBHMAKE, ERRMSG=ERRMSG, ...
			IF ERRMSG NE '' THEN ...

 Calls       : 
	GET_DATE, FXADDPAR, FXHCLEAN
 Common      : 
	None.
 Restrictions: 
	Warning:  No checking is done of any of the parameters.
 Side effects: 
	None.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	William Thompson, Jan 1992.
	William Thompson, Sep 1992, added EXTVER and EXTLEVEL keywords.
 Written     : 
	William Thompson, GSFC, January 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 21 June 1994
		Added ERRMSG keyword.
       Version 3, William Thompson, GSFC, 23 June 1994
               Modified so that ERRMSG is not touched if not defined.
 Version     :
       Version 3, 23 June 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXBINTABLE
 Purpose     : 
	Common block FXBINTABLE used by "FXB" routines.
 Explanation : 
	This is not an IDL routine as such, but contains the definition of the
	common block FXBINTABLE for inclusion into other routines.  By defining
	the common block in one place, the problem of conflicting definitions
	is avoided.

	This file is included into routines that need this common block with
	the single line (left justified)

				  @fxbintable

	FXBINTABLE contains the following arrays:

		LUN	= An array of logical unit numbers of currently (or
			  previously) opened binary table files.
		STATE	= Array containing the state of the FITS files
			  associated with the logical unit numbers, where
			  0=closed, 1=open for read, and 2=open for write.
		HEAD	= FITS binary table headers.
		MHEADER	= Array containing the positions of the first data byte
			  of the header for each file referenced by array LUN.
		NHEADER	= Array containing the positions of the first data byte
			  after the header for each file referenced by array
			  LUN.
		NAXIS1	= Values of NAXIS1 from the binary table headers.
		NAXIS2	= Values of NAXIS2 from the binary table headers.
		TFIELDS	= Values of TFIELDS from the binary table headers.
		HEAP	= The start of the first byte of the heap area
			  for variable length arrays.
		DHEAP	= The start of the first byte of the next variable
			  length array, if writing.
		BYTOFF	= Byte offset from the beginning of the row for each
			  column in the binary table headers.
		TTYPE	= Values of TTYPE for each column in the binary table
			  headers.
		FORMAT	= Character code formats of the various columns.
		IDLTYPE	= IDL type code for each column in the binary table
			  headers.
		N_ELEM	= Number of elements for each column in the binary
			  table headers.
		TSCAL	= Scale factors for the individual columns.
		TZERO	= Zero offsets for the individual columns.
		MAXVAL	= For variable length arrays, contains the maximum
			  number of elements for each column in the binary
			  table headers.
		N_DIMS	= Number of dimensions, and array of dimensions for
			  each column of type string in the binary table
			  headers.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	William Thompson, Feb 1992.
 Written     : 
	William Thompson, GSFC, February 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 21 July 1993.
		Added DHEAP variable to fix bug with variable length arrays.
 Version     : 
	Version 2, 21 July 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	FXBISOPEN()

 Purpose     :	Returns true if UNIT points to an open FITS binary table.

 Explanation :	This procedure checks to see if the logical unit number given
		by the variable UNIT corresponds to a FITS binary table opened
		for read with the command FXBOPEN, and which has not yet been
		closed with FXBCLOSE.

 Use         :	Result = FXBISOPEN(UNIT)

		If FXBISOPEN(UNIT) THEN ...

 Inputs      :	UNIT	= Logical unit number returned by FXBOPEN routine.
			  Must be a scalar integer.

 Opt. Inputs :	None.

 Outputs     :	The result of the function is either True (1) or False (0),
		depending on whether UNIT points to an open binary table or
		not.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	FXBFINDLUN

 Common      :	Uses common block FXBINTABLE--see "fxbintable.pro" for more
		information.

 Restrictions:	None.

 Side effects:	If UNIT is an undefined variable, then False (0) is returned.

		If UNIT points to a FITS binary table file that is opened for
		write, then False (0) is returned.

 Category    :	Data Handling, I/O, FITS, Generic.

 Prev. Hist. :	None.

 Written     :	William Thompson, GSFC, 1 July 1993.

 Modified    :	Version 1, William Thompson, GSFC, 1 July 1993.

 Version     :	Version 1, 1 July 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXBOPEN
 Purpose     : 
	Open binary table extension in a disk FITS file for reading.
 Explanation : 
	Opens a binary table extension in a disk FITS file for reading.  The
	columns are then read using FXBREAD, and the file is closed when done
	with FXBCLOSE.
 Use         : 
	FXBOPEN, UNIT, FILENAME, EXTENSION  [, HEADER ]
 Inputs      : 
	FILENAME  = Name of FITS file to be opened.
	EXTENSION = Either the number of the FITS extension, starting with the
		    first extension after the primary data unit being one; or a
		    character string containing the value of EXTNAME to search
		    for.
 Opt. Inputs : 
	None.
 Outputs     : 
	UNIT	  = Logical unit number of the opened file.
 Opt. Outputs: 
	HEADER	  = String array containing the FITS binary table extension
		    header.
 Keywords    : 
	NO_TDIM	  = If set, then any TDIMn keywords found in the header are
		    ignored.

	ERRMSG	  = If defined and passed, then any error messages will be
		    returned to the user in this parameter rather than
		    depending on the MESSAGE routine in IDL.  If no errors are
		    encountered, then a null string is returned.  In order to
		    use this feature, ERRMSG must be defined first, e.g.

			ERRMSG = ''
			FXBOPEN, ERRMSG=ERRMSG, ...
			IF ERRMSG NE '' THEN ...

 Calls       : 
	FXBFINDLUN, FXBPARSE, FXHREAD, FXPAR
 Common      : 
	Uses common block FXBINTABLE--see "fxbintable.pro" for more
	information.
 Restrictions: 
	The file must be a valid FITS file.
 Side effects: 
	None.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	W. Thompson, Feb 1992, based on READFITS by J. Woffard and W. Landsman.
	W. Thompson, Feb 1992, changed from function to procedure.
	W. Thompson, June 1992, fixed up error handling.
 Written     : 
	William Thompson, GSFC, February 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 27 May 1994
		Added ERRMSG keyword.
	Version 3, William Thompson, GSFC, 21 June 1994
		Extended ERRMSG to call to FXBPARSE
       Version 4, William Thompson, GSFC, 23 June 1994
               Modified so that ERRMSG is not touched if not defined.
 Version     :
       Version 4, 23 June 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXBPARSE
 Purpose     : 
	Parse the binary table extension header.
 Explanation : 
	Parses the binary table extension header, and store the information
	about the format of the binary table in the FXBINTABLE common
	block--called from FXBCREATE and FXBOPEN.
 Use         : 
	FXBPARSE, ILUN, UNIT, HEADER
 Inputs      : 
	ILUN	= Index into the arrays in the FXBINTABLE common block.
	HEADER	= FITS binary table extension header.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	NO_TDIM	  = If set, then any TDIMn keywords found in the header are
		    ignored.
	ERRMSG	  = If defined and passed, then any error messages will be
		    returned to the user in this parameter rather than
		    depending on the MESSAGE routine in IDL.  If no errors are
		    encountered, then a null string is returned.  In order to
		    use this feature, ERRMSG must be defined first, e.g.

			ERRMSG = ''
			FXBPARSE, ERRMSG=ERRMSG, ...
			IF ERRMSG NE '' THEN ...

 Calls       : 
	FXBFIND, FXBTDIM, FXBTFORM, FXPAR
 Common      : 
	Uses common block FXBINTABLE--see "fxbintable.pro" for more
	information.
 Restrictions: 
	None.
 Side effects: 
	Any TDIMn keywords found for bit arrays (format 'X') are ignored, since
	the dimensions would refer to bits, not bytes.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	William Thompson, Feb. 1992.
	William Thompson, Jan. 1993, modified for renamed FXBTFORM and FXBTDIM.
 Written     : 
	William Thompson, GSFC, February 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 21 June 1994
		Added ERRMSG keyword.
       Version 3, William Thompson, GSFC, 23 June 1994
               Modified so that ERRMSG is not touched if not defined.
 Version     :
       Version 3, 23 June 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXBREAD
 Purpose     : 
	Read a data array from a disk FITS binary table file.
 Explanation : 
	Each call to FXBREAD will read the data from one column and one row
	from the FITS data file, which should already have been opened by
	FXBOPEN.  One needs to call this routine for every column and every row
	in the binary table.  FXBCLOSE will then close the FITS data file.
 Use         : 
	FXBREAD, UNIT, DATA, COL  [, ROW ]
 Inputs      : 
	UNIT	= Logical unit number corresponding to the file containing the
		  binary table.
	COL	= Column in the binary table to read data from, either as a
		  character string containing a column label (TTYPE), or as a
		  numerical column index starting from column one.
 Opt. Inputs : 
	ROW	= Either row number in the binary table to read data from,
		  starting from row one, or a two element array containing a
		  range of row numbers to read.  If not passed, then the entire
		  column is read in.

		  Row must be passed for variable length arrays.

 Outputs     : 
	DATA	= IDL data array to be read from the file.
 Opt. Outputs: 
	None.
 Keywords    : 
	NOSCALE	= If set, then the ouput data will not be scaled using the
		  optional TSCAL and TZERO keywords in the FITS header.
		  Default is to scale.
	VIRTUAL	= If set, and COL is passed as a name rather than a number,
		  then if the program can't find a column with that name, it
		  will then look for a keyword with that name in the header.
		  Such a keyword would then act as a "virtual column", with the
		  same value for every row.
	DIMENSIONS = Vector array containing the dimensions to be used to read
		  in the data.  Bypasses any dimensioning information stored in
		  the header.  Ignored for bit arrays.  If the data type is
		  double-precision complex, then an extra dimension of 2 is
		  prepended to the dimensions passed by the user.
	NANVALUE= Value signalling data dropout.  All points corresponding to
		  IEEE NaN (not-a-number) are converted to this number.
		  Ignored unless DATA is of type float, double-precision or
		  complex.
	ERRMSG	= If defined and passed, then any error messages will be
		  returned to the user in this parameter rather than
		  depending on the MESSAGE routine in IDL.  If no errors are
		  encountered, then a null string is returned.  In order to
		  use this feature, ERRMSG must be defined first, e.g.

			ERRMSG = ''
			FXBREAD, ERRMSG=ERRMSG, ...
			IF ERRMSG NE '' THEN ...

 Calls       : 
	IEEE_TO_HOST, FXPAR, WHERENAN
 Common      : 
	Uses common block FXBINTABLE--see "fxbintable.pro" for more
	information.
 Restrictions: 
	The binary table file must have been opened with FXBOPEN.

	The data must be consistent with the column definition in the binary
	table header.

	The row number must be consistent with the number of rows stored in the
	binary table header.

	The number of elements implied by the dimensions keyword must not
	exceed the number of elements stored in the file.

 Side effects: 
	If the DIMENSIONS keyword is used, then the number of data points read
	in may be less than the number of points stored in the table.

	If there are no elements to read in (the number of elements is zero),
	then the program sets !ERR to -1, and DATA is unmodified.

 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	W. Thompson, Jan 1992.
	W. Thompson, Feb 1992, modified to support variable length arrays.
	W. Thompson, Jun 1992, modified way that row ranges are read in.  No
			       longer works reiteratively.
	W. Thompson, Jun 1992, fixed bug where NANVALUE would be modified by
			       TSCAL and TZERO keywords.
	W. Thompson, Jun 1992, fixed bug when reading character strings.
			       Treats dimensions better when reading multiple
			       rows.
 Written     : 
	William Thompson, GSFC, January 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 30 June 1993.
		Added overwrite keyword to REFORM call to speed up.
	Version 3, William Thompson, GSFC, 21 July 1993.
		Fixed bug with variable length arrays.
	Version 4, William Thompson, GSFC, 29 October 1993.
		Added error message for not finding column by name.
	Version 5, William Thompson, GSFC, 31 May 1994
		Added ERRMSG keyword.
       Version 6, William Thompson, GSFC, 23 June 1994
               Modified so that ERRMSG is not touched if not defined.
	Version 7, William Thompson, GSFC, 29 December 1994
		Fixed bug where single element dimensions were lost.
	Version 8, William Thompson, GSFC, 20 March 1995
		Fixed bug introduced in version 7.
 Version     :
       Version 8, 20 March 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	FXBSTATE()

 Purpose     :	Returns the state of a FITS binary table.

 Explanation :	This procedure returns the state of a FITS binary table that
		was either opened for read with the command FXBOPEN, or for
		write with the command FXBCREATE.

 Use         :	Result = FXBSTATE(UNIT)

 Inputs      :	UNIT	= Logical unit number returned by FXBOPEN routine.
			  Must be a scalar integer.

 Opt. Inputs :	None.

 Outputs     :	The result of the function is the state of the FITS binary
		table that UNIT points to.  This can be one of three values:

			0 = Closed
			1 = Open for read
			2 = Open for write

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	FXBFINDLUN

 Common      :	Uses common block FXBINTABLE--see "fxbintable.pro" for more
		information.

 Restrictions:	None.

 Side effects:	If UNIT is an undefined variable, then 0 (closed) is returned.

 Category    :	Data Handling, I/O, FITS, Generic.

 Prev. Hist. :	None.

 Written     :	William Thompson, GSFC, 1 July 1993.

 Modified    :	Version 1, William Thompson, GSFC, 1 July 1993.

 Version     :	Version 1, 1 July 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXBTDIM()
 Purpose     : 
	Parse TDIM-like kwywords.
 Explanation : 
	Parses the value of a TDIM-like keyword (e.g. TDIMnnn, TDESC, etc.) to
	return the separate elements contained within.
 Use         : 
	Result = FXBTDIM( TDIM_KEYWORD )
 Inputs      : 
	TDIM_KEYWORD	= The value of a TDIM-like keyword.  Must be a
			  character string of the form "(value1,value2,...)".
			  If the parentheses characters are missing, then the
			  string is simply returned as is, without any further
			  processing.
 Opt. Inputs : 
	None.
 Outputs     : 
	The result of the function is a character string array containing the
	values contained within the keyword parameter.  If a numerical result
	is desired, then simply call, e.g.

		Result = FIX( FXBTDIM( TDIM_KEYWORD ))

 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	GETTOK
 Common      : 
	None.
 Restrictions: 
	The input parameter must have the proper format.  The separate values
	must not contain the comma character.  TDIM_KEYWORD must not be an
	array.
 Side effects: 
	None.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	William Thompson, Jan. 1992.
	William Thompson, Jan. 1993, renamed to be compatible with DOS
		limitations.
 Written     : 
	William Thompson, GSFC, January 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 April 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXBTFORM
 Purpose     : 
	Returns information about FITS binary table columns.
 Explanation : 
	Procedure to return information about the format of the various columns
	in a FITS binary table.
 Use         : 
	FXBTFORM,HEADER,TBCOL,IDLTYPE,FORMAT,NUMVAL,MAXVAL
 Inputs      : 
	HEADER	= Fits binary table header.
 Opt. Inputs : 
	None.
 Outputs     : 
	TBCOL	= Array of starting column positions in bytes.
	IDLTYPE	= IDL data types of columns.
	FORMAT	= Character code defining the data types of the columns.
	NUMVAL	= Number of elements of the data arrays in the columns.
	MAXVAL	= Maximum number of elements for columns containing variable
		  length arrays, or zero otherwise.
 Opt. Outputs: 
	None.
 Keywords    : 
	ERRMSG	  = If defined and passed, then any error messages will be
		    returned to the user in this parameter rather than
		    depending on the MESSAGE routine in IDL.  If no errors are
		    encountered, then a null string is returned.  In order to
		    use this feature, ERRMSG must be defined first, e.g.

			ERRMSG = ''
			FXBTFORM, ERRMSG=ERRMSG, ...
			IF ERRMSG NE '' THEN ...

 Calls       : 
	FXPAR
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	None.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	W. Thompson, Feb. 1992, from TBINFO by D. Lindler.
	W. Thompson, Jan. 1993, renamed to be compatible with DOS limitations.
 Written     : 
	William Thompson, GSFC, February 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 21 June 1994
		Added ERRMSG keyword.
       Version 3, William Thompson, GSFC, 23 June 1994
               Modified so that ERRMSG is not touched if not defined.
 Version     :
       Version 3, 23 June 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXBWRITE
 Purpose     : 
	Write a binary data array to a disk FITS binary table file.
 Explanation : 
	Each call to FXBWRITE will write to the data file, which should already
	have been created and opened by FXBCREATE.  One needs to call this
	routine for every column and every row in the binary table.  FXBFINISH
	will then close the file.
 Use         : 
	FXBWRITE, UNIT, DATA, COL, ROW
 Inputs      : 
	UNIT	= Logical unit number corresponding to the file containing the
		  binary table.
	DATA	= IDL data array to be written to the file.
	COL	= Column in the binary table to place data in, starting from
		  column one.
	ROW	= Row in the binary table to place data in, starting from row
		  one.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	BIT	= Number of bits in bit mask arrays (type "X").  Only used if
		  the column is of variable size.
	NANVALUE= Value signalling data dropout.  All points corresponding to
		  this value are set to be IEEE NaN (not-a-number).  Ignored
		  unless DATA is of type float, double-precision or complex.
	ERRMSG	= If defined and passed, then any error messages will be
		  returned to the user in this parameter rather than
		  depending on the MESSAGE routine in IDL.  If no errors are
		  encountered, then a null string is returned.  In order to
		  use this feature, ERRMSG must be defined first, e.g.

			ERRMSG = ''
			FXBWRITE, ERRMSG=ERRMSG, ...
			IF ERRMSG NE '' THEN ...

 Calls       : 
	HOST_TO_IEEE
 Common      : 
	Uses common block FXBINTABLE--see "fxbintable.pro" for more
	information.
 Restrictions: 
	The binary table file must have been opened with FXBCREATE.

	The data must be consistent with the column definition in the binary
	table header.

	The row number must be consistent with the number of rows stored in the
	binary table header.

 Side effects: 
	None.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	W. Thompson, Jan 1992, based on WRITEFITS by J. Woffard and W. Landsman.
	W. Thompson, Feb 1992, modified to support variable length arrays.
	W. Thompson, Feb 1992, removed all references to temporary files.
 Written     : 
	William Thompson, GSFC, January 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 21 July 1993.
		Fixed bug with variable length arrays.
	Version 3, William Thompson, GSFC, 31 May 1994
		Added ERRMSG keyword.
       Version 4, William Thompson, GSFC, 23 June 1994
               Modified so that ERRMSG is not touched if not defined.
 Version     :
       Version 4, 23 June 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXFINDEND
 Purpose     : 
	Find the end of a FITS file.
 Explanation : 
	This routine finds the end of the last logical record in a FITS file,
	which may be different from that of the physical end of the file.  Each
	FITS header is read in and parsed, and the file pointer is moved to
	where the next FITS extension header would be if there is one, or to
	the end of the file if not.
 Use         : 
	FXFINDEND, UNIT
 Inputs      : 
	UNIT	= Logical unit number for the opened file.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	FXHREAD, FXPAR
 Common      : 
	None.
 Restrictions: 
	The file must have been opened for block I/O.  There must not be any
	FITS "special records" at the end of the file.
 Side effects: 
	None.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	William Thompson, Feb. 1992.
 Written     : 
	William Thompson, GSFC, February 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 April 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXHCLEAN
 Purpose     : 
	Removes required keywords from FITS header.
 Explanation : 
	Removes any keywords relevant to array structure from a FITS header,
	preparatory to recreating it with the proper values.
 Use         : 
	FXHCLEAN, HEADER
 Inputs      : 
	HEADER	= FITS header to be cleaned.
 Opt. Inputs : 
	None.
 Outputs     : 
	HEADER	= The cleaned FITS header is returned in place of the input
		  array.
 Opt. Outputs: 
	None.
 Keywords    : 
	ERRMSG	= If defined and passed, then any error messages will be
		  returned to the user in this parameter rather than
		  depending on the MESSAGE routine in IDL.  If no errors are
		  encountered, then a null string is returned.  In order to
		  use this feature, ERRMSG must be defined first, e.g.

			ERRMSG = ''
			FXHCLEAN, ERRMSG=ERRMSG, ...
			IF ERRMSG NE '' THEN ...

 Calls       : 
	SXDELPAR, FXPAR
 Common      : 
	None.
 Restrictions: 
	HEADER must be a string array containing a properly formatted FITS
	header.
 Side effects: 
	Warning:  when cleaning a binary table extension header, not all of the
	keywords pertaining to columns in the table may be removed.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	William Thompson, Jan 1992.
 Written     : 
	William Thompson, GSFC, January 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 31 May 1994
		Added ERRMSG keyword.
       Version 3, William Thompson, GSFC, 23 June 1994
               Modified so that ERRMSG is not touched if not defined.
	Version 4, William Thompson, GSFC, 30 December 1994
		Added TCUNIn to list of column keywords to be removed.
 Version     :
       Version 4, 30 December 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXHMAKE
 Purpose     : 
	Create a basic FITS header array.
 Explanation : 
	Creates a basic header array with all the required keywords.  This
	defines a basic structure which can then be added to or modified by
	other routines.
 Use         : 
	FXHMAKE, HEADER  [, DATA ]
 Inputs      : 
	None required.
 Opt. Inputs : 
	DATA	= IDL data array to be written to file in the primary data unit
		  (not in an extension).  This is used to determine the values
		  of the BITPIX and NAXIS, etc. keywords.

		  If not passed, then BITPIX is set to eight, NAXIS is set to
		  zero, and no NAXISnnn keywords are included in this
		  preliminary header.
 Outputs     : 
	HEADER = String array containing FITS header.
 Opt. Outputs: 
	None.
 Keywords    : 
	INITIALIZE = If set, then the header is completely initialized, and any
		     previous entries are lost.
	EXTEND	= If set, then the keyword EXTEND is inserted into the file,
		  with the value of "T" (true).
	DATE	= If set, then the DATE keyword is added to the header.
	ERRMSG	= If defined and passed, then any error messages will be
		  returned to the user in this parameter rather than
		  depending on the MESSAGE routine in IDL.  If no errors are
		  encountered, then a null string is returned.  In order to
		  use this feature, ERRMSG must be defined first, e.g.

			ERRMSG = ''
			FXHMAKE, ERRMSG=ERRMSG, ...
			IF ERRMSG NE '' THEN ...

 Calls       : 
	GET_DATE, FXADDPAR, FXHCLEAN
 Common      : 
	None.
 Restrictions: 
	Groups are not currently supported.
 Side effects: 
	BITPIX, NAXIS, etc. are defined such that complex arrays are stored as
	floating point, with an extra first dimension of two elements (real and
	imaginary parts).
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	William Thompson, Jan 1992, from FXHMAKE by D. Lindler and M. Greason.
	Differences include:

		* Use of FITS standard (negative BITPIX) to signal floating
		  point numbers instead of (SDAS/Geis) DATATYPE keyword.
		* Storage of complex numbers as pairs of real numbers.
		* Support for EXTEND keyword, and for cases where there is no
		  primary data array.
		* Insertion of DATE record made optional.  Only required FITS
		  keywords are inserted automatically.
 Written     : 
	William Thompson, GSFC, January 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 21 June 1994
		Added ERRMSG keyword.
       Version 3, William Thompson, GSFC, 23 June 1994
               Modified so that ERRMSG is not touched if not defined.
 Version     :
       Version 3, 23 June 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXHMODIFY
 Purpose     : 
	Modify a FITS header in a file on disk.
 Explanation : 
	Opens a FITS file, and adds or modifies a parameter in the FITS header.
	Can be used for either the main header, or for an extension header. 
	The modification is performed directly on the disk file.
 Use         : 
	FXHMODIFY, FILENAME, NAME, VALUE, COMMENT
 Inputs      : 
	FILENAME = String containing the name of the file to be read.

	NAME	= Name of parameter.  If NAME is already in the header the
		  value and possibly comment fields are modified. Otherwise a
		  new record is added to the header.  If NAME is equal to
		  either "COMMENT" or "HISTORY" then the value will be added to
		  the record without replacement.  In this case the comment
		  parameter is ignored.

	VALUE	= Value for parameter.  The value expression must be of the
		  correct type, e.g. integer, floating or string.  String
		  values of 'T'	or 'F' are considered logical values.

 Opt. Inputs : 
	COMMENT	= String field.  The '/' is added by this routine.  Added
		  starting in position 31.  If not supplied, or set equal to ''
		  (the null string), then any previous comment field in the
		  header for that keyword is retained (when found).
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	EXTENSION = Either the number of the FITS extension, starting with the
		    first extension after the primary data unit being one; or a
		    character string containing the value of EXTNAME to search
		    for.  If not passed, then the primary FITS header is
		    modified.           

	BEFORE	= Keyword string name.  The parameter will be placed before the
		  location of this keyword.  For example, if BEFORE='HISTORY'
		  then the parameter will be placed before the first history
		  location.  This applies only when adding a new keyword;
		  keywords already in the header are kept in the same position.

	AFTER	= Same as BEFORE, but the parameter will be placed after the
		  location of this keyword.  This keyword takes precedence over
		  BEFORE.

       FORMAT	= Specifies FORTRAN-like format for parameter, e.g. "F7.3".  A
		  scalar string should be used.  For complex numbers the format
		  should be defined so that it can be applied separately to the
		  real and imaginary parts.
	ERRMSG	= If defined and passed, then any error messages will be
		  returned to the user in this parameter rather than
		  depending on the MESSAGE routine in IDL.  If no errors are
		  encountered, then a null string is returned.  In order to
		  use this feature, ERRMSG must be defined first, e.g.

			ERRMSG = ''
			FXHMODIFY, ERRMSG=ERRMSG, ...
			IF ERRMSG NE '' THEN ...

 Calls       : 
	FXHREAD, FXPAR, FXADDPAR
 Common      : 
	None.
 Restrictions: 
	Adding records to a FITS header is not allowed if it would increase the
	number of 2880 byte records needed to store the header.  Modifying
	existing records is always allowed.

	This routine can not be used to modify any of the keywords that control
	the structure of the FITS file, e.g. BITPIX, NAXIS, PCOUNT, etc.  Doing
	so could corrupt the readability of the FITS file.

 Side effects: 
	None.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	None.
 Written     : 
	William Thompson, GSFC, 3 March 1994.
 Modified    : 
	Version 1, William Thompson, GSFC, 3 March 1994.
	Version 2, William Thompson, GSFC, 31 May 1994
		Added ERRMSG keyword.
       Version 3, William Thompson, GSFC, 23 June 1994
               Modified so that ERRMSG is not touched if not defined.
 Version     :
       Version 3, 23 June 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXHREAD
 Purpose     : 
       Reads a FITS header from an opened disk file.
 Explanation : 
       Reads a FITS header from an opened disk file.
 Use         : 
	FXHREAD, UNIT, HEADER  [, STATUS ]
 Inputs      : 
	UNIT	= Logical unit number.
 Opt. Inputs : 

 Outputs     : 
	HEADER	= String array containing the FITS header.
 Opt. Outputs: 
	STATUS	= Condition code giving the status of the read.  Normally, this
		  is zero, but is set to !ERR if an error occurs, or if the
		  first byte of the header is zero (ASCII null).
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	The file must already be positioned at the start of the header.  It
	must be a proper FITS file.
 Side effects: 
	The file ends by being positioned at the end of the FITS header, unless
	an error occurs.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	W. Thompson, Feb 1992, from READFITS by J. Woffard and W. Landsman.
	W. Thompson, Aug 1992, added test for SIMPLE keyword.
 Written     : 
	William Thompson, GSFC, February 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 April 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXPAR()
 Purpose     : 
	Obtain the value of a parameter in a FITS header.
 Explanation : 
	The first 8 chacters of each element of HDR are searched for a match to
	NAME.  If the keyword is one of those allowed to take multiple values
	("HISTORY", "COMMENT", or "        " (blank)), then the value is taken
	as the next 72 characters.  Otherwise, it is assumed that the next
	character is "=", and the value (and optional comment) is then parsed
	from the last 71 characters.  An error occurs if there is no parameter
	with the given name.

	Complex numbers are recognized as two numbers separated by one or more
	space characters.

	If a numeric value has no decimal point (or E or D) it is returned as
	type LONG.  If it contains more than 8 numerals, or contains the
	character 'D', then it is returned as type DOUBLE.  Otherwise it is
	returned as type FLOAT
 Use         : 
	Result = FXPAR( HDR, NAME  [, ABORT ] )

	Result = FXPAR(HEADER,'DATE')		;Finds the value of DATE
	Result = FXPAR(HEADER,'NAXIS*')		;Returns array dimensions as
						;vector
 Inputs      : 
	HDR	= FITS header string array (e.g. as returned by FXREAD).  Each
		  element should have a length of 80 characters
	NAME	= String name of the parameter to return.  If NAME is of the
		  form 'keyword*' then an array is returned containing values
		  of keywordN where N is an integer.  The value of keywordN
		  will be placed in RESULT(N-1).  The data type of RESULT will
		  be the type of the first valid match of keywordN found.
 Opt. Inputs : 
	ABORT	= String specifying that FXPAR should do a RETALL if a
		  parameter is not found.  ABORT should contain a string to be
		  printed if the keyword parameter is not found.  If not
		  supplied, FXPAR will return with a negative !err if a keyword
		  is not found.
 Outputs     : 
	The returned value of the function is the value(s) associated with the
	requested keyword in the header array.

	If the parameter is complex, double precision, floating point, long or
	string, then the result is of that type.  Apostrophes are stripped from
	strings.  If the parameter is logical, 1 is returned for T, and 0 is
	returned for F.

	If NAME was of form 'keyword*' then a vector of values are returned.
 Opt. Outputs: 
	None.
 Keywords    : 
	COUNT	= Optional keyword to return a value equal to the number of
		  parameters found by FXPAR.
	COMMENTS= Array of comments associated with the returned values.
 Calls       : 
	GETTOK, VALID_NUM
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	Keyword COUNT returns the number of parameters found.

	The system variable !err is set to -1 if parameter not found, 0 for a
	scalar value returned.  If a vector is returned it is set to the number
	of keyword matches found.

	If a keyword occurs more than once in a header, a warning is given,
	and the first occurence is used.  However, if the keyword is "HISTORY",
	"COMMENT", or "        " (blank), then multiple values are returned.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	DMS, May, 1983, Written.
	D. Lindler Jan 90 added ABORT input parameter
	J. Isensee Jul,90 added COUNT keyword
	W. Thompson, Feb. 1992, added support for FITS complex values.
	W. Thompson, Oct. 1992, rewrote to change strategy for extracting
		values to allow for non-standard formats and renamed to FXPAR.
		Added COMMENT keyword.
 Written     : 
	David M. Stern, RSI, May 1983.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 14 October 1994
		Modified to use VALID_NUM instead of STRNUMBER.  Inserted
		additional call to VALID_NUM to trap cases where character
		strings did not contain quotation marks.
	Version 3, William Thompson, GSFC, 22 December 1994
		Fixed bug with blank keywords, following suggestion by Wayne
		Landsman.
 Version     : 
	Version 2, 14 October 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXPARPOS()
 Purpose     : 
	Finds position to insert record into FITS header.
 Explanation : 
	Finds the position to insert a record into a FITS header.  Called from
	FXADDPAR.
 Use         : 
	Result = FXPARPOS(KEYWRD, IEND  [, BEFORE=BEFORE ]  [, AFTER=AFTER ])
 Inputs      : 
	KEYWRD	= Array of eight-character keywords in header.
	IEND	= Position of END keyword.
 Opt. Inputs : 
	None.
 Outputs     : 
	Result of function is position to insert record.
 Opt. Outputs: 
	None.
 Keywords    : 
	BEFORE	= Keyword string name.  The parameter will be placed before the
		  location of this keyword.  For example, if BEFORE='HISTORY'
		  then the parameter will be placed before the first history
		  location.  This applies only when adding a new keyword;
		  keywords already in the header are kept in the same position.

	AFTER	= Same as BEFORE, but the parameter will be placed after the
		  location of this keyword.  This keyword takes precedence over
		  BEFORE.

	If neither BEFORE or AFTER keywords are passed, then IEND is returned.

 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	KEYWRD and IEND must be consistent with the relevant FITS header.
 Side effects: 
	None.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	William Thompson, Jan 1992.
 Written     : 
	William Thompson, GSFC, January 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 April 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXREAD
 Purpose     : 
	Read basic FITS files.
 Explanation : 
	Read the primary array from a disk FITS file.  Optionally allows the
	user to read in only a subarray and/or every Nth pixel.
 Use         : 
	FXREAD, FILENAME, DATA  [, HEADER  [, I1, I2  [, J1, J2 ]]  [, STEP ]]
 Inputs      : 
	FILENAME = String containing the name of the file to be read.
 Opt. Inputs : 
	I1,I2	 = Data range to read in the first dimension.  If passed, then
		   HEADER must also be passed.  If not passed, or set to 0,0
		   then the entire range is read.
	J1,J2	 = Data range to read in the second dimension.  If passed, then
		   HEADER and I1,J2 must also be passed.  If not passed, or set
		   to 0,0 then the entire range is read.
	STEP	 = Step size to use in reading the data.  If passed, then
		   HEADER must also be passed.  Default value is 1.  Ignored if
		   less than 1.
 Outputs     : 
	DATA	 = Data array to be read from the file.
 Opt. Outputs: 
	HEADER	 = String array containing the header for the FITS file.
 Keywords    : 
	NANVALUE = Value signalling data dropout.  All points corresponding to
		   IEEE NaN (not-a-number) are set to this value.  Ignored
		   unless DATA is of type float or double-precision.
	PROMPT	 = If set, then the optional parameters are prompted for at the
		   keyboard.
	AVERAGE	 = If set, then the array size is reduced by averaging pixels
		   together rather than by subselecting pixels.  Ignored unless
		   STEP is nontrivial.  Note:  this is much slower.
	YSTEP	 = If passed, then STEP is the step size in the 1st dimension,
		   and YSTEP is the step size in the 2nd dimension.  Otherwise,
		   STEP applies to both directions.
	NOSCALE	 = If set, then the output data will not be scaled using the
		   optional BSCALE and BZERO keywords in the FITS header.
		   Default is to scale, if and only if BSCALE and BZERO are
		   present and nontrivial.
	NOUPDATE = If set, then the optional BSCALE and BZERO keywords in the
		   optional HEADER array will not be changed.  The default is
		   to reset these keywords to BSCALE=1, BZERO=0.  Ignored if
		   NOSCALE is set.
	ERRMSG   = If defined and passed, then any error messages will be
		   returned to the user in this parameter rather than
		   depending on the MESSAGE routine in IDL.  If no errors are
		   encountered, then a null string is returned.  In order to
		   use this feature, ERRMSG must be defined first, e.g.

			ERRMSG = ''
			FXREAD, ERRMSG=ERRMSG, ...
			IF ERRMSG NE '' THEN ...

 Calls       : 
	GET_DATE, IEEE_TO_HOST, FXADDPAR, FXHREAD, FXPAR, WHERENAN
 Common      : 
	None.
 Restrictions: 
	Groups are not supported.

	The optional parameters I1, I2, and STEP only work with one or
	two-dimensional arrays.  J1 and J2 only work with two-dimensional
	arrays.

	Use of the AVERAGE keyword is not compatible with arrays with missing
	pixels.

 Side effects: 
	If the keywords BSCALE and BZERO are present in the FITS header, and
	have non-trivial values, then the returned array DATA is formed by the
	equation

			DATA = BSCALE*original + BZERO

	However, this behavior can overridden by using the /NOSCALE keyword.

	If the data is scaled, then the optional HEADER array is changed so
	that BSCALE=1 and BZERO=0.  This is so that these scaling parameters
	are not applied to the data a second time by another routine.  Also,
	history records are added storing the original values of these
	constants.  Note that only the returned array is modified--the header
	in the FITS file itself is untouched.

	If the /NOUPDATE keyword is set, however, then the BSCALE and BZERO
	keywords are not changed.  It is then the user's responsibility to
	ensure that these parameters are not reapplied to the data.  In
	particular, these keywords should not be present in any header when
	writing another FITS file, unless the user wants their values to be
	applied when the file is read back in.  Otherwise, FITS readers will
	read in the wrong values for the data array.

 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	W. Thompson, May 1992, based in part on READFITS by W. Landsman, and
			       STSUB by M. Greason and K. Venkatakrishna.
	W. Thompson, Jun 1992, added code to interpret BSCALE and BZERO
			       records, and added NOSCALE and NOUPDATE
			       keywords.
	W. Thompson, Aug 1992, changed to call FXHREAD, and to add history
			       records for BZERO, BSCALE.
 Written     : 
	William Thompson, GSFC, May 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 17 November 1993.
		Corrected bug with AVERAGE keyword on non-IEEE compatible
		machines.
		Corrected bug with subsampling on VAX machines.
	Version 3, William Thompson, GSFC, 31 May 1994
		Added ERRMSG keyword.
       Version 4, William Thompson, GSFC, 23 June 1994
               Modified so that ERRMSG is not touched if not defined.
 Version     :
       Version 4, 23 June 1994
;-
;+
 Project     : SOHO - CDS

 Name        :	FXTAPEREAD

 Purpose     : Copy FITS files tape to disk with interactive capabilities.

 Explanation :	Copy FITS files from tape onto disk.  Data is left in FITS 
		format, and not converted to SDAS.  For use on VMS (any 
		version) and UNIX running IDL Version 3.1 or later (see 
		Restrictions).

 Use         :	FXTAPEREAD                      ; Prompt for all parameters.

		FXTAPEREAD, UNIT, LIST, KEYWORD, TAPENAME, FNAMES [, XWSTR]

		FXTAPEREAD, 1, INDGEN(5)+1, 'IMAGE'
			; Read the first 5 files on unit 1.  The filenames are
			; taken from the IMAGE keyword.

		FXTAPEREAD, 1, [2,4], '', '', ['GALAXY', 'STAR']
			; Read files 2 and 4 on unit 1.  Create files named
			; GALAXY and STAR.

		FXTAPEREAD, 1, [2,4]
			; Read files 2 and 4, and prompt for filenames.

 Inputs      :	None necessary.

 Opt. Inputs :	Interactive users will normally just type FXTAPEREAD and be 
		prompted for all parameters.  However, the following 
		parameters can be passed directly to FXTAPEREAD:

		UNIT	= Tape unit number (scalar: 0-9).

		LIST	= Vector containing list of file numbers to read.

		KEYWORD	= Scalar string giving a FITS keyword which will be 
			  extracted from the headers on tape and used for file 
			  names.  Set KEYWORD to the null string '', if such a 
			  keyword is not to be used.

		TAPENAME= Scalar string giving a name for the tape.  Filenames 
			  will be constructed by concatenating TAPENAME with 
			  the file number.  TAPENAME is used only if KEYWORD 
			  is passed as the null string ''.

		FNAMES	= Vector string giving a file name for each file 
			  number given in LIST.  FNAMES is used only if both 
			  KEYWORD = '' and TAPENAME = ''.  Spaces are trimmed 
			  from names in FNAMES.

		XWSTR	= A string array that contains informational text 
			  concerning tape reading events.  These strings are 
			  printed either to the screen or to the FILENAME 
			  widget (internally called XWIDGET) created by the 
			  XWINTAPE procedure.

 Outputs     :	None.

 Opt. Outputs:	FNAMES	= If KEYWORD or TAPENAME is set to a non-null string, 
			  then the filename created by FXTPIO_READ is stored 
			  in this variable to be returned to the caller.

		XWSTR	= A string array that contains informational text 
			  concerning tape reading events.  These strings are 
			  printed either to the screen or to the FILENAME 
			  widget (internally called XWIDGET) created by the 
			  XWINTAPE procedure.  Note that FXTAPEREAD adds
			  strings to this array and passes them back to the
			  caller.

 Keywords    :	ERRMSG	= If defined and passed, then any error messages will
			  be returned to the user in this parameter rather 
			  than being handled by the IDL MESSAGE utility.  If
			  no errors are encountered, then a null string is
			  returned.  In order to use this feature, the string
			  ERRMSG must be defined first, e.g.,

				ERRMSG = ''
				FXTAPEREAD, 1, INDGEN(5)+1, 'IMAGE', $
					ERRMSG=ERRMSG
				IF ERRMSG(0) NE '' THEN ...

		NOSUFFIX = Normally FXTAPEREAD (via FXTPIO_READ) will 
			  automatically append a ".fits" to the end of a 
			  passed file name.  Setting this keyword prevents
			  that from happening.

		SFDU	= This keyword tells this routine that the first file
			  on the tape is an SFDU header file (defined to be
			  tape file number 0).  If this keyword is set, then
			  the first file on the tape is skipped after the
			  initial rewind is preformed.

		XWIDGET	= This keyword tells this routine that an X-window
			  widget (i.e., XWINTAPE) is driving this program.
			  If this is the case, any informational messages
			  generated from this routine will be displayed in the
			  widget instead of the screen.

 Calls       :	DATATYPE, FITSTAPE, GETFILES, FXTPIO_READ

 Common      :	None.

 Restrictions:	Supported under VMS and (NOW) under UNIX running IDL Versions
		3.1 or later when the UNIX versions of TAPRD, TAPWRT, etc. are
		included in a user library directory.

 Side effects:	FXTAPEREAD will always rewind the tape before processing.

		The FITS file is copied over record by record with no 
		conversion, until the <end-of-file> marker is reached.  No 
		testing is done of the validity of the FITS file.

		Images are NOT converted using BSCALE and BZERO factors in the 
		header.

		For each tape file a FITS disk file will be created with the 
		name "<name>.FITS" unless /NOSUFFIX has been set..

 Category    :	Data Handling, I/O, FITS, Generic.

 Prev. Hist. :	William Thompson, March 1992, from FITSRD by D. Lindler.
		William Thompson, May 1992, fixed TPOS bug when reading 
			multiple files.
		William Thompson, Jan. 1993, changed for renamed FXTPIO_READ.

 Written     :	William Thompson, GSFC, March 1992.

 Modified    :	Version 1, William Thompson, GSFC, 12 April 1993.
			Incorporated into CDS library.
		Version 2, Donald G. Luttermoser, GSFC/ARC, 13 March 1995.
			Added ERRMSG keyword.  Reformatted and modified the
			documentation.
		Version 3, Donald G. Luttermoser, GSFC/ARC, 20 March 1995.
			Added NOSUFFIX & SFDU keyword.
		Version 4, Donald G. Luttermoser, GSFC/ARC, 9 May 1995.
			Added the XWIDGET keyword.

 Version     :	Version 4, 9 May 1995.

;-
;+
 Project     :	SOHO - CDS

 Name        :	FXTAPEWRITE

 Purpose     :	Procedure to copy disk FITS files to tape with interactive 
		capabilities.

 Explanation : Writes the FITS files to tape based upon the parameters 
		inputted or supplied.  If no parameters are supplied, then the 
		user is asked a series of questions to walk him or her through 
		copying a number of FITS files from disk to tape.  

 Use         : FXTAPEWRITE			; Prompt for all parameters.

		FXTAPEWRITE, UNIT, BLFAC, FNAMES, KEYWORD [, XWSTR]

		FXTAPEWRITE, 0, 1, FNAMES
			; Writes all FITS files listed in FNAMES to the tape 
			; associated to UNIT = 0 with 2880 bytes per record.
		FXTAPEWRITE, 1, 3, 'CDS', 'FILENAME'
			; Writes all FITS files beginning with the name 'CDS'
			; to the tape associated to UNIT = 1 with 8640 (2880*3)
			; bytes per record and includes the keyword 'FILENAME'
			; in the FITS header which contains the disk file name 
			; of the file being written.

 Inputs      : None necessary.

 Opt. Inputs : Interactive users will normally just type FXTAPEWRITE and be 
		prompted for all parameters.  However, the following 
		parameters can be passed directly to FXTAPEWRITE:

		UNIT	= Tape unit number (integer scalar).

		BLFAC	= Blocking factor (1-10) = # of 2880 byte records per 
			  block.

		FNAMES	= File names (string array).  If in interactive mode, 
			  the file names may either be specified individually, 
			  or a tapename may be specified, and all files in the 
			  form "tapename<number>.FITS" will be written to tape.

		KEYWORD	= Name of a FITS keyword to put file names into.  This 
			  will simplify subsequent reading of the FITS tape, 
			  since individual filenames will not have to be 
			  specified.  If you don't want to put the file names 
			  into the FITS header, then just hit <RETURN> 
			  (interactive mode) or do not pass this parameter.

		XWSTR	= A string array that contains informational text
			  concerning the tape I/O.  These strings are printed
			  either to the screen or to the FILENAME widget (set
			  internally to XWIDGET) if the XWINTAPE procedure is
			  driving this routine.

 Outputs     : None.

 Opt. Outputs: XWSTR	= A string array that contains informational text
			  concerning the tape I/O.  These strings are printed
			  either to the screen or to the FILENAME widget (set
			  internally to XWIDGET) if the XWINTAPE procedure is
			  driving this routine.  Note that FXTAPEWRITE will
			  add strings to this array which is then passed back
			  to the caller.

 Keywords    : XWIDGET	= This keyword tells this FXTAPEWRITE that the XWINTAPE
			  widget procedure is driving this procedure.  If so,
			  then any informational text is printed to the 
			  FILENAME widget (internally set to XWIDGET) created
			  by XWINTAPE.

		ERRMSG	= If defined and passed, then any error messages will 
			  be returned to the user in this parameter rather 
			  than being handled by the IDL MESSAGE utility.  If 
			  no errors are encountered, then a null string is 
			  returned.  In order to use this feature, the string 
			  ERRMSG must be defined first, e.g.,

				ERRMSG = ''
				FXTAPEWRITE, 1, 1, FNAMES, ERRMSG=ERRMSG
				IF ERRMSG(0) NE '' THEN ...

 Calls       : DATATYPE, FITSTAPE, GETFILES, FXTPIO_WRITE

 Common      : None.

 Restrictions:	Supported under VMS and (NOW) under UNIX running IDL Versions 
		3.1 or later when the UNIX versions of TAPRD, TAPWRT, etc. are 
		included in a user library directory.

 Side effects:	Tape is not rewound before files are written.  Tape should be
		positioned with REWIND or SKIPF before calling FXTAPEWRITE.  
		If you want to append new FITS files to a tape, then call 
		TINIT (tape init) to position tape between final double EOF.

 Category    :	Data Handling, I/O, FITS, Generic.

 Prev. Hist. :	William Thompson, March 1992, from FITSWRT by D. Lindler.
		William Thompson, May 1992, removed call to TINIT.
		William Thompson, Jan. 1993, changed for renamed FXTPIO_WRITE.

 Written     :	William Thompson, GSFC, March 1992.

 Modified    :	Version 1, William Thompson, GSFC, 12 April 1993.
			Incorporated into CDS library.
		Version 2, Donald G. Luttermoser, GSFC/ARC, 13 March 1995.
			Included "passed" input parameters and ERRMSG keyword.
			Reformatted and modified the documentation.
		Version 3, Donald G. Luttermoser, GSFC/ARC, 9 May 1995.
			Added the XWIDGET keyword.

 Version     :	Version 2, 9 May 1995.

;-
;+
 Project     :	SOHO - CDS

 Name        :	FXTPIO_READ

 Purpose     :	Copies FITS files from tape to disk -- internal routine.

 Explanation :	Procedure to copy a FITS file from a tape on the specified 
		tape unit to the disk file <name>.FITS (unless the /NOSUFFIX
		keyword has been set).  Data is left in FITS format, and not
		converted to SDAS.  For use on VMS (any version) and UNIX 
		running IDL Version 3.1 or later (see Restrictions).

		The procedure FXTAPEREAD is normally used to read a FITS tape.
		FXTPIO_READ is a procedure call internal to FXTAPEREAD.

 Use         :	FXTPIO_READ, UNIT, NAME
		FXTPIO_READ, UNIT, NAME, KEYWORD

 Inputs      :	UNIT	= Tape unit number (scalar: 0-9).
		NAME	= File name (without an extension, unless /NOSUFFIX is
			   set).

 Opt. Inputs :	KEYWORD	= If supplied and not equal to the null string then 
			  the file name will be taken from the value of the 
			  header keyword specified.

 Outputs     :	NAME	= Name of file if input keyword parameter is supplied.

 Opt. Outputs:	None.

 Keywords    : ERRMSG	= If defined and passed, then any error messages will
			  be returned to the user in this parameter rather
			  than being handled by the IDL MESSAGE utility.  If
			  no errors are encountered, then a null string is
			  returned.  In order to use this feature, the string
			  ERRMSG must be defined first, e.g.,

				ERRMSG = ''
				FXTPIO_READ, 1, NAME, ERRMSG=ERRMSG
				IF ERRMSG(0) NE '' THEN ...

		NOSUFFIX = Normally FXTPIO_READ will automatically append a
			  ".fits" to the end of a passed file name.  Setting
			  this keyword prevents this from happening.

 Calls       :	REMCHAR, FITSTAPE, FXPAR

 Common      :	None.

 Restrictions:	Supported under VMS and (NOW) under UNIX running IDL Versions
		3.1 or later when the UNIX versions of TAPRD, TAPWRT, etc. are
		included in a user library directory.

 Side effects:	The FITS file is copied to a disk file called <name>.FITS 
		(unless the /NOSUFFIX keyword has been set).

		The FITS file is copied over record by record with no 
		conversion, until the end-of-file marker is reached.  No 
		testing is done of the validity of the FITS file.

		Images are NOT converted using BSCALE and BZERO factors in the 
		header.

 Category    :	Data Handling, I/O, FITS, Generic.

 Prev. Hist. :	William Thompson, March 1992, from FITSREAD by D. Lindler, M. 
						Greason, and W. Landsman.
		W. Thompson, May 1992, changed open statement to force 2880 
			byte fixed length records (VMS).  The software here 
			does not depend on this file configuration, but other
			FITS readers might.
		William Thompson, Jan. 1993, renamed to be compatible with DOS 
			file naming limitations.

 Written     :	William Thompson, GSFC, March 1992.

 Modified    :	Version 1, William Thompson, GSFC, 12 April 1993.
			Incorporated into CDS library.
		Version 2, Donald G. Luttermoser, GSFC/ARC, 14 March 1995.
			Added ERRMSG and NOSUFFIX keywords.

 Version     :	Version 2, 14 March 1995.

;-
;+
 Project     : SOHO - CDS

 Name        :	FXTPIO_WRITE

 Purpose     :	Copy FITS files from disk to tape -- internal routine.

 Explanation :	Procedure will copy a disk FITS file to the specified tape 
		unit, at the current tape position.  Used for true disk FITS 
		files, not SDAS/Geis files.  Called by FXTAPEWRITE.

 Use         :	FXTPIO_WRITE, UNIT, FILE
		FXTPIO_WRITE, UNIT, FILE, KEYWORD

 Inputs      :	UNIT	= IDL tape unit number (scalar: 0-9).
		FILE	= Disk FITS file name, with extension.

 Opt. Inputs :	KEYWORD	= Keyword to place file name into.  If not supplied or 
			  equal to the null string '' then the file name is 
			  not put into the header before writing it to tape.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    : ERRMSG	= If defined and passed, then any error messages will
			  be returned to the user in this parameter rather
			  than being handled by the IDL MESSAGE utility.  If
			  no errors are encountered, then a null string is 
			  returned.  In order to use this feature, the string
			  ERRMSG must be defined first, e.g.,

				ERRMSG = ''
				FXTPIO_WRITE, 1, FILE, ERRMSG=ERRMSG
				IF ERRMSG(0) NE '' THEN ...

 Calls       :	REMCHAR, FXHREAD, FXPAR, FDECOMP, FXADDPAR, FITSTAPE

 Common      :	None.

 Restrictions:	Supported under VMS and (NOW) under UNIX running IDL Versions
		3.1 or later when the UNIX versions of TAPRD, TAPWRT, etc. are
		included in a user library directory.

 Side effects:	None.

 Category    :	Data Handling, I/O, FITS, Generic.

 Prev. Hist. :	William Thompson, March 1992, from FITSWRITE by D. Lindler, W.
						Landsman, and M. Greason.
		William Thompson, Jan. 1993, renamed to be compatible with DOS 
						file naming limitations.

 Written     :	William Thompson, GSFC, March 1992.

 Modified    :	Version 1, William Thompson, GSFC, 12 April 1993.
			Incorporated into CDS library.
		Version 2, Donald G. Luttermoser, GSFC/ARC, 14 March 1995.
			Added ERRMSG keyword.  Updated documentation concerning
			UNIX.
		Version 3, Donald G. Luttermoser, GSFC/ARC, 9 May 1995.
			Removed the "PRINT, FILE" line from this routine and
			placed it in FXTAPEWRITE which drives this procedure.

 Version     :	Version 3, 9 May 1995.

;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXWRITE
 Purpose     : 
	Write a disk FITS file.
 Explanation : 
	Creates a disk FITS file and writes a FITS primary header, and
	optionally a primary data array.
 Use         : 
	FXWRITE, FILENAME, HEADER [, DATA ]
 Inputs      : 
	FILENAME = String containing the name of the file to be written.
	HEADER	 = String array containing the header for the FITS file.
 Opt. Inputs : 
	DATA	 = IDL data array to be written to the file.  If not passed,
		   then it is assumed that extensions will be added to the
		   file.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	NANVALUE = Value signalling data dropout.  All points corresponding to
		   this value are set to be IEEE NaN (not-a-number).  Ignored
		   unless DATA is of type float, double-precision or complex.
	NOUPDATE = If set, then the optional BSCALE and BZERO keywords in the
		   HEADER array will not be changed.  The default is to reset
		   these keywords to BSCALE=1, BZERO=0.
	ERRMSG	 = If defined and passed, then any error messages will be
		   returned to the user in this parameter rather than
		   depending on the MESSAGE routine in IDL.  If no errors are
		   encountered, then a null string is returned.  In order to
		   use this feature, ERRMSG must be defined first, e.g.

			ERRMSG = ''
			FXWRITE, ERRMSG=ERRMSG, ...
			IF ERRMSG NE '' THEN ...

 Calls       : 
	CHECK_FITS, GET_DATE, HOST_TO_IEEE, FXADDPAR, FXPAR
 Common      : 
	None.
 Restrictions: 
	If DATA is passed, then HEADER must be consistent with it.  If no data
	array is being written to the file, then HEADER must also be consistent
	with that.  The routine FXHMAKE can be used to create a FITS header.

	If found, then the optional keywords BSCALE and BZERO in the HEADER
	array is changed so that BSCALE=1 and BZERO=0.  This is so that these
	scaling parameters are not applied to the data a second time by another
	routine.  Also, history records are added storing the original values
	of these constants.

	If the /NOUPDATE keyword is set, however, then the BSCALE and BZERO
	keywords are not changed.  The user should then be aware that FITS
	readers will apply these numbers to the data, even if the data is
	already converted to floating point form.

	Groups are not supported.

 Side effects: 
	None.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	W. Thompson, Jan 1992, from WRITEFITS by J. Woffard and W. Landsman.
	Differences include:

		* Made DATA array optional, and HEADER array mandatory.
		* Changed order of HEADER and DATA parameters.
		* No attempt made to fix HEADER array.

	W. Thompson, May 1992, changed open statement to force 2880 byte fixed
			       length records (VMS).  The software here does not
			       depend on this file configuration, but other
			       FITS readers might.
	W. Thompson, Aug 1992, added code to reset BSCALE and BZERO records,
			       and added the NOUPDATE keyword.
 Written     : 
	William Thompson, GSFC, January 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 31 May 1994
		Added ERRMSG keyword.
	Version 3, William Thompson, GSFC, 23 June 1994
		Modified so that ERRMSG is not touched if not defined.
 Version     : 
	Version 3, 23 June 1994
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       GAUSSJ

 PURPOSE:
       Linear equation solution by Gauss-Jordan elimination

 EXPLANATION:
       This is a routine translated from a Fortran subroutine of the
       Numerical Recipes.

 CALLING SEQUENCE:
       GAUSSJ, aa, bb

 INPUTS:
       AA -- Coefficient matrix with N x N elements
       BB -- Constant matrix of N x M elements, containing the M right-hand
             side vectors

       Note: N is number of unknown variabled to be solved, and therefore is
             number of linear equations; M is number of vectors (each with N
             elements) on the right-hand side of equations.

 OPTIONAL INPUTS:
       None.

 OUTPUTS:
       SOLUTION -- Corresponding set of solution vectors

 OPTIONAL OUTPUTS:
       INVERTED -- Inversed matrix of input matrix AA

 KEYWORD PARAMETERS:
       None.

 CALLS:
       None.

 COMMON BLOCKS:
       None.

 RESTRICTIONS:
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       Ulitities, numerical

 EXAMPLE:
       To solve for the following linear equation:
          
         | 1 -1  1 |     | -4  |
         | 5 -4  3 | X = | -12 |
         | 2  1  1 |	  | 11  |

       The matrix AA and BB should be: 
          aa = [[1,5,2],[-1,-4,1],[1,3,1]]
          bb = [[-4,-12,11],[15,56,13]]
       and the result will be: 
          bb = [[3,6,-1],[4,-3,8]]

 PREVIOUS HISTORY:
       Written November 10, 1994, by Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:

 VERSION:
       Version 1, November 10, 1994
;-
;+
 Project     :	SDAC

 Name        : GET_CENT_OFF

 Purpose     : determine pixel offsets for centering widget bases

 Use         : OFFSETS=GET_CENT_OFF(WBASE)

 Inputs      : WBASE = widget base id

 Opt. Inputs : PARENT = ID of parent widget relative to which the
                       offset values are calculated

 Outputs     : OFFSETS=[XOFF,YOFF]

 Opt. Outputs: None.

 Keywords    : VALID = 1 if valid offsets found, 0 otherwise
               WSIZE = [xsize,ysize] of WBASE

 Explanation : 
               Useful for centering pop up text widgets.
               For example: 
               if parent base is defined as w1, then
               widget_control,w2,/realize,tlb_set_xoff=xoff,tlb_set_yoff=yoff
               will center w2 within w1.

 Calls       : None.

 Common      : None.

 Restrictions: WBASE must be valid otherwise [-1,-1] is returned

 Side effects: None.

 Category    : Widgets

 Prev. Hist. : None.

 Written     :	Zarro (ARC/GSFC) 17 April 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	GET_DATE
 Purpose     : 
	Gets date in format used by FITS headers.
 Explanation : 
	Return the current date in DD/MM/YY format.  This is the format
	required by the DATE and DATE-OBS keywords in a FITS header
 Use         : 
	GET_DATE, dte

	Add the current date to the DATE keyword in a FITS header,h

		GET_DATE,dte
		sxaddpar,h,'DATE',dte

 Inputs      : 
	None
 Opt. Inputs : 
	None.
 Outputs     : 
   dte = An eight character scalar string specifying the current day (0-31),
         current month (1-12), and last two digits of the current year
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	None.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	Written      W. Landsman          March 1991
 Written     : 
	Wayne Landsman, GSFC/UIT, March 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 April 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	GET_DFONT()
 Purpose     : 
       Return widget font with size compatible with current device
 Explanation : 
	Useful for selecting fonts to fit into  widgets
 Use         : 
	Result = GET_DFONT(UFONT)
 Inputs      : 
       UFONT = user's optional input fonts (string array)
 Opt. Inputs : 
	None.
 Outputs     :
            DFONT = returned fonts (string array)
 Opt. Outputs: 
	None.
 Keywords    : 
       None.
 Calls       : 
	DEVICE
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	None.
 Category    : 
	Online_help.
 Prev. Hist. : 
       Written Elaine Einfalt (HSTX) May 1992.
 Modified    : 
       Version 1, Dominic Zarro, GSFC, 1 August 1994.
               Corrected some bugs
 Version     : 
	Version 1, 1 August 1994.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : GET_IJ()
               
 Purpose     : Determine (i,j) indices from a 1-d index of values   
               
 Explanation : 
               
 Use         : ij=get_ij(v,nx)
    
 Inputs      : v  = index to convert
               nx = first dimension of 2-d array from which v was derived
               
 Opt. Inputs : None
               
 Outputs     : ij = [i,j] ; i,j indices of v. 
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : MOD

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, numerical
               
 Prev. Hist. : None

 Written     : D M Zarro (ARC) Nov 1992  
               
 Modified    : 

 Version     : Version 1, Nov-92
;-
;+
 Project     : SOHO - CDS

 Name        : 
	GET_IM_KEYWORD
 Purpose     : 
	Gets the value of a SERTS keyword/flag.
 Explanation : 
	Gets the value of KEYWORD.  For use in SERTS image display routines.
	If IM_KEYWORD is not already set, then !IMAGE.Keyword is checked.

	If KEYWORD is already defined, then no action is taken.  Otherwise, if
	!IMAGE.Keyword.SET is set, then KEYWORD is set equal to the value of
	!IMAGE.Keyword.VALUE.

 Use         : 
	GET_IM_KEYWORD, Keyword, !IMAGE.Keyword
 Inputs      : 
	KEYWORD		= Keyword variable to be checked.
	IMAGE_KEYWORD	= Associated element in the !IMAGE structure variable.
 Opt. Inputs : 
	None.
 Outputs     : 
	KEYWORD		= If not already defined, and !IMAGE.Keyword.SET is
			  true, then this is output as the value of
			  !IMAGE.Keyword.VALUE.  Otherwise it retains its
			  current value.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, June 1991.
 Written     : 
	William Thompson, GSFC, June 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 13 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 13 May 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	GET_LEAP_SEC

 Purpose     :	Returns the dates of all known leap seconds.

 Explanation :	The routine returns the Modified Julian Day number of all known
		leap seconds.  The dates are taken from the file
		'leap_seconds.dat' in the directory given by the environment
		variable TIME_CONV.  That file is read in the first time that
		GET_LEAP_SEC is called.  These values are then stored in an
		internal common block for subsequent calls.  The file is also
		reread whenever the current day number changes.

 Use         :	GET_LEAP_SEC, MJD

 Inputs      :	None.

 Opt. Inputs :	None.

 Outputs     :	MJD	= An array containing the Modified Julian Day numbers
			  for all dates on which a leap second was inserted,
			  starting with 31 December 1971.

 Opt. Outputs:	None.

 Keywords    :	ERRMSG	=  If defined and passed, then any error messages 
			   will be returned to the user in this parameter 
			   rather than using the IDL MESSAGE utility.  If no
			   errors are encountered, then a null string is
			   returned.  In order to use this feature, the 
			   string ERRMSG must be defined first, e.g.,

				ERRMSG = ''
				GET_LEAP_SEC, MJD, ERRMSG=ERRMSG
				IF ERRMSG NE '' THEN ...

 Calls       :	FIND_WITH_DEF, GET_UTC

 Common      :	LEAP_SECONDS is an internal common block.

 Restrictions:	This procedure requires a file containing the dates of all leap
		second insertions starting with 31 December 1971.  This file
		must have the name 'leap_seconds.dat', and must be in the
		directory given by the environment variable TIME_CONV.  It must
		be properly updated as new leap seconds are announced.

 Side effects:	None.

 Category    :	Utilities, time.

 Prev. Hist. :	None.

 Written     :	William Thompson, GSFC, 21 September 1993.

 Modified    :	Version 1, William Thompson, GSFC, 21 September 1993.
		Version 2, William Thompson, GSFC, 14 November 1994
			Changed .DAY to .MJD
		Version 3, Donald G. Luttermoser, GSFC/ARC, 20 December 1994
			Added the keyword ERRMSG.
		Version 4, Donald G. Luttermoser, GSFC/ARC, 30 January 1995
			Added ERRMSG keyword to internally called procedures.
			Made the error handling procedures more robust.
		Version 5, William Thompson, GSFC, 15 March 1995
			Changed CDS_TIME to TIME_CONV

 Version     :	Version 5, 15 March 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	GET_LIB()
 Purpose     : 
	Place elements of !PATH into a string array..
 Explanation : 
	Place library and directory elements of !PATH into a string array.
	Used by SCANPATH.
 Use         : 
	Result = GET_LIB()
	Result = GET_LIB( PATH )
 Inputs      : 
	None required.
 Opt. Inputs : 
       PATH = Path name (default is !path).
 Outputs     : 
	Function result is a string array of path elements.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	PATH_EXPAND, GETTOK
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	None.
 Category    : 
	Documentation, Online_help.
 Prev. Hist. : 
       Written DMZ (ARC) April 1991
	William Thompson, Dec 1991, modified to be compatible with UNIX, and
				    with VMS logical names.  Also, to be
				    compatible with changes in SCANPATH
 Written     : 
	D. Zarro, GSFC/SDAC, April 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 23 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 7 May 1993.
		Added IDL for Windows compatibility.
	Version 3, William Thompson, GSFC, 24 September 1993.
		Changed EXPAND_PATH to PATH_EXPAND.
       Version 3.1, Dominic Zarro, GSFC, 1 August 1994.
               Added check for current directory in path.
 Version     : 
	Version 3.1, 1 August 1994.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	GET_MOD()
 Purpose     : 
	Extract list of procedure modules.
 Explanation : 
	Extract list of procedure modules from a library or directory.  Used by
	SCANPATH.
 Use         : 
	Result = GET_MOD(LIB)
 Inputs      : 
	LIB  = Library or directory name.
 Opt. Inputs : 

 Outputs     : 
	Result of function is a string array with each module name.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	BREAK_FILE, LOC_FILE
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	None.
 Category    : 
	Documentation, Online_help.
 Prev. Hist. : 
       Written DMZ (ARC) May 1991
	William Thompson, Dec 1991, modified to be compatible with UNIX.
       DMZ (DEC'92), fixed bug in FINDFILE with long argument lists.
 Written     : 
	D. Zarro, GSFC/SDAC, May 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 23 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 16 June 1993.
		Changed strategy used for text libraries--more robust.
		Added IDL for Windows compatibility.
       Version 3, Dominic Zarro, GSFC, 1 August 1994.
               Changed something, but can't remember what it was
       Version 3.1, Dominic Zarro, GSFC, 1 August 1994.
               Replace spawning of 'ls' by call to LOC_FILE
 Version     : 
	Version 3.1, 1 August 1994.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	GET_PROC()
 Purpose     : 
	Extract procedure from a library or directory.  
 Explanation : 
	This procedure is used by the SCANPATH routine to extract a procedure
	from a VMS text library, or from a directory.
 Use         : 
	Result = GET_PROC(LIB,NAME,TEXT=TEXT, 
			/SEARCH,/LINOS,/BUFFER)
 Inputs      : 
	LIB	= Library name.
	NAME	= Procedure name.
 Opt. Inputs : 
	None.
 Outputs     : 
	The output of the function is a string array with each element being a
	line of code.
 Opt. Outputs: 
	None.
 Keywords    : 
	TEXT 	= Search string.
	SEARCH  = Logical switch to decide whether to search for string in
		  variable TEXT
 UNUSABLE KEYWORDS -- code is in place but modifications to DOC.PRO
		       are needed to pass /LINOS or BUFFER=[n1,n2]
       LINOS   = added line number option
	BUFFER  = 2 element vector indicating display n1 lines before search 
		  string and n2 lines after search string. Only valid if
		  /SEARCH is set
 Calls       : 
	LOC_FILE
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	None.
 Category    : 
	Documentation, Online_help.
 Prev. Hist. : 
       Written DMZ (ARC) May 1991.
	Modified WTT (ARC) Dec 1991, to support UNIX.
       Modified DMZ (ARC) Jul 1992, to speed reading and add extract keyword
       Modified EEE (HSTX) Oct 1992, 1) to find all occurrences of ;+/;_
       			      2) to search for input string
       			      3) to allow BUFFER keyword 
 Written     : 
	D. Zarro, GSFC/SDAC, May 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 23 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 16 June 1993.
		Added IDL for Windows compatibility.
		Modified to avoid conflict with SERTS function named FIND.
       Version 3, Dominic Zarro, GSFC, 1 August 1994.
               Corrected bug in reading from common block 
       Version 3.1, Dominic Zarro (GSFC) 22 August 1994.
               Removed spawning and replace by call to RD_ASCII
       Version 4, Dominic Zarro (GSFC) 22 September 1994.
               Removed lower/upper case forcing if filenames
               (who put that there? - not me)
 Version     : 
	Version 4, 22 September 1994.
;-
;+
 Project     :	SOHO - CDS

 Name        :	GET_SCREEN

 Purpose     : 
	return screen scaling parameters for controlling widget
       sizing
 Explanation :

 Use         : GET_SCREEN, space,xpad,ypad,scx,scy

 Inputs      : None.

 Opt. Inputs : None.

 Outputs     : 
       space = pixel spacing between children bases
       xpad,ypad = horizontal and vertical pixel spacing being children 
                   bases and edges of parent base.
       scx,scy = pixel scale factors to rescale screen size in 
                 X- and Y-directions
 Opt. Outputs: None.

 Keywords    : None.

 Procedure   :
       The returned values were derived empirically by
       experimenting with sizing widgets on a 1280 x 1024 pixel screen.
       They can be used as keywords in WIDGET_CONTROL  to produce
       "nice fitting" widgets. IDL can (and will likely) ignore them.
   
 Calls       : None.

 Common      : None.

 Restrictions: None.

 Side effects: None.

 Category    :

 Prev. Hist. : None.

 Written     :	DMZ (ARC) Oct 1993

 Modified    :

 Version     :
;-
;+
 Project     : SOHO - CDS

 Name        : 
	GET_TV_SCALE
 Purpose     : 
	Retrieves information about displayed images.
 Explanation : 
	Retrieves information about images displayed by EXPTV, PUT, and other
	routines, as stored by STORE_TV_SCALE.
 Use         : 
	GET_TV_SCALE, SX, SY, MX, MY, JX, JY  [, DATA ]
 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	SX, SY	= Image size, in data pixels
	MX, MY	= Image size, in screen pixels
	JX, JY	= Position of lower left-hand corner of displayed
			  image, in screen pixels.
 Opt. Outputs: 
	DATA	= Structure variable containing the parameters needed to
		  convert pixel coordinates into data coordinates.
 Keywords    : 
	DISABLE  = If set, then TVSELECT not used.
 Calls       : 
	TVSELECT, TVUNSELECT
 Common      : 
	TV_SCALE contains the passed parameters as a function of graphics
	device, window, and SETIMAGE settings.

	IMAGE_AREA contains switch IMAGE_SET and position IX, NX, IY, NY, from
	SETIMAGE.

 Restrictions: 
	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, May 1992.
 Written     : 
	William Thompson, GSFC, May 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 13 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 13 May 1993.
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:	
       GET_UNIQ_LIST()

 PURPOSE:
       Extract uniq list of string values from a string array

 EXPLANATION:
       This routine examines all elements of a string array, sorts
       these values, gets rid of repeated values and return a new
       string array with uniq values in a sorted order.

 CALLING SEQUENCE: 
       Result = get_uniq_list(str_array)

 INPUTS:
       STR_ARRAY - String array to work with

 OPTIONAL INPUTS: 
       ORIGINAL - Original list

 OUTPUTS:
       RESULT - Extracted string from STR_ARRAY or from input

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS: 
       None.

 CALLS:
       GREP, DATATYPE

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       
 PREVIOUS HISTORY:
       Written May 22, 1995, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 1, created, Liyun Wang, GSFC/ARC, May 22, 1995

 VERSION:
       Version 1, May 22, 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	GET_UTC

 Purpose     :	Gets the current date/time in UTC.

 Explanation :	This procedure uses the IDL SYSTIME() function to calculate
		the current UTC date/time, and formats it into one of the CDS
		standard UTC time formats.  For notes on various time formats,
		see file aaareadme.txt.

 Use         :	GET_UTC, UTC
		GET_UTC, UTC, /EXTERNAL
		GET_UTC, UTC, /CCSDS
		GET_UTC, UTC, /ECS

 Inputs      :	None.

 Opt. Inputs :	None.

 Outputs     :	UTC  = The UTC current calendar time in one of several formats,
		       depending on the keywords passed.

			Internal:  A structure containing the tags:

				MJD:	The Modified Julian Day number.
				TIME:	The time of day, in milliseconds since
					the beginning of the day.

				   Both are long integers.  This is the default
				   format.

			External:  A structure containing the integer tags
				   YEAR, MONTH, DAY, HOUR, MINUTE, SECOND, and
				   MILLISECOND.

			CCSDS:	   An ASCII string containing the UTC time to
				   millisecond accuracy in the format
				   recommended by the Consultative Committee
				   for Space Data Systems (ISO 8601), e.g.

					"1988-01-18T17:20:43.123Z"

			ECS:	   Similar to CCSDS, except that the date has
				   the format:

					"1988/01/18 17:20:43.123"

			VMS:	   The date and time has the format

					"18-JAN-1988 17:20:43.123"

			STIME:	   The date and time has the format

					"18-JAN-1988 17:20:43.12"

				   See UTC2STR for more information

 Opt. Outputs:	None.

 Keywords    :	EXTERNAL = If set, then the output is in external format, as
			   explained above.

		CCSDS	 = If set, then the output is in CCSDS format, as
			   explained above.

		ECS	 = If set, then the output is in ECS format, as
			   explained above.

		VMS	  = If set, then the output will be in VMS format, as
			    described above.

		STIME	  = If set, then the output will be in STIME format, as
			    described above.

		The following keywords are only valid if one of the string
		formats is selected.

		TRUNCATE  = If set, then the time will be truncated to 1 second
			    accuracy.  Note that this is not the same thing as
			    rounding off to the nearest second, but is a
			    rounding down.

		DATE_ONLY = If set, then only the date part of the string is
			    returned.

		TIME_ONLY = If set, then only the time part of the string is
			    returned.

		UPPERCASE = If set, then the month field in either the VMS or
			    STIME format is returned as uppercase.

		The following keyword is always valid.

		ERRMSG   = If defined and passed, then any error messages will
			   be returned to the user in this parameter rather
			   than using the IDL MESSAGE utility.  If no errors
			   are encountered, then a null string is returned.
			   In order to use this feature, the string ERRMSG
			   must be defined first, e.g., 

				ERRMSG = ''
				GET_UTC, UTC, ERRMSG=ERRMSG
				IF ERRMSG NE '' THEN ...


 Calls       :	INT2UTC

 Common      :	None.

 Restrictions:	This routine depends on the behavior of IDL's SYSTIME function.
		Currently, it is believed that this routine will return the
		time in UTC on all properly configured Unix systems.  However,
		the result may be different in other operating systems; e.g. on
		VMS and MacIntosh computers it gives the local time instead.
		It is believed to work correctly in IDL for Windows.

		In order to get around this difficulty, the file
		"local_diff.dat" can be placed in the directory given by the
		environment variable TIME_CONV.  If this file exists, then this
		program will read the value (local-UTC in hours) from this file
		and use it as a correction factor.  For example, for U.S.
		Eastern Standard Time, this file would contain the value -5.
		(See local_diff.pro for more information.)  This means then,
		that this file must contain the correct value, and must be
		updated to reflect changes between standard and daylight
		savings time.

		On the other hand, if the second line in the "local_diff.dat"
		file reads "GMT", then it is assumed that the computer is
		running on GMT instead of local time, and no correction is
		made.

		The accuracy of the time returned by this routine depends on
		that of the computer's system clock.

 Side effects:	None.

 Category    :	Utilities, time.

 Prev. Hist. :	None.  However, the concept of "internal" and "external" time
		is based in part on the Yohkoh software by M. Morrison and G.
		Linford, LPARL.

 Written     :	William Thompson, GSFC, 21 September 1993.

 Modified    :	Version 1, William Thompson, GSFC, 21 September 1993.
		Version 2, William Thompson, GSFC, 3 November 1994
			Added test for "local_diff.dat" file.
		Version 3, William Thompson, GSFC, 14 November 1994
			Added test for "GMT" line in "local_diff.dat" file
			Changed .DAY to .MJD
		Version 4, William Thompson, GSFC, 17 November 1994
			Fixed bug introduced in version 3
		Version 5, William Thompson, GSFC, 20 December 1994
			Added keywords TRUNCATE, DATE_ONLY, TIME_ONLY
		Version 6, Donald G. Luttermoser, GSFC/ARC, 20 December 1994
			Added the keyword ERRMSG.
		Version 7, William Thompson, GSFC, 25 January 1995
			Changed to call intrinsic ROUND instead of NINT.  The
			version of NINT in the Astronomy User's Library doesn't
			automatically select between short and long integers as
			the CDS version does.
		Version 8, Donald G. Luttermoser, GSFC/ARC, 30 January 1995
			Added ERRMSG keyword to internally called procedures.
			Made the error handling procedures more robust.
		Version 9, William Thompson, GSFC, 14 March 1995
			Added keywords VMS, STIME, UPPERCASE
		Version 10, William Thompson, GSFC, 15 March 1995
			Changed CDS_TIME to TIME_CONV

 Version     :	Version 10, 15 March 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	GET_VIEWPORT
 Purpose     : 
	Gets current viewport values, in device coordinates.
 Explanation : 
	Gets the current values of the viewport, in the form of the
	old-fashioned variables !SC1, !SC2, !SC3, and !SC4.  This supports
	those routines that were originally developed for IDL version 1.

	The routine calculates the system variables by generating a dummy plot
	without actually drawing to the screen.

 Use         : 
	GET_VIEWPORT, SC1, SC2, SC3, SC4
 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	SC1, SC2, SC3, SC4 are the device coordinates of the viewport.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	In general, the SERTS graphics devices routines use the special system
	variables !BCOLOR and !ASPECT.  These system variables are defined in
	the procedure DEVICELIB.  It is suggested that the command DEVICELIB be
	placed in the user's IDL_STARTUP file.

 Side effects: 
	None.
 Category    : 
	Utilities, Devices.
 Prev. Hist. : 
	William Thompson, November 1992.
	William Thompson, November 1992, modified to get parameters by
		generating a dummy plot rather than calculating directly, so as
		to be compatible with !P.MULTI.
	William Thompson, December 1992, corrected bug where certain system
		variables were being changed by this routine.
 Written     : 
	William Thompson, GSFC, November 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 27 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 12 January 1994.
		Modified to avoid problems that may arise when !X.STYLE or
		!Y.STYLE is not zero.
 Version     : 
	Version 2, 12 January 1994.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	GETFILES
 Purpose     : 
	Interactively asks for a list of tape file numbers.
 Explanation : 
	This procedure allows you to interatively specify a list of tape files
	by specifying a single file per line or a range of files separated by a
	dash or comma.
 Use         : 
	getfiles,list
 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	LIST - integer array containing file numbers
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	None.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	Written D. Lindler November, 1985
	Converted to Version 2 IDL,  August 1990
 Written     : 
	Don Lindler, GSFC/HRS, November 1985.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 April 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	GETLOG()
 Purpose     :	
	Returns correct logical dir. for given operating system.
 Explanation :	
	Returns the correct logical directory for the given operating system.
	E.G. dat: for vms, $DAT/ for unix.

	The operating system in !version.os is checked. If it equals:

		'vms'		then a ':' is appended.

		else		unix os is assumed and the input string is
				uppercased, a '$' is prepended and a '/' is
				appended.

 Use         :	
	GETLOG,lname

 Inputs      :	
	lname	- the base name of the logical (without special characters).

 Opt. Inputs :	None.

 Outputs     :	
	Returns appropriate string.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	
	Assumes that the created directory logical will have meaning to the host
	operating system.

 Side effects:	None.

 Category    :	Utilities, Operating_System

 Prev. Hist. :	
	Written, JDNeill, May, 1990.
	Modified, JDNeill,Sep, 1990 -- for unix return full path instead of
		just environment variable name.

 Written     :	J. D. Neill, May 1990

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	GETTOK()
 Purpose     : 
	Extracts tokens from strings.
 Explanation : 
	Function to retrieve the first part of the string until the character
	char is encountered.

	If ST is 'abc=999' then gettok(ST,'=') would return 'abc' and ST would
	be left as '999'.

	This routine is included mainly to support older routines that were
	written using it.  Users are encouraged to use the similar routine
	STR_SEP from the IDL User's Library instead for any new routines.

 Use         : 
	Token = GETTOK(ST,CHAR)
 Inputs      : 
	ST	= Scalar string to get token from.  On output the first token
		  is removed from the string.
	CHAR	= Character separating tokens, scalar string
 Opt. Inputs : 
	None.
 Outputs     : 
	The result of the function is the first token in the string, from the
	beginning of the string up to the first instance of the separator
	character.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	The input parameter ST is modified by this routine, so that it has one
	less token in it.
 Category    : 
	Utilities, Strings.
 Prev. Hist. : 
	version 1  by D. Lindler APR,86
	Remove leading blanks    W. Landsman (from JKF)    Aug. 1991
 Written     : 
	Don Lindler, GSFC/HRS, April 1986.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 April 1993.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : GOES2FLUX()
               
 Purpose     : Convert GOES class to flux.
               
 Explanation : Translates string giving GOES class of a flare to flux
               in watts/sq m.
               
 Use         : IDL> Flux = goes2flux(class)
    
 Inputs      : class  -  (string array) GOES class, 
                          eg 'M3.2' or ['M3.2','C1.4']
               
 Opt. Inputs : None
               
 Outputs     : Function returns flux in watts/sq m.
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : None

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 17-oct-94
               
 Modified    : 

 Version     : Version 1, 17-Oct-94
;-
;+
 Project     : SOHO - CDS

 Name        : 
	GOOD_PIXELS()
 Purpose     : 
	Returns all the good (not missing) pixels in an image.
 Explanation : 
	Returns a vector array containing only those pixels that are not equal
	to the missing pixel flag value.  Mainly used for statistical purposes,
	e.g. PLOT_HISTO,GOOD_PIXELS(A).  The missing pixel flag can be set
	either with the MISSING keyword, or with the SETFLAG,MISSING=...
	command.
 Use         : 
	Result = GOOD_PIXELS( ARRAY, <keywords> )
 Inputs      : 
	ARRAY	= Array to be scaled.
 Opt. Inputs : 
	None.
 Outputs     : 
	Result of function is a linear array containing the values of all
	pixels that do not correspond to the missing pixel flag value.
 Opt. Outputs: 
	None.
 Keywords    : 
	MISSING = Value flagging missing pixels.
 Calls       : 
	GET_IM_KEYWORD
 Common      : 
	None.
 Restrictions: 
	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	If no missing pixel flag is set, then the original undisturbed array is
	returned.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, July 1991.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
 Written     : 
	William Thompson, GSFC, July 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 13 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 13 May 1993.
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       GREP()

 PURPOSE:
       Search for string through a string array (cf grep in Perl)

 EXPLANATION:

 CALLING SEQUENCE:
       Result = GREP(str, strarray)

 INPUTS:
       STR      - Target string to be searched for
       STRARRAY - String array over which the string is seached

 OPTIONAL INPUTS:
       None.

 OUTPUTS:
       Result   - String array of elements from STRARRAY which contains
                  the searched string STR. A null string will be returned if
                  no elements in STRARRAY match STR.

 OPTIONAL OUTPUTS:
       INDEX    - Index of elements in STRARRAY which match the target string

 KEYWORD PARAMETERS:
       SENSITIVE  - Make the search pattern case sensitive, if set
       EXACT      - Requires exact match (instead of substring match)

 CALLS:
       DATATYPE

 COMMON BLOCKS:
       None.

 RESTRICTIONS:
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:

 PREVIOUS HISTORY:
       Written December 15, 1994, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 2, Liyun Wang, GSFC/ARC, January 20, 1995
          Added the INDEX keyword

 VERSION:
       Version 2, January 20, 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	HAVE_WIDGETS
 Purpose     : 
	Tests whether current graphics device supports widgets.
 Explanation : 
	The system variable !D.FLAGS is examined to see if the current graphics
	device supports widgets.
 Use         : 
	Result = HAVE_WIDGETS()

	IF HAVE_WIDGETS() THEN ...

 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	The result of the function is either 0 (false) or 1 (true) depending on
	whether or not the current graphics device supports widgets.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	In general, the SERTS graphics devices routines use the special system
	variables !BCOLOR and !ASPECT.  These system variables are defined in
	the procedure DEVICELIB.  It is suggested that the command DEVICELIB be
	placed in the user's IDL_STARTUP file.

 Side effects: 
	None.
 Category    : 
	Utilities, Devices.
 Prev. Hist. : 
	William Thompson, April 1992.
 Written     : 
	William Thompson, GSFC, April 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 27 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 27 April 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	HAVE_WINDOWS
 Purpose     : 
	Tests whether current graphics device supports windows.
 Explanation : 
	The system variable !D.FLAGS is examined to see if the current graphics
	device supports windows.
 Use         : 
	Result = HAVE_WINDOWS()

	IF HAVE_WINDOWS() THEN ...

 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	The result of the function is either 0 (false) or 1 (true) depending on
	whether or not the current graphics device supports windows.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	In general, the SERTS graphics devices routines use the special system
	variables !BCOLOR and !ASPECT.  These system variables are defined in
	the procedure DEVICELIB.  It is suggested that the command DEVICELIB be
	placed in the user's IDL_STARTUP file.

 Side effects: 
	None.
 Category    : 
	Utilities, Devices.
 Prev. Hist. : 
	William Thompson, April 1992.
 Written     : 
	William Thompson, GSFC, April 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 27 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 27 April 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	HEADFITS()

 Purpose     :	Read a FITS file header record      

 Explanation :	Reads a FITS file header record.

 Use         :	Result = headfits( filename ,[ EXTEN = ])

		Example: Read the FITS header of a file 'test.fits' into a
		string variable, h

			IDL>  h = headfits( 'test.fits')

 Inputs      :	FILENAME = String containing the name of the FITS file to be
			   read.

 Opt. Inputs :	None.

 Outputs     :	Result of function = FITS header, string array

 Opt. Outputs:	None.

 Keywords    :	EXTEN  = integer scalar, specifying which FITS extension to
			 read.  For example, to read the header of the first
			 extension set EXTEN = 1.  Default is to read the
			 primary FITS header (EXTEN = 0).

 Calls       :	SXPAR

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, FITS.

 Prev. Hist. :	
	adapted by Frank Varosi from READFITS by Jim Wofford, January, 24 1989
	Keyword EXTEN added, K.Venkatakrishna, May 1992
	Make sure first 8 characters are 'SIMPLE'  W. Landsman October 1993

 Written     :	Frank Varosi, GSFC, 24 January 1989

 Modified    :	Version 1, Liyun Wang, GSFC/ARC, September 19, 1994
			Incorporated into CDS library
		Version 2, William Thompson, GSFC/ARC, 9 January 1995
			Incorporated following change:

	Check PCOUNT and GCOUNT   W. Landsman    December 1994

 Version     :	Version 2, 9 January 1995
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : HEL2ARCMIN()
               
 Purpose     : Compute position relative to sun centre from heliographic.
               
 Explanation : Using the input heliographic coordinates of a feature,
               calculate the position in arcmin relative to the sun centre
               taking account of the sun's orientation (B0).  The current
               date is assumed unless specified.  West and  North are 
               considered positive.
               
 Use         : IDL> print, hel2armin(ns, ew, date = dat)
                eg  print,hel2arcmin('S34','E23')
                or  print,hel2arcmin(-34,-23)
    
 Inputs      : ns      -  the Heliographic latitude in degrees (can be a
                          string with N/S first character instead of sign).
               ew      -  the Heliographic longitude in degrees (can be a
                          string with E/W first character instead of sign).
               
 Opt. Inputs : None
               
 Outputs     : Function returns the (x,y) location in arcmins relative to
               sun disk centre.
               
 Opt. Outputs: None
               
 Keywords    : date    -  the date to use in the calculation of B0.

 Calls       : PB0R
               ANYTIM2UTC

 Restrictions: None
               
 Side effects: None
               
 Category    : Utilities, coordinates.
               
 Prev. Hist. : Yohkoh routine by Hudson/Wuelser.

 Written     : CDS version, C D Pike, RAL, 6 Sept 93
               
 Modified    : To use CDS time and pb0r routines, CDP, 17-May-94
		Version 2, William Thompson, GSFC, 14 November 1994
			Modified .DAY to .MJD

 Version     : Version 3, 14 November 1994
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : HEX2BIN
               
 Purpose     : Convert hexadecimal number to binary representation.
               
 Explanation : The binary representation of a hexadecimal number is calculated
               and can be displayed or returned or both or neither.
               
 Use         : IDL> hex2bin, hexadecimal [, binary, /quiet]
    
 Inputs      : hexadecimal - the number to convert (string).
               
 Opt. Inputs : None
               
 Outputs     : See below
               
 Opt. Outputs: binary - the binary representation of the input.
               
 Keywords    : quiet - unless given the binary number is printed to the
                       terminal

 Calls       : None
               
 Restrictions: Input must be a character string.
               
 Side effects: None
               
 Category    : Utils, Numerical
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 7-Oct-93
               
 Modified    : 

 Version     : Version 1, 7-Oct-93
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : HEX2DEC
               
 Purpose     : Convert hexadecimal representation to decimal integer.
               
 Explanation : A hexadecimal string is converted to a decimal integer and 
               can be displayed or returned or both or neither.
               
 Use         : IDL> hex2dec, hex [, decimal, /quiet]
    
 Inputs      : hex - hexadecimal string

 Opt. Inputs : None
               
 Outputs     : See below
               
 Opt. Outputs: decimal - the decimal integer equivalent of the input.
               
 Keywords    : quiet - unless given the decimal number is printed to the
                       terminal

 Calls       : None
               
 Restrictions: Input must be a string.
               
 Side effects: None
               
 Category    : Utils, Numerical
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 7-Oct-93
               
 Modified    : 

 Version     : Version 1, 7-Oct-93
;-
;+
 Project     : SOHO - CDS

 Name        : 
	HISCAL()
 Purpose     : 
	Performs histogram equalization on an array.
 Explanation : 
	Scales an array such that the histogram of the output array is
	approximately the same for all data values.
 Use         : 
	Result = HISCAL(ARRAY)
 Inputs      : 
	ARRAY	= Array to be scaled.
 Opt. Inputs : 
	None.
 Outputs     : 
	The function returns the scaled array.
 Opt. Outputs: 
	None.
 Keywords    : 
	MISSING	= Value flagging missing pixels.
	MAX	 = The maximum value of IMAGE to be considered in calculating
		   the histogram, as used by HISTOGRAM.  The default is the
		   maximum value of IMAGE.
	MIN	 = The minimum value of IMAGE to be considered in calculating
		   the histogram, as used by HISTOGRAM.  The default is the
		   minimum value of IMAGE.
 Calls       : 
	GET_IM_KEYWORD, GOOD_PIXELS
 Common      : 
	None.
 Restrictions: 
	ARRAY must have some range of values.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., Oct. 1987.
	William Thompson, November 1992, added MISSING, MAX and MIN keywords.
		No longer scales into byte array.
 Written     : 
	William Thompson, GSFC, October 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 13 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 25 May 1993.
		Changed call to HISTOGRAM to be compatible with OpenVMS/ALPHA
 Version     : 
	Version 2, 25 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	HOST_TO_IEEE
 Purpose     : 
	Translate host variables to IEEE format.
 Explanation : 
	Translates an IDL variable in the host architecture into the IEEE-754
	standard (e.g. as used in FITS files).

	BYTEORDER is used to convert from the host format to network format for
	integer arrays or XDR format for floating point arrays.  These are
	equivalent to IEEE format.

 Use         : 
	HOST_TO_IEEE, DATA
 Inputs      : 
	DATA	 = Any IDL variable, scalar or vector.  DATA will be modified
		   by HOST_TO_IEEE to convert it to IEEE format.  Byte and
		   string variables are returned by HOST_TO_IEEE unchanged.
 Opt. Inputs : 
	None.
 Outputs     : 
	The output value of DATA is the variable converted to the format of the
	host architecture.
 Opt. Outputs: 
	None.
 Keywords    : 
	IDLTYPE - scalar integer (1-7) specifying the IDL datatype according
		to the code given by the SIZE function.      This keyword
		will usually be used when suppying a byte array that needs
		to be interpreted as another data type (e.g. FLOAT).
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	Assumes the IDL version is since 2.2.2 when the /XDRTOF keyword 
	became available to BYTEORDER.    There were two bad implementations
	in BYTEORDER for double precision: (1) in IDL V3.* for DecStations
	(!VERSION.ARCH = 'mipsel') and (2) on Dec Alpha OSF machines.
	IEEE_TO_HOST works around these cases by swapping the byte order
	directly.
 Side effects: 
	None.
 Category    : 
	Utilities, Operating_system
 Prev. Hist. : 
	Adapted from CONV_UNIX_VAX, W. Landsman   Hughes/STX    January, 1992
	Fixed Case statement for Float and Double      September, 1992
	Workaround for /DTOXDR on DecStations          January, 1993
	Workaround for /DTOXDR on Alpha OSF            July 1994
	Assume since Version 2.2.2, Ultrix problems persist   November 1994
 Written     : 
	Wayne Landsman, GSFC/UIT, January 1992.
 Modified    : 
	Version 4, William Thompson, GSFC, 27 February 1995
		Using version from IDL Astronomy User's Library for better
		compatibility.  See previous history above.  IDLTYPE keyword
		reinstated.
 Version     : 
	Version 4, 27 February 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	HPRINT
 Purpose     : 
	Prints FITS headers on terminal screen.
 Explanation : 
	Print a FITS header (or any other string array) at the the terminal
	by printing 1 line at a time.
	Needed because IDL Version 2 will add an extra space to the 80
	character FITS lines, causing a space to appear betweeen lines.
 Use         : 
	HPRINT, H
 Inputs      : 
	H - FITS header (or any other string array).
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	HPRINT has the following differences from the intrinsic PRINT procedure

   (1) Arrays are printed one line at a time to avoid a space between 80
       character lines
   (2) Lines are trimmed with STRTRIM before being printed to speed up display
   (3) The /more option is used for output. 
   (4) This version only works in Version 2.1.* or later.

 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	Written W. Landsman             July, 1990
	Added test for user quit       July, 1991
	Added optional FIRSTLINE arguement      November, 1992
	Modifed for Mac IDL, I  Freedman HSTX April 1994        
 Written     : 
	Wayne Landsman, GSFC/UIT, July 1990.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 26 October 1994
		Brought up-to-date with idlastro version.
 Version     : 
	Version 2, 26 October 1994
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       IDL_ROUTINE

 PURPOSE:
       Create a string array of names of all IDL internal routines

 EXPLANATION:
       Called by WHICH (version 3)

 CALLING SEQUENCE:
       IDL_ROUTINE, routine_names

 INPUTS:
       None.

 OPTIONAL INPUTS:
       None.

 OUTPUTS:
       ROUTINE_NAMES -- A string array containing names of all IDL internal
                        routines

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS:
       None.

 CALLS:
       CONCAT_DIR, DELVARX

 COMMON BLOCKS:
       None.

 RESTRICTIONS:
       A text file named 'idl.routines' must be present in a directory of
       IDL's !path.

 SIDE EFFECTS:
       None.

 CATEGORY:

 PREVIOUS HISTORY:
       Written September 21, 1994, by Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:

 VERSION:
       Version 1, September 21, 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	IEEE_TO_HOST
 Purpose     : 
	Translate variables from IEEE to host format.
 Explanation : 
	Translates an IDL variable into the host architecture from the
	IEEE-754 standard (e.g. as used in FITS files).

	BYTEORDER is used to convert to the host format from network format for
	integer arrays or XDR format for floating point arrays.  These are
	equivalent to IEEE format.

 Use         : 
	IEEE_TO_HOST, DATA
 Inputs      : 
	DATA	 = Any IDL variable, scalar or vector.  DATA will be modified
		   by IEEE_TO_HOST to convert it from IEEE format.  Byte and
		   string variables are returned by IEEE_TO_HOST unchanged.
 Opt. Inputs : 
	None.
 Outputs     : 
	The output value of DATA is the variable converted to the format of the
	host architecture.
 Opt. Outputs: 
	None.
 Keywords    : 
	IDLTYPE - scalar integer (1-7) specifying the IDL datatype according
		to the code given by the SIZE function.     This keyword
		is usually when DATA is a byte array to be interpreted as
		another datatype (e.g. FLOAT).
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	Assumes the IDL version is since 2.2.2 when the /XDRTOF keyword 
	became available to BYTEORDER.    There were two bad implementations
	in BYTEORDER for double precision: (1) in IDL V3.* for DecStations
	(!VERSION.ARCH = 'mipsel') and (2) on Dec Alpha OSF machines.
	IEEE_TO_HOST works around these cases by swapping bytes directly
 Side effects: 
	None.
 Category    : 
	Utilities, Operating_system
 Prev. Hist. : 
	Written, W. Landsman   Hughes/STX   May, 1992
	Fixed error Case statement for float and double   September 1992
	Workaround to /XDRTOD problem on DecStations January 1993 
	Assume since Version 2.2, correct double precision problems in 
	Alpha/OSF, implement Ultrix corrections from Tom McGlynn November 1994
 Written     : 
	Wayne Landsman, GSFC/UIT, May 1992.
 Modified    : 
	Version 4, William Thompson, GSFC, 27 February 1995
		Using version from IDL Astronomy User's Library for better
		compatibility.  See previous history above.  IDLTYPE keyword
		reinstated.
 Version     : 
	Version 4, 27 February 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	IM_KEYWORD_SET()
 Purpose     : 
	Checks whether an image display keyword/flag is set.
 Explanation : 
	Decides whether a particular SERTS image display keyword is set, or
	whether the equivalent element in the !IMAGE structure is set.  Use
	this in place of KEYWORD_SET.
 Use         : 
	Result = IM_KEYWORD_SET( Keyword, !IMAGE.Keyword )
 Inputs      : 
	KEYWORD		= Keyword to be checked.
	IMAGE_KEYWORD	= Associated element in the !IMAGE structure variable.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	Should only be used internally to the SERTS image display routines.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, June 1991.
 Written     : 
	William Thompson, GSFC, June 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 13 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 13 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	IMAGELIB
 Purpose     : 
	Defines variables/common blocks for the SERTS IMAGE library.
 Explanation : 
	Adds system variable !IMAGE.
 Use         : 
	IMAGELIB
 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	This routine should be called only once, preferably in the startup
	procedure.  DEVICELIB should also be called, because these routines use
	some of the routines from the graphics devices utilities subdirectory.
 Side effects: 
	System variables may be changed to their default values.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, 5 December 1991.
	WIlliam Thompson, 10 November 1992, added !BCOLOR.
 Written     : 
	William Thompson, GSFC, 5 December 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 23 June 1993.
		Incorporated into CDS library.  Removed overlap with DEVICELIB
		routine.
 Version     : 
	Version 1, 23 June 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	INT2UTC()

 Purpose     :	Converts CDS internal time to calendar format.

 Explanation :	This procedure takes the UTC calendar time in "internal" format
		(Modified Julian Day number, and time of day in milliseconds),
		and converts it to a calendar format, either as a structure or
		as a string.  For notes on other time formats, see file
		aaareadme.txt.

 Use         :	Result = INT2UTC( INT )
		Result = INT2UTC( INT, /CCSDS )
		Result = INT2UTC( INT, /ECS )

 Inputs      :	INT	= The UTC date/time as a data structure with the
			  elements:

				MJD	= The Modified Julian Day number
				TIME	= The time of day, in milliseconds
					  since the start of the day.

			  Both are long integers.

 Opt. Inputs :	None.

 Outputs     :	The result of the function will be a structure containing the
		tag elements YEAR, MONTH, DAY, HOUR, MINUTE, SECOND, and
		MILLISECOND.

		Alternatively, if the CCSDS switch is set, then the result will
		be the calendar date in the format recommended by the
		Consultative Committee for Space Data Systems (ISO 8601), e.g.

			"1988-01-18T17:20:43.123Z"

		Or if the ECS switch is set, then the result will be a calendar
		date in the format used by the EOF Core System, e.g.

			"1988/01/18 17:20:43.123"

		Note that this isn't exactly the ECS string format, because the
		ECS does not use fractional seconds.  However, if /ECS is
		combined with /TRUNCATE, then the following output will result

			"1988/01/18 17:20:43"

		which matches what the ECS expects to see.

		Using the keyword /VMS writes out the time in a format similar
		to that used by the VMS operating system, e.g.

			"18-Jan-1988 17:20:43.123"

		A variation of this is obtained with the /STIME keyword, which
		emulates the value of !STIME in IDL.  It is the same as using
		/VMS except that the time is only output to 0.01 second
		accuracy, e.g.

			"18-Jan-1988 17:20:43.12"

		The keywords /DATE_ONLY and TIME_ONLY can be used to extract
		either the date or time part of the string.

 Opt. Outputs:	None.

 Keywords    :	CCSDS	  = If set, then the output is in CCSDS format, as
			    explained above.

		ECS	  = If set, then the output is in ECS format, as
			    explained above.

		VMS	  = If set, then the output will be in VMS format, as
			    described above.

		STIME	  = If set, then the output will be in STIME format, as
			    described above.

		Only one of the above keywords can be set.  If none of them are
		set, the the time is output in external format.  The following
		keywords are only valid if one of the above keywords is set.

		TRUNCATE  = If set, then the time will be truncated to 1 second
			    accuracy.  Note that this is not the same thing as
			    rounding off to the nearest second, but is a
			    rounding down.

		DATE_ONLY = If set, then only the date part of the string is
			    returned.

		TIME_ONLY = If set, then only the time part of the string is
			    returned.

		UPPERCASE = If set, then the month field in either the VMS or
			    STIME format is returned as uppercase.

		The following keyword is always valid.

		ERRMSG	  = If defined and passed, then any error messages 
			    will be returned to the user in this parameter 
			    rather than being handled by the IDL MESSAGE 
			    utility.  If no errors are encountered, then a null
			    string is returned.  In order to use this feature,
			    the string ERRMSG must be defined first, e.g.,

				ERRMSG = ''
				MJD = INT2UTC ( INT, ERRMSG=ERRMSG )
				IF ERRMSG NE '' THEN ...

 Calls       :	DATATYPE, UTC2STR, MJD2DATE

 Common      :	None.

 Restrictions:	None.

 Side effects:	The result of an array with a single element may be a scalar.
		If an error occurs and the ERRMSG keyword has been set, the
		result returned from INT2UTC is an integer scalar of value -1.

 Category    :	Utilities, Time.

 Prev. Hist. :	None.  However, the concept of "internal" and "external" time
		is based in part on the Yohkoh software by M. Morrison and G.
		Linford, LPARL.

 Written     :	William Thompson, GSFC, 20 September 1993.

 Modified    :	Version 1, William Thompson, GSFC, 21 September 1993.
		Version 2, William Thompson, GSFC, 14 November 1994
			Changed .DAY to .MJD
		Version 3, William Thompson, GSFC, 20 December 1994
			Added keywords TRUNCATE, DATE_ONLY, TIME_ONLY
		Version 4, Donald G. Luttermoser, GSFC/ARC, 28 December 1994
			Added the keyword ERRMSG.  Added check to the structure
			tag names in INT.
		Version 5, William Thompson, GSFC, 25 January 1995
			Changed to call intrinsic ROUND instead of NINT.  The
			version of NINT in the Astronomy User's Library doesn't
			automatically select between short and long integers as
			the CDS version does.
		Version 6, Donald G. Luttermoser, GSFC/ARC, 30 January 1995
			Added ERRMSG keyword to internally called procedures.
			Made the error handling procedure more robust.  Note
			that this routine accepts both scalar and vector 
			input.
		Version 7, William Thompson, GSFC, 14 March 1995
			Added keywords VMS, STIME, UPPERCASE

 Version     :	Version 7, 14 March 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	INT_STRETCH
 Purpose     : 
	Stretch one of two combined intensity color tables.
 Explanation : 
	Stretch one of the two combined image display color tables so the full
	range runs from one color index to another.

	New red, green, and blue vectors are created by linearly interpolating
	the vectors in the COMBINE_COLORS common block from LOW to HIGH.
	Vectors in the COMBINE_COLORS common block are not changed.

	If NO parameters are supplied, the original (lower or upper) color
	tables are restored.

 Use         : 
	INT_STRETCH, LOW, HIGH  [, GAMMA ]

	The following example shows how to put one intensity image I1 using
	color table #3 next to another image I2 using color table #5, and then
	stretch the two color tables independently.
 
	LOADCT,3				;Select first color table
	COMBINE_COLORS,/LOWER			;Save lower color table
	LOADCT,5				;Select second color table
	COMBINE_COLORS				;Combine the color tables
	PUT,I1,1,2,/COMBINED,/LOWER		;Display first image on left
	PUT,I2,2,2,/COMBINED			;And second image on right
	INT_STRETCH,10,150,/LOWER		;Stretch the first color table
	INT_STRETCH,30,200			;Stretch the second

 Inputs      : 
	LOW	= The lowest pixel value to use.  If this parameter is omitted,
		  0 is assumed.  Appropriate values range from 0 to the number
		  of available colors-1.
	HIGH	= The highest pixel value to use.  If this parameter is
		  omitted, the number of colors-1 is assumed.  Appropriate
		  values range from 0 to the number of available colors-1.
 Opt. Inputs : 
	GAMMA	= Gamma correction factor.  If this value is omitted, 1.0 is
		  assumed.  Gamma correction works by raising the color indices
		  to the GAMMA power, assuming they are scaled into the range 0
		  to 1.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	LOWER	= If set, then the lower color table is stretched, rather than
		  the upper one.
	DISABLE	= If set, then TVSELECT is not called.
	CHOP	= If this keyword is set, color values above the upper
		  threshold are set to color index 0.  Normally, values above
		  the upper threshold are set to the maximum color index.
 Calls       : 
	TVSELECT, TVUNSELECT
 Common      : 
	COLORS	    = The common block that contains R, G, and B color tables
		      loaded by LOADCT, HSV, HLS and others.
	COMBINE_COL = The common block containing the upper and lower color
		      tables, as loaded by COMBINE_COLORS.
 Restrictions: 
	The upper and lower color tables must be loaded by COMBINE_COLORS
	before calling INT_STRETCH.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	The values of the current color tables in common block COLORS is
	changed.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, Oct. 1992, from STRETCH by David M. Stern.
 Written     : 
	William Thompson, GSFC, October 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 4 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 4 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	INTERP2()
 Purpose     : 
	Performs a two-dimensional interpolation on IMAGE.
 Explanation : 
	An average is made between the four nearest neighbors of the point to 
	be interpolated to.
 Use         : 
	OUTPUT = INTERP2( IMAGE, X, Y )
 Inputs      : 
	IMAGE	= Image to be interpolated.
	X	= X coordinate position(s) of the interpolated point(s).
	Y	= Y coordinate position(s) of the interpolated point(s).
 Opt. Inputs : 
	None.
 Outputs     : 
	The function returns a one-dimensional array of the interpolated 
	points.
 Opt. Outputs: 
	None.
 Keywords    : 
	MISSING	 = Value flagging missing pixels.  Any such pixels are not
		   included in the interpolation.  If any interpolation point
		   is surrounded only by missing pixels, then the output value
		   for that point is set to MISSING.
 Calls       : 
	GET_IM_KEYWORD
 Common      : 
	None.
 Restrictions: 
	IMAGE must be two-dimensional.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., Oct. 1987.
	W.T.T., Jan. 1991.  Changed FLAG to keyword BADPIXEL.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
	William Thompson, 5 May 1993, fixed bug when Y > first dim. of IMAGE.
 Written     : 
	William Thompson, October 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 13 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 13 May 1993.
;-
;+
 Project     :	SDAC

 Name        :	JOIN_STRUCT

 Purpose     :	join two structures by appending tags

 Explanation :	

 Use         : NEW_STRUCT=JOIN_STRUCT(S1,S2)

 Inputs      :	S1,S2 input structures

 Opt. Inputs :	None.

 Outputs     :	NEW_STRUCT = new structure

 Opt. Outputs:	None.

 Keywords    :	NAME = new name for structure

 Calls       :	ADD_TAG

 Common      :	None.

 Restrictions:	Input structures must have same dimension

 Side effects:	None.

 Category    :	Structure handling

 Prev. Hist. :	None.

 Written     :	Dominic Zarro (ARC)

 Version     :	Version 1.0, 7 November 1994
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       JUSTIFY()

 PURPOSE:
       Make string array right/left/center justified

 EXPLANATION:
       This routine adds necessary space in front of each element of a string
       array to make the string array right/left/center justified.

 CALLING SEQUENCE:
       Result = justify(strings)

 INPUTS:
       STRINGS - A string array

 OPTIONAL INPUTS:
       None.

 OUTPUTS:
       None.

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS:
       RIGHT  - If set, strings will be right justified
       CENTER - If set, strings will be centered
       LEFT   - If set, strings will be left justified; this is default
       MAX_LENGTH - Maximum length of resultant string. If present, the
                    actual maximum length of RESULT will be either
                    MAX_LENGTH or maximum length in STRINGS, whichever is
                    larger. 
 CALLS:
       BLANK

 COMMON BLOCKS:
       None.

 RESTRICTIONS:
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:

 PREVIOUS HISTORY:
       Written April 10, 1995, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 1, created, Liyun Wang, GSFC/ARC, April 10, 1995

 VERSION:
       Version 1, April 10, 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	KEYBOARD_CRS
 Purpose     :	
	Move the graphics cursor with the keyboard.
 Explanation :	
	This procedure uses the routine CURSOR to find the coordinates,
	expressed in data units, of a point selected with the cursor.  Rather
	than letting the mouse move the cursor, the cursor is moved from the
	keyboard, allowing the user to move in one direction without moving in
	the other direction.
 Use         :	
	KEYBOARD_CRS  [, X_VALUE  [, Y_VALUE  [, PRINT_SWITCH ]]]

	KEYBOARD_CRS		;Values printed to screen.
	KEYBOARD_CRS, X, Y	;Values stored in variables X and Y
	KEYBOARD_CRS, X, Y, 1	;Values stored in X,Y, and printed to screen.

 Inputs      :	
	None required.
 Opt. Inputs :	
	PRINT_SWITCH	- Switch used to control printing the values of 
			  X_VALUE, Y_VALUE to the screen.  If not passed,
			  then assumed 0 (no printing) unless no parameters
			  are passed, in which case 1 (printing) is assumed.
 Outputs     :	

 Opt. Outputs:	
	X_VALUE		- X position in data coordinates of cursor.
	Y_VALUE		- Y position in data coordinates of cursor.
 Keywords    :	
	None.
 Calls       :	
	None.
 Common      :	
	None.
 Restrictions:	
	None.
 Side effects:	
	None.
 Category    :	
	Utilities, User_interface.
 Prev. Hist. :	
	William Thompson	Applied Research Corporation
	September, 1987		8201 Corporate Drive
				Landover, MD  20785
 Written     :	
	William Thompson, GSFC, September 1987.
 Modified    :	
	Version 1, William Thompson, GSFC, 9 July 1993.
		Incorporated into CDS library.
		Added call to CONVERT_COORD so as to be compatible with
			logarithmic plots.
 Version     :	
	Version 1, 9 July 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	LABEL_CURVE
 Purpose     :	
	Plots a label with a line from it to a curve.
 Explanation :	
	Puts a label on a graph, and draws a line between the label and a
	curve.  A line is extrapolated between the point X0, Y0, and the curve
	XVALS, YVALS.  The procedure XYOUTS is then called to write out the
	label.
 Use         :	
	LABEL_CURVE, X0, Y0, X1, Y1, XVALS, YVALS, LABEL

	X = FINDGEN(101)/100					;Generate curve
	Y = SQRT(X)
	PLOT, X, Y						;Plot it.
	LABEL_CURVE, 0.5, 0.5, 0, 1, X, Y, "Sample curve"	;And label it.

 Inputs      :	
	X0, Y0	 = Position of the label.  The line from the label to the curve
		   starts here.
	X1, Y1	 = Another point along the line, used to determine the
		   direction of the line drawn from the label to the curve.
		   This point may or may not end up on the actual line drawn.
	XVALS	 = Array of X-values of points on the curve.
	YVALS	 = Array of Y-values of points on the curve.
	LABEL	 = Character string label.
 Opt. Inputs :	
	None.
 Outputs     :	
	None.
 Opt. Outputs:	
	None.
 Keywords    :	
	LEFT	 = If set, then the label will be displayed to the left of the
		   point X0, Y0.  Normally the label is displayed to the right.
	COLOR	 = Color to use in drawing the label and the line.
	CHARSIZE = Character size to use in drawing the label.
 Calls       :	
	None.
 Common      :	
	None.
 Restrictions:	
	None.
 Side effects:	
	None.
 Category    :	
	Utilities, Graphics.
 Prev. Hist. :	
	William Thompson, June 1991.  Added keywords LEFT, COLOR, CHARSIZE.
	W.T.T., Jan 1992, changed calling parameters so that X1, Y1 are passed
			  instead of SLOPE.  Also, put small offset between
			  label and line.
	William Thompson, Nov 1992, modified algorithm for getting the relative
		character size.
 Written     :	
	William Thompson, GSFC.
 Modified    :	
	Version 1, William Thompson, 9 June 1993.
		Incorporated into CDS library.
		Added call to CONVERT_COORD so as to be compatible with
			logarithmic plots.
	Version 2, William Thompson, GSFC, 20 October 1993.
		Brought label closer to curve.
 Version     :	
	Version 2, 20 October 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	LABEL_IMAGE
 Purpose     : 
	Puts labels on images.
 Explanation : 
	The routine XYOUTS is used to display the title centered either above
	or below the image, or to either side of the image.
 Use         : 
	LABEL_IMAGE, TITLE
 Inputs      : 
	TITLE	 = Character string to be output to image.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	BELOW	 = If set, then the title is displayed below the image.
	LEFT	 = If set, then the title is displayed to the left of the
		   image.  Overrides BELOW keyword.
	RIGHT	 = If set, then the title is displayed to the right of the
		   image.  Overrides BELOW and LEFT keywords.
	CENTER	 = If set, then the title is centered on the screen, regardless
		   of where the image is.  Centering is in X, unless the LEFT
		   or RIGHT keywords are set, in which case it is in Y.
	CHARSIZE = Character size to use in displaying titles.  Normally 1.
	COLOR	 = Color to display label in.
	DISABLE  = If set, then TVSELECT not used.
	REVERSE	 = If set, then the orientation of the letters is 180 degrees
		   from what it ordinarily would be.
 Calls       : 
	GET_TV_SCALE, TVSELECT, TVUNSELECT
 Common      : 
	None.
 Restrictions: 
	There must be enough space to display the title.

	It is important that the user select the graphics device/window, and
	image region before calling this routine.  For instance, if the image
	was displayed using EXPTV,/DISABLE, then this routine should also be
	called with the /DISABLE keyword.  If multiple images are displayed
	within the same window, then use SETIMAGE to select the image before
	calling this routine.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, March 1991.
	William Thompson, May 1992, modified to use GET_TV_SCALE.
	William Thompson, Nov 1992, modified algorithm for getting the relative
		character size.
 Written     : 
	William Thompson, GSFC, March 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 13 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 13 May 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	LABEL_LINE
 Purpose     :	
	Plots a horizontal line (w/ or w/o symbols) with a label.
 Explanation :	
	Plots a horizontal line (with or without symbols) with a label next to
	it on a graph.
 Use         :	
	LABEL_LINE, X0, Y0, PSYM, LABEL
 Inputs      :	
	X0, X1	  = X-range of the horizontal line.
	Y0	  = Y-height of the line.
	LABEL	  = Character string label.
 Opt. Inputs :	
	None.
 Outputs     :	
	None.
 Opt. Outputs:	
	None.
 Keywords    :	
	PSYM	  = Plotting symbol to use.  Note that actual lines are drawn
		    only if PSYM is zero or negative.  Positive values of PSYM
		    only cause two plotting symbols to be drawn.
	LINESTYLE = Line style to use.
	LEFT	  = If set, then the label will be displayed to the left of the
		    line.  Normally the label is displayed to the right.
	COLOR	  = Color to use in drawing the label and the symbol.
	CHARSIZE  = Character size to use in drawing the label.
	SYMSIZE	  = Symbol size.
 Calls       :	
	None.
 Common      :	
	None.
 Restrictions:	
	None.
 Side effects:	
	None.
 Category    :	
	Utilities, graphics.
 Prev. Hist. :	
	William Thompson, Jan 1992.
	William Thompson, Nov 1992, modified algorithm for getting the relative
		character size.
	William Thompson, 6 July 1993, added call to CONVERT_COORD so as to be
		compatible with logarithmic plots.
 Written     :	
	William Thompson, GSFC, January 1992.
 Modified    :	
	Version 1, William Thompson, GSFC, 9 July 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 20 October 1993.
		Brought label closer to line.
 Version     :	
	Version 2, 20 October 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	LABEL_SYMBOL
 Purpose     :	
	Plots a symbol with a label next to it on a graph.
 Explanation :	
	A plotting symbol is drawn on the plot, and then the procedure XYOUTS
	is called to write out the label.
 Use         :	
	LABEL_SYMBOL, X0, Y0, PSYM, LABEL
 Inputs      :	
	X0, Y0	 = Position of the symbol.
	PSYM	 = Plotting symbol to use.
	LABEL	 = Character string label.
 Opt. Inputs :	
	None.
 Outputs     :	
	None.
 Opt. Outputs:	
	None.
 Keywords    :	
	LEFT	 = If set, then the label will be displayed to the left of the
		   point X0, Y0.  Normally the label is displayed to the right.
	COLOR	 = Color to use in drawing the label and the symbol.
	CHARSIZE = Character size to use in drawing the label.
	SYMSIZE	 = Symbol size.
 Calls       :	
	None.
 Common      :	
	None.
 Restrictions:	
	None.
 Side effects:	
	None.
 Category    :	
	Utilities, Graphics.
 Prev. Hist. :	
	William Thompson, Jan 1992.
	William Thompson, Nov 1992, modified algorithm for getting the relative
		character size.
	William Thompson, 6 July 1993, added call to CONVERT_COORD so as to be
		compatible with logarithmic plots.
 Written     :	
	William Thompson, GSFC, January 1992.
 Modified    :	
	Version 1, William Thompson, GSFC, 9 July 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 20 October 1993.
		Brought label closer to symbol.
 Version     :	
	Version 2, 20 October 1993.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : LAST_ITEM
               
 Purpose     : Returns the last element of the input variable.
               
 Explanation : Returns the last element of whatever the input variable is.
               
 Use         : IDL> print,last_item(indgen(10))
                     ---> 9

               Find the latest archive telemetry file:
               IDL> print,last_item(findfile(concat_dir('$CDS_TM_DATA','tm*')))
    
 Inputs      : item - variable/array/structure to extract from
               
 Opt. Inputs : None
               
 Outputs     : Function returns last value.
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : None

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, numerical
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 9-Dec-94
               
 Modified    : 

 Version     : Version 1, 9-Dec-94
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       LAT2Y()

 PURPOSE:
       Convert heliographic latitute to Y value in arcsec

 EXPLANATION:
       Given the X position (in arcsec) of a point and optionally the
       heliographic latitude of the point, this routine returns the Y
       position (in arcsec) of the point, and optionally the heliographic
       longitude of the point.

 CALLING SEQUENCE:
       y = lat2y(x, lat, date=date)

 INPUTS:
       X   - X value of the point in arcsec

 OPTIONAL INPUTS:
       LAT - heliographic latitute of the point in degrees. If this parameter
             is missing, zero degree latitude will be assumed.

 OUTPUTS:
       Y   - Y value of the point in arcsec

 OPTIONAL OUTPUTS:
       LONGI - Heliographic longitude of the concerned point (in degs)

 KEYWORD PARAMETERS:
       DATE - Date/Time in CCSDS or ECS time format, based on which the
              coversion is done. If missing, the current system time will be
              used 

 CALLS:
       PB0R, GET_UTC

 COMMON BLOCKS:
       None.

 RESTRICTIONS:
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:

 PREVIOUS HISTORY:
       Written May 1, 1995, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 1, created, Liyun Wang, GSFC/ARC, May 1, 1995

 VERSION:
       Version 1, May 1, 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	LINECOLOR
 Purpose     : 
	Set a color index to a particular color.
 Explanation : 
	Set one particular element in each of the red, green and blue color
	tables to some standard values for line plotting.
 Use         : 
	LINECOLOR,I_COLOR,S_COLOR
 Inputs      : 
	I_COLOR = Color table element to be used for line plotting.  Must be in
		  the range [0,!D.NCOLORS-1].  If SET is set, then the system
		  variable !COLOR is set to I_COLOR.
	S_COLOR = String variable denoting the color.  May be upper or lower
		  case.  Acceptable values are 'RED', 'GREEN', 'BLUE',
		  'YELLOW', 'ORANGE', 'PURPLE', 'MAGENTA', 'BROWN',
		  'TURQUOISE', 'BLACK' and 'WHITE'.
	DISABLE	= If set, then TVSELECT not used.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	SET	= If set, then !COLOR is changed by this procedure.
 Calls       : 
	TRIM, TVSELECT, TVUNSELECT
 Common      : 
	None.
 Restrictions: 
	The variable S_COLOR must be of type string.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	If SET is set, then the variable !COLOR is set to I_COLOR.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson	Applied Research Corporation
	July, 1986		8201 Corporate Drive
				Landover, MD  20785

	William Thompson, April 1992, changed to use TVLCT,/GET instead of
				      common block, and added DISABLE keyword.
 Written     : 
	William Thompson, GSFC, July 1986.
 Modified    : 
	Version 1, William Thompson, GSFC, 13 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 13 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	LIST_WITH_PATH()
 Purpose     : 
	Searches for files with a default path and extension.
 Explanation :
	Lists files in a set of default paths, similar to using FINDFILE,
	except that a list of paths to be searched can be given.
 Use         : 
	Result = LIST_WITH_PATH( FILENAME, PATHS )

	FILENAME = ''
	READ, 'File to open: ', FILENAME
	FILE = LIST_WITH_PATH( FILENAME, 'SERTS_DATA', '.fix' )
	IF FILE NE '' THEN ...

 Inputs      : 
	FILENAME   = Name of file to be searched for.  It may contain wildcard
		     characters, e.g. "*.dat".

	PATHS	   = One or more default paths to use in the search in case
		     FILENAME does not contain a path itself.  The individual
		     paths are separated by commas, although in UNIX, colons
		     can also be used.  In other words, PATHS has the same
		     format as !PATH, except that commas can be used as a
		     separator regardless of operating system.  The current
		     directory is always searched first, unless the keyword
		     NOCURRENT is set.

		     A leading $ can be used in any path to signal that what
		     follows is an environmental variable, but the $ is not
		     necessary.  (In VMS the $ can either be part of the path,
		     or can signal logical names for compatibility with Unix.)
		     Environmental variables can themselves contain multiple
		     paths.

 Opt. Inputs : 
	None.
 Outputs     : 
	The result of the function is a list of filenames.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	BREAK_PATH, CONCAT_DIR
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	None.
 Category    : 
	Utilities, Operating_system
 Prev. Hist. : 
	None.
 Written     : 
	William Thompson, GSFC, 3 November 1994
 Modified    : 
	Version 1, William Thompson, GSFC, 3 November 1994
 Version     : 
	Version 1, 3 November 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	LOADCT
 Purpose     : 
	Load predefined color tables.
 Explanation : 
	The image display device is selected (unless DISABLE is set), and
	LOADCT is called to display the color tables.  See LOADCT in the IDL
	User's Library for more information.
 Use         : 
	LOADCT  [, TABLE]
 Inputs      : 
	None required.
 Opt. Inputs : 
	TABLE	= The number of the pre-defined color table to load, from 0 to
		  15.  If this value is omitted, a menu of the available tables
		  is printed and the user is prompted to enter a table number.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	SILENT	= If set, the Color Table message is suppressed.
	DISABLE	= If set, then TVSELECT is not used.
 Calls       : 
	TVSELECT, TVUNSELECT
 Common      : 
	None, but calls LOADCT, which uses the common block COLORS.
 Restrictions: 
	Works from the file: $IDL_DIR/colors1.tbl.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	The color tables of the currently-selected device are modified.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, April 1992, added SILENT and DISABLE keywords.
 Written     : 
	William Thompson, GSFC.
 Modified    : 
	Version 1, William Thompson, GSFC, 13 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 13 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	LOAD_VEL
 Purpose     : 
	Loads a velocity color table.
 Explanation : 
	Loads a velocity color table.  Velocity arrays can be scaled for 
	display for this color table using FORM_VEL.
 Use         : 
	LOAD_VEL
 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	REVERSE_SWITCH	= If passed, and non-zero, then the red and blue color
			  tables in the velocity color table are switched.
	TURQUOISE	= If set, then turquoise is used instead of blue.
	GREEN_SWITCH	= If set, then red and green are used instead of red
			  and blue.  Ignored if TURQUOISE is set.
	LIGHTEN		= If set, then some green is added to the blue to
			  lighten the image.  Ignored if TURQUOISE or
			  GREEN_SWITCH are set.
	DISABLE		= If set, then TVSELECT not used.
 Calls       : 
	TVSELECT, TVUNSELECT
 Common      : 
	COLORS:	The IDL color common block.
 Restrictions: 
	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., Oct. 1987.
	W.T.T., Nov. 1990.  Modified for version 2 of IDL.
	W.T.T., Dec. 1990.  Modified so that normally the positive velocities
		are blue and the negative velocities are red.  This seems
		closer to standard usage.
	W.T.T., Jan. 1991.  Changed REVERSE_SWITCH to keyword.  Added keywords
			    GREEN_SWITCH and LIGHTEN.
	William Thompson, April 1992, removed common block COLORS, and added
				      DISABLE keyword.
	W.T.T., Jun. 1992.  Changed so that topmost color reserved for
			    overplotting with white lines.
	W.T.T., Sep. 1992.  Returned COLORS common block.
 Written     : 
	William Thompson, GSFC, October 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 13 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 13 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
       LOC_FILE()
 Purpose     : 
       Get files from a set of directories.
 Explanation : 
	Similar to the standard utility FINDFILE, but allows for a series of
	directories to be searched.  Also, in Unix, it takes care of pathnames
	that contain the special "~" character, which FINDFILE currently does
	not do.
 Use         : 
       Result = LOC_FILE(FILE,PATH=PATH,LOC=LOC,COUNT=COUNT,ALL=ALL)
 Inputs      : 
       FILE	= Name of file(s) to search for.  It may contain wildcard
		  characters.
 Opt. Inputs : 
	None.
 Outputs     : 
	The result of the function is an array containing the names of all the
	files found.
 Opt. Outputs: 
	None.
 Keywords    : 
       PATH	= Array or scalar string with names of directories to search.
       LOC	= Returned directory locations of found files.
       COUNT	= Number of found files.
       ALL	= If set, then search all directories.  Otherwise, the
		  procedure stops as soon as a match is found.
 Calls       : 
	BREAK_FILE, CONCAT_DIR, DATATYPE
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	None.
 Category    : 
	Utilities, Operating_system.
 Prev. Hist. : 
       Written Dec'92 (DMZ,ARC)
 Written     : 
	D. Zarro, GSFC/SDAC, December 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 23 April 1993.
		Incorporated into CDS library.
       Version 2, Dominic Zarro, GSFC, 1 August 1994.
               Added for error checking
 Version     : 
	Version 2, 1 August 1994.
;-
;+
 Project     :	SOHO - CDS

 Name        :	LOCAL_DIFF()

 Purpose     :	Gets the current difference between local and UTC time.

 Explanation :	This procedure uses the IDL SYSTIME() function in different
		ways to calculate the current local and UTC date/time values,
		and calculates the difference (local - UTC) in hours between
		them.

 Use         :	Result = LOCAL_DIFF()

 Inputs      :	None.

 Opt. Inputs :	None.

 Outputs     :	The result of the function is the current difference in hours
		between local and UTC time, i.e. local-UTC.

 Opt. Outputs:	None.

 Keywords    :	ERRMSG	= If defined and passed, then any error messages 
			  will be returned to the user in this parameter 
			  rather than being handled by the IDL MESSAGE 
			  utility.  If no errors are encountered, then a null
			  string is returned.  In order to use this feature,
			  the string ERRMSG must be defined first, e.g.,

				ERRMSG = ''
				RESULT = LOCAL_DIFF ( ERRMSG=ERRMSG )
				IF ERRMSG NE '' THEN ...

			  Note that no intrinsic errors will ever be
			  encountered in this procedure.  However, this 
			  ERRMSG keyword has been installed since it calls
			  other procedures that include the ERRMSG keyword.

 Calls       :	INT2UTC, TRIM

 Common      :	None.

 Restrictions:	This routine depends on the behavior of IDL's SYSTIME function.
		Currently, it is believed that this routine will return the
		time difference correctly on all properly configured Unix
		systems.  However, the result may be different in other
		operating systems; e.g. on VMS and MacIntosh computers it
		always returns zero.  It is believed to work correctly in IDL
		for Windows.

		In order to get around this difficulty, the file
		"local_diff.dat" can be placed in the directory given by the
		environment variable TIME_CONV.  If this file exists, then this
		program will read the value from this file rather than try to
		calculate.  For example, for U.S. Eastern Standard Time, this
		file would contain the value -5.  This means then, that this
		file must contain the correct value, and must be updated to
		reflect changes between standard and daylight savings time.

		The accuracy of the time difference returned by this routine
		depends on the proper configuration of the computer.

 Side effects:	None.

 Category    :	Utilities, time.

 Prev. Hist. :	None.

 Written     :	William Thompson, GSFC, 2 October 1994

 Modified    :	Version 1, William Thompson, GSFC, 2 October 1994
		Version 2, William Thompson, GSFC, 3 October 1994
			Added check for file local_diff.dat
		Version 3, William Thompson, GSFC, 14 November 1994
			Changed .DAY to .MJD
		Version 4, Donald G. Luttermoser, GSFC/ARC, 28 December 1994
			Added the keyword ERRMSG.
		Version 5, William Thompson, GSFC, 25 January 1995
			Changed to call intrinsic ROUND instead of NINT.  The
			version of NINT in the Astronomy User's Library doesn't
			automatically select between short and long integers as
			the CDS version does.
		Version 6, Donald G. Luttermoser, GSFC/ARC, 30 January 1995
			Added ERRMSG keyword to internally called procedures.
		Version 7, William Thompson, GSFC, 15 March 1995
			Changed CDS_TIME to TIME_CONV

 Version     :	Version 7, 15 March 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	LSTSQR

 Purpose     :	Least-squares fit of arbitrary function to data points

 Explanation :	Fits an arbitrary function to a series of data points via a
		least-squares reiterative technique.

 Use         :	LSTSQR, X, Y, FNAME, PARAM  [, PERR ]

 Inputs      :	X	 = Positions.
		Y	 = Data values.
		FNAME	 = Name of function to be fitted (string variable).
		PARAM	 = Parameters of fit.  Passed as first guess.  Returned
			   as fitted values.

 Opt. Inputs :	None.

 Outputs     :	PARAM	 = Parameters of fit.  See note above.

 Opt. Outputs:	PERR	 = Errors in PARAM.

 Keywords    :	ACCURACY = Accuracy to cut off at.  Defaults to 1E-5.
		MAX_ITER = Maximum number of reiterations.  Defaults to 20.
		POISSON	 = If set, then a Poisson error distribution is
			   assumed, and the weights are set accordingly to 1/Y.
		ERROR	 = Array of errors.  The weights are set accordingly to
			   1/ERROR^2.  Overrides POISSON.
		WEIGHT	 = Array of weights to use in fitting.  Overrides
			   POISSON and ERROR.
		LAMBDA	 = Initial value of LAMBDA.  Defaults to 1E-2.
		NOPRINT	 = If set, then no printout is generated.
		CHISQR	 = Returned value of chi-squared.  Only relevant if
			   ERROR passed explicitly.
		N_ITER	 = Number of iterations used.
		CMATRIX	 = Correlation matrix.

 Calls       :	None.

 Common      :	None.

 Restrictions:	The user defined function is passed by name as a character
		string in the variable FNAME.  The function must have the form.

				Y = F(X,PARAM,FDER)

		where X is the independent variable, PARAM is the vector
		containing the parameters of the fit, and FDER is an output
		array containing the partial derivatives of the function with
		respect to each parameter in PARAM.  This array will have the
		dimensions:

			FDER( N_ELEMENTS(X) , N_ELEMENTS(PARAM) )

		However, if FDER is returned by the function as a simple
		scalar, or not returned at all, then LSTSQR will calculate it
		itself, using numerical derivatives.

 Side effects:	If MAX_ITER is zero, then no iterations are made, and the
		routine goes directly to the error analysis section.

 Category    :	Utitilies, Curve_Fitting

 Prev. Hist. :	William Thompson, June 1991, modified to use keywords.

 Written     :	William Thompson, GSFC, June 1991

 Modified    :	Version 1, William Thompson, GSFC, 9 January 1995
			Incorporated into CDS library

 Version     :	Version 1, 9 January 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	MATCH
 Purpose     :	
	Routine to match values in two vectors.
 Explanation :	
	Routine to match values in two vectors.
 Use         :	
	match, a, b, suba, subb

	EXAMPLE: If a = [3,5,7,9,11]   & b = [5,6,7,8,9,10]
	then 
		IDL> match, a, b, suba, subb, COUNT = count

	will give suba = [1,2,3], subb = [0,2,4],  COUNT = 3
	and       suba(a) = subb(b) = [5,7,9]

 Inputs      :	
	a,b - two vectors to match elements

 Opt. Inputs :	None.

 Outputs     :	
	suba - subscripts of elements in vector a with a match
		in vector b
	subb - subscripts of the positions of the elements in
		vector b with matchs in vector a.

	suba and subb are ordered such that a(suba) equals b(subb)

 Opt. Outputs:	None.

 Keywords    :	
	COUNT - set to the number of matches, integer scalar

 Calls       :	None.

 Common      :	None.

 Restrictions:	
	a and b should not have duplicate values within them.
	You can use rem_dup function to remove duplicate values
	in a vector

 Side effects:	
	!ERR is set to the number of matches, can be used instead of COUNT

 Category    :	Utilities, Array

 Prev. Hist. :	
	D. Lindler  Mar. 1986.
	Fixed "indgen" call for very large arrays   W. Landsman  Sep 1991
	Added COUNT keyword    W. Landsman   Sep. 1992

 Written     :	D. Lindler, GSFC/HRS, March 1986

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SDAC

 Name        :	MATCH_STRUCT

 Purpose     :	check if two structures are identical

 Explanation :	cross-checks type and value of each field

 Use         : STATUS=MATCH_STRUCT(STRUCT1,STRUCT2)

 Inputs      :	S1, S2 = input structures

 Opt. Inputs :	None.

 Outputs     :	STATUS = 1/0 is input structure are/are not identical

 Opt. Outputs:	None.

 Keywords    :	TAG_ONLY = set to check if only tags are the same
               FLOAT = do checks in floating point
               BLANK = treat string blanks as valid characters

 Calls       :	DATATYPE

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Structure handling

 Prev. Hist. :	None.

 Written     :	Dominic Zarro (ARC/GSFC)

 Modified    : To handle arrays of strings.  CDP, 27-Feb-95
               Removed redundant string check. DMZ, 1-March-95

 Version     :	Version 3, 1-March-95

;-
;+
 Project     :	SOHO - CDS

 Name        :	MAX_TAG

 Purpose     :	find max dimension of a tag in a structure

 Explanation :

 Use         : MAX=MAX_TAG(STRUCT)

 Inputs      :	STRUCT = input structure

 Opt. Inputs :	None.

 Outputs     :	MAX = max dimension of tags

 Opt. Outputs:	None.

 Keywords    :	NEST = check nested structure dimensions only

 Calls       :	None.

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Structure handling

 Prev. Hist. :	None.

 Written     :	Dominic Zarro (ARC)

 Version     :	Version 1.0, 22 May 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	MJD2DATE

 Purpose     :	Converts MJD to year, month, and day.

 Explanation :	This procedure takes a Modified Julian Day number, and returns
		the corresponding calendar date in year, month, day.

 Use         :	MJD2DATE, MJD, YEAR, MONTH, DAY

 Inputs      :	MJD	= Modified Julian Day number.

 Opt. Inputs :	None.

 Outputs     :	YEAR	= Calendar year corresponding to MJD.
		MONTH	= Calendar month, from 1-12.
		DAY	= Calendar day, from 1-31, depending on the month.

 Opt. Outputs:	None.

 Keywords    :	ERRMSG	= If defined and passed, then any error messages 
			  will be returned to the user in this parameter 
			  rather than being handled by the IDL MESSAGE 
			  utility.  If no errors are encountered, then a null 
			  string is returned.  In order to use this feature, 
			  the string ERRMSG must be defined first, e.g.,

				ERRMSG = ''
				MJD2DATE, MJD, YEAR, MONTH, DAY, ERRMSG=ERRMSG
				IF ERRMSG NE '' THEN ...

 Calls       :	None.

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Time.

 Prev. Hist. :	None.  However, part of the logic of this routine is taken from
		DAYCNV by B. Pfarr, GSFC.

 Written     :	William Thompson, GSFC, 13 September 1993.

 Modified    :	Version 1, William Thompson, GSFC, 13 September 1993.
		Version 2, Donald G. Luttermoser, GSFC/ARC, 28 December 1994.
			Added the keyword ERRMSG.  Note that there are no
			internally called procedures that use the ERRMSG 
			keyword.
		Version 3, Donald G. Luttermoser, GSFC/ARC, 30 January 1995.
			Made the error handling procedure more robust.  Note
			that this routine handles both scalars and vectors as
			input.

 Version     :	Version 3, 30 January 1995.
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       MK_GIF

 PURPOSE:
       Convert FITS files to GIF image files

 EXPLANATION:
       Reads one or more FITS files, byte scales them, and then
       writes them to GIF files. If a title is to be plotted, it
       will be plotted in upper center position.

 CALLING SEQUENCE:
       MK_GIF, FILE_STC

 INPUTS:
       FILE_STC - A structure with three tags:
          FILENAME -- Name of the FITS file
          TITLE    -- Title to be attached in the GIF image
          COLOR    -- Color table to be loaded; defaults to 0
          FLIP     -- Flag indicating if the image should be flipped
                      before conversion.

 OPTIONAL INPUTS:
       None.

 OUTPUTS:
       None.

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS:
       RED, GREEN, BLUE - optional color vectors to override COLOR
       FRAC    - fraction by which to increase image
                 size in Y-direction to fit title [def = 10%]
       ROTATE  - value for rotate (see ROTATE function)
       FLIP    - flip image to to bottom
       REVERSE - flip image left to right
       SIG     - select significant range of image

 CALLS:
       WRITE_GIF, CONCAT_DIR, BREAK_FILE, FXREAD

 COMMON BLOCKS:
       None.

 RESTRICTIONS:
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:

 PREVIOUS HISTORY:
       Written December 7, 1994, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 1, Liyun Wang, GSFC/ARC, December 7, 1994
          Modified from FITS2GIF by Dominic Zarro (ARC)
       Version 2, Liyun Wang, GSFC/ARC, February 1, 1995
          Added one tag (FLIP) to the input file structure.

 VERSION:
       Version 2, February 1, 1995
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       MK_HELP_STC()

 PURPOSE:
       TO create a help structure to be used in help mode

 EXPLANATION:
       This routine reads in a help file and creates a structure
       whose tag names are help topics, and whose tag values are
       string arrays or scalars corresponding to the topics. The help
       file it reads should be in the same format as that readable by
       WIDG_HELP. The only restricion is that the string for a help
       topic can not exceed 15 characters (the rest of characters
       will be truncated). Also the space between words in a help
       topic will be converted into the underscore character in the
       tag names. 
 
 CALLING SEQUENCE:
       Result = mk_help_stc(help_file)

 INPUTS:
       HELP_FILE - The name of a file that contains the help
                   information to display.  This program searches for a
                   file with this name first in the current directory,
                   and then in !PATH, and searches for the name by
                   itself, and with '.hlp' appended after it.

                   The file consists of a series of topic headers
                   followed by a text message about that topic.  The
                   topic headers are differentiated by starting with
                   the "!" character in the first column (if the
                   keyword SEP_CHAR not set) or the character
                   specified via the SEP_CHAR keyword. For example,

                        !Overview
                        This is the overview for the
                        topic at hand.

                        !Button1
                        This is the help explanation
                        for button 1

                        etc.

                   The program assumes that the first line in the file
                   (except commentary lines or blank lines) contains
                   the first topic.  Also, there must be at least one
                   line between any two topics.  Thus, 

                        !Button2
                        !Button3

                   is not allowed, but

                        !Button2

                        !Button3

                   is allowed.  The last topic in the file must have at
                   least one non-topic line after it.

 OPTIONAL INPUTS:
       None.

 OUTPUTS:
       RESULT - An anonymous strucuture which has tags named the same as the
                topic headers in the help file and the value of those tags
                are the text messages about the topic. A -1 will be
                returned for syntax error or failure to open the help file.

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS:
       SEP_CHAR - Character used to differentiate topic
                  headers. The default SEP_CHAR is '!'

 CALLS:
       DATATYPE, DELVARX, FIND_WITH_DEF

 COMMON BLOCKS:
       None.

 RESTRICTIONS:
       Name of topic header is truncated at 16th character.

 SIDE EFFECTS:
       None.

 CATEGORY:
       Utilities, Help

 PREVIOUS HISTORY:
       Written May 12, 1995, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 1, created, Liyun Wang, GSFC/ARC, May 12, 1995

 VERSION:
       Version 1, May 12, 1995
;-
;+
 NAME:
	MK_LIBRARY_HELP

 PURPOSE:
	Given a directory or a VMS text library containing IDL user library 
	procedures, this procedure generates a file in the IDL help format
	that contains the documentation for those routines that contain
	a DOC_LIBRARY style documentation template.  The output file is
	compatible with the IDL "?" command.

	A common problem encountered with the DOC_LIBRARY user library
	procedure is that the user needs to know what topic to ask for
	help on before anything is possible.  The XDL widget library
	procedure is one solution to this "chicken and egg" problem.
	The MK_LIBRARY_HELP procedure offers another solution.

 CATEGORY:
	Help, documentation.

 CALLING SEQUENCE:
	MK_LIBRARY_HELP, Source, Outfile

 INPUTS:
      SOURCE:	The directory or VMS text library containing the
		.pro files for which help is desired.  If SOURCE is
		a VMS text library, it must include the ".TLB" file
		extension, as this is what MK_LIBRARY_HELP uses to
		tell the difference.

     OUTFILE:	The name of the output file which will be generated.
		If you place this file in the help subdirectory of the
		IDL distribution, and if it has a ".help" extension, then
		the IDL ? command will find the file and offer it as one
		of the availible help categories. Note that it uses the
		name of the file as the name of the topic.

 KEYWORDS:
     TITLE:	If present, a string which supplies the name that
		should appear on the topic button for this file
		in the online help. This title is only used on
		systems that allow very short file names (i.e. MS DOS),
		so it won't always have a visible effect. However,
		it should be used for the broadest compatibility. If
		a title is not specified, IDL on short name systems
		will use a trucated copy of the file name.
     VERBOSE:	Normally, MK_LIBRARY_HELP does its work silently.
		Setting this keyword to a non-zero value causes the procedure
		to issue informational messages that indicate what it
		is currently doing.

 OUTPUTS:
	None.

 COMMON BLOCKS:
	None.

 SIDE EFFECTS:
	A help file with the name given by the OUTFILE argument is
	created.

 RESTRICTIONS:
	If you put the resulting file into the "help" subdirectory of
	the IDL distribution, it will be overwritten when you install a
	new release of IDL.  To avoid this problem, keep a backup copy of 
	your created help files in another directory and move them into 
	the new distribution.

	Since this routine copies the documentation block from the
	functions and procedures, subsequent changes will not be
	reflected in the help file unless you run MK_LIBRARY_HELP
	again.

	The following rules must be followed in formating the .pro
	files which are searched.
		(a) The first line of the documentation block contains
		    only the characters ";+", starting in column 1.
		(b) The last line of the documentation block contains
		    only the characters ";-", starting in column 1.
		(c) Every other line in the documentation block contains
		    a ";" in column 1.

	No reformatting of the documentation is done.

 MODIFICATION HISTORY:
	17 April, 1991, Written by AB, RSI.
	1 December 1992, Reorganized internally. No functionality change.
	31 December 1992, Added the TITLE keyword as part of the effort
		towards releasing the Microsoft Windows version of IDL.
	20 January 1993,  Corrected for VMS, W. Landsman HSTX
	17 March 1993, Corrected for MSDOS and VMS, AB.
	13 January 1994, Added the VERSION attribute and modified format to
		accomodate extended identifier names (the old format was
		limited to 15 characters.
	30 June 1995, M.Morrison - replaced FINDFILE with FILE_LIST so
		that a list of directories can be passed as input.
		Also protected against a ;+ existing but no ;-
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : MODE_VAL()
               
 Purpose     : Returns the modal value of an array.
               
 Explanation : The modal value of an array (any dimension) is deduced from
               the max value of the histogram.  If several values occur
               with equal frequency, a warning is given but only the smallest
               value of the group is returned.
               
 Use         : IDL> m = mode_val(array [,freq])

               eq print,mode_val([2,3,4,5,2,2,3,4,2,2,7,8,9]) --> 2
                  print,mode_val('asdfghaaasdfvbnm') --> a
                  print,mode_val(['asdf','ghaaa','asdf','vbnam'],freq) --> a
                    and freq returned with value 6
    
 Inputs      : array  -  the n-dimensional integer array in which to find the
                         mode.
                         Can be a string array but not a structure. The string
                         option is a little restricted in that whatever the
                         input format, the string is viewed as a byte array
                         and the most frequent byte value returned
               
 Opt. Inputs : None
               
 Outputs     : Function return is the modal value
               
 Opt. Outputs: freq  - the number of occurrences of the modal value
               
 Keywords    : None

 Calls       : None
               
 Restrictions: Non-real arrays or strings only
               
 Side effects: None
               
 Category    : Utilities, Numerical
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 1-Jul-1993
               
 Modified    : 

 Version     : Version 1,  1-Jul-1993
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       MRQCOF

 PURPOSE: 
       Internal routine called by MRQMIN

 EXPLANATION:
       Used by MRQMIN to evaluate the linearized fitting matrix
       ALPHA, and vector ZETA.

 CALLING SEQUENCE: 
       MRQCOF, 

 INPUTS:
       X   -- A matrix with M x N elements containing the observation points,
              where M is the number of independent variables, and N is the
              number of observing points.
       Y   -- N element vector, value of the fitted function. 
       SIG -- Measurement error (standard deviation, N elements); If the
              measurement errors are not know, they can all be set to 1.
       A   -- M element vector, initial and final parameters to be solved.
       FUNCS -- Name of the user-supplied procedure that returns values of
                the model function and its first derivative. Its calling
                sequence must be:
                     FUNCS, x0, a, ymod, dyda

 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       ALPHA -- M x M array, curvature matrix 
       ZETA  -- M-element vector, solution of the linear equation associated
                with the curvature matrix
       CHISQ -- Value of the merit function

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS: 
       None.

 CALLS:
       FUNCS, the user-supplied procedure.

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       Utility, numerical calculation

 PREVIOUS HISTORY:
       Written November 10, 1994, by Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       
 VERSION:
       Version 1, November 10, 1994
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       MRQMIN

 PURPOSE: 
       Internal routine called by NL_LSQFIT

 EXPLANATION:
       
 CALLING SEQUENCE: 
       MRQMIN, x, y, sig, a, chisq, alamda, funcs=funcs [,covar=covar]

 INPUTS:
       X   -- A matrix with M x N elements containing the observation points,
              where M is the number of independent variables, and N is the
              number of observing points.
       Y   -- N element vector, value of the fitted function. 
       SIG -- Measurement error (standard deviation, N elements); If the
              measurement errors are not know, they can all be set to 1.
       A   -- Fit parameter, M element vector, initial guessing. Will be
              changed upon exit.
       ALAMDA -- Fudge factor. On the first call, set it to be a negative
                 value, it will then be changed to a small positive value. If
                 a step succeeds, it decreases by a factor of 10; if a step
                 fials, it grows by a factor of 10.
       FUNCS -- Name of the user-supplied procedure that returns values of
                the model function and its first derivative. Its calling
                sequence must be:
                     FUNCS, x0, a, ymod, dyda

 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       CHISQ -- Value of the merit function
       A     -- Fit parameters.

 OPTIONAL OUTPUTS:
       COVAR -- Covariance matrix with M x M elements, used for calculating
                the uncertainties.

 KEYWORD PARAMETERS: 
       None.

 CALLS:
       MRQCOF, GAUSSJ, COVSRT, DELVARX

 COMMON BLOCKS:
       mrqmin -- Internal common block used for saving some variables

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       ulitities, numerical recipes

 PREVIOUS HISTORY:
       Written November 10, 1994, by Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       
 VERSION:
       Version 1, November 10, 1994
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : N_DIMENSIONS()
               
 Purpose     : Returns number of dimensions of a variable.  
               
 Explanation : Returns number of dimensions of a variable.  
               cf. n_elements etc.

 Use         : n = n_dimensions(data)
    
 Inputs      : data - variable to be investigated.
               
 Opt. Inputs : None
               
 Outputs     : Function value returns number of dimensions.
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : None

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, Numerical
               
 Prev. Hist. : Idea by Stein Vidar Haugan.

 Written     : C D Pike, RAL, 13-Jan-94
               
 Modified    : 

 Version     : Version 1, 13-Jan-94
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : NINT()
               
 Purpose     : Returns the nearest integers to the input values.
               
 Explanation : Returns the nearest integer (2 or 4 byte) to the input scalar
               or array.  Note this function should be used instead of 
               relying on the IDL FIX or LONG functions to convert a real
               number. Eg fix(1.0/0.001) = 999 but nint(1.0/0.001) = 1000
               
 Use         : IDL> n = nint(x)
    
 Inputs      : x   array for which nearest integers are to be found.
               
 Opt. Inputs : None
               
 Outputs     : Function value  - the nearest integers.
               
 Opt. Outputs: None
               
 Keywords    : LONG	= If this keyword is set and non-zero, then the result
			  of NINT is of type LONG.  Otherwise, the result is
			  either of type INTEGER or LONG depending on the
			  extent of the data.

 Calls       : None
               
 Restrictions: The nearest integer of 2.5 is 3
               the nearest integer of -2.5 is -3
               
 Side effects: None
               
 Category    : Util, Numerical
               
 Prev. Hist. : Unknown

 Written     : Unknown
               
 Modified    : To CDS format, C D Pike, RaL, 18-May-1993
		Version 2, William Thompson, GSFC, 27 July 1993.
			Added LONG keyword, taken from routine of same name
			written by Wayne Landsman.

 Version     : Version 2, 27 July 1993.
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       NL_LSQFIT

 PURPOSE: 
       Fit a user-supplied nonlinear function to two-dimensional data

 EXPLANATION:
       
 CALLING SEQUENCE: 
       NL_LSQFIT, 

 INPUTS:
       X
       SIG
       A
       IA

 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       CHISQ
       COVAR

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS: 
       None.

 CALLS:
       None.

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       
 PREVIOUS HISTORY:
       Written November 10, 1994, by Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       
 VERSION:
       Version 1, November 10, 1994
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : NUM2STR()
               
 Purpose     : Convert number to unpadded string
               
 Explanation : 
	The main and original purpose of this procedure is to convert a number
	to an unpadded string (i.e. with no blanks around it.)  However, it 
	has been expanded to be a multi-purpose formatting tool.  You may 
	specify a length for the output string; the returned string is either 
	set to that length or padded to be that length.  You may specify 
	characters to be used in padding and which side to be padded.  Finally,
	you may also specify a format for the number.  NOTE that the input 
	"number" need not be a number; it may be a string, or anything.  It is
	converted to string.
               
 Use         :  IDL> tmp = NUM2STR(number,[LENGTH=,PADTYPE=,PADCHAR=,FORMAT=])
               
	         eg. print,'Used ',num2str(stars),' stars.'  
                    ==> 'Used 22 stars.'
	             print,num2str('M81 Star List',length=80,padtype=2)
	             ==> an 80 character line with 'M81 Star List' centered.
	             print,'Error: ',num2str(err,format='(f15.2)')
	             ==> 'Error: 3.24'     or ==> 'Error: 323535.22'
    
 Inputs      :  NUMBER    This is the input variable to be operated on.  
                          Traditionally it was a number, but it may be 
                          any scalar type.
               
 Opt. Inputs :  None
               
 Outputs     :  TMP       The formatted string
               
 Opt. Outputs:  None
               
 Keywords    :  LENGTH    Specifies the length of the returned string.  
		           If the output would have been longer, it is 
                          truncated.  If the output would have been shorter, 
                          it is padded to the right length.

	         PADTYPE   This KEYWORD specifies the type of padding to be 
                          used, if any.  0=Padded at End, 1=Padded at front, 
                          2=Centered (pad front/end) IF not specified, 
                          PADTYPE=1

                PADCHAR   This KEYWORD specifies the character to be used 
                          when padding. The default is a space (' ').

                FORMAT    This keyword allows the FORTRAN type formatting 
                          of the input number (e.g. '(f6.2)')

 Calls       :  None
               
 Restrictions:  None
               
 Side effects:  None
               
 Category    :  Util, Numerical, String
               
 Prev. Hist. :  Original STRN written by Eric W. Deutsch

 Written     :  E. W Deutsch
               
 Modified    :  CDS version C D Pike, RAL, 13-May-93

 Version     :  Version 1, 13-May-1993
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : NUM_CHK()
               
 Purpose     : Check if input is valid number.
               
 Explanation : Checks to see if a string is a valid representation of a 
               number the caller can specify whether the string should 
               represent an integer or a floating point value.
               The IDL functions FIX and FLOAT will convert strings into 
               number values.  However FIX and FLOAT only require that the 
               string begins with a valid number.  
               For example FIX('38%h224') will return the integer value 
               38 and no error is flagged.  This function, NUM_CHK, will 
               check the entire string for errors. You will still need to 
               use FIX or FLOAT afterwards once NUM_CHK has confirmed that 
               the string is valid.
               
 Use         : error = NUM_CHK(string)
    
 Inputs      : STRING   - The string to be checked.  
               
 Opt. Inputs : None
               
 Outputs     : Returns error = 0 if the string represents a valid number and
                       error = 1 if it does not.
               
 Opt. Outputs: None
               
 Keywords    : INTEGER  - Set this keyword to specify that the string should
                          represent an integer.  The default is that the 
                          string is assumed to represent a floating point 
                          value.

 Calls       : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, numerical
               
 Prev. Hist. : None

 Written     : Andrew Bowen, Tessella Support Services, 8/3/93 
               
 Modified    : 

 Version     : Version 1, 8-Mar-93
;-
;+
 Project     :	SOHO - CDS

 Name        :	OPLOT_ERR

 Purpose     :	Overplot data with error bars in both X and Y directions

 Explanation :	Overplots data points with accompanying error bars in both the
		X and Y directions.

		A plot of X versus Y with error bars drawn from X-XERR to
		X+XERR and from Y-YERR to Y+YERR is written to the output
		device.  Optionally, one can give different sizes for the lower
		and upper error bars.

		If !BCOLOR is not zero, then that color is used for error bars.

 Use         :	OPLOT_ERR, [ X, ]  Y  [, XERR=XERR]  [, YERR=YERR]

 Inputs      :	Y = array of Y values.

 Opt. Inputs :	X = array of X values.  If not passed, then the index of Y is
		    used instead.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	XERR	  = Array of errors in X
		YERR	  = array of errors in Y.

		The error arrays can take one of two forms:

		    * Same dimensions as the data arrays, in which case the
		      error is applied in both the X and Y directions

		    * An extra initial dimension of 2, in which case the
		      first value is the size of the lower (or left) error bar,
		      and the second value is the size of the upper (or upper)
		      error bar.

		PSYM	  = Symbol to use for plotting.  Default is 7 (X).
		SYMSIZE   = Symbol size
		COLOR	  = Color to use for plotting.
		BCOLOR	  = Color to use instead of !BCOLOR for error bars.
		LINESTYLE = Line style
		THICK	  = Line thickness
		UTPLOT	  = If set, then the first (X) parameter is considered
			    to be time in one of the CDS time formats.  This is
			    only allowed if both X and Y are passed.  If used,
			    then XERR is in seconds.

 Calls       :	DATATYPE, OUTPLOT

 Common      :	None.

 Restrictions:	Requires that the system parameter !BCOLOR be defined.

 Side effects:	None.

 Category    :	Utilities, Plotting

 Prev. Hist. :	Based on an earlier routine called OPLOTERR2.

 Written     :	William Thompson, GSFC, 19 April 1995

 Modified    :	Version 1, William Thompson, 19 April 1995
		Version 2, William Thompson, GSFC, 20 April 1995
			Added keyword UTPLOT.
			Made determination of symmetrical/asymmetrical error
			bars more robust.

 Version     :	Version 2, 20 April 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	OPLOT_IMAGE
 Purpose     : 
	Overplot an image.
 Explanation : 
	Displays images over pre-existing plots.  The concept is to make
	displaying an image a graphics command, like OPLOT or OCONTOUR.  Then
	the special TV calls don't have to be used.
 Use         : 
	OPLOT_IMAGE, IMAGE
 Inputs      : 
	IMAGE	 = Two dimensional image array to be displayed.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	ORIGIN	 = Two-element array containing the coordinate value in
		   physical units of the center of the first pixel in the
		   image.  If not passed, then [0,0] is assumed.
	SCALE	 = Pixel scale in physical units.  Can have either one or two
		   elements.  If not passed, then 1 is assumed in both
		   directions.
	SMOOTH	 = If set, then the image is expanded with bilinear
		   interpolation.
	NOSCALE  = If set, then the command TV is used instead of TVSCL to
		   display the image.
	MISSING	 = Value flagging missing pixels.  These points are scaled to
		   zero.  Ignored if NOSCALE is set.
	COLOR	 = Color used for drawing the box around the image.
	MAX	 = The maximum value of ARRAY to be considered in scaling the
		   image, as used by BYTSCL.  The default is the maximum value
		   of ARRAY.
	MIN	 = The minimum value of ARRAY to be considered in scaling the
		   image, as used by BYTSCL.  The default is the minimum value
		   of ARRAY.
	TOP	 = The maximum value of the scaled image array, as used by
		   BYTSCL.  The default is !D.N_COLORS-1.
	VELOCITY = If set, then the image is scaled using FORM_VEL as a
		   velocity image.  Can be used in conjunction with COMBINED
		   keyword.  Ignored if NOSCALE is set.
	COMBINED = Signals that the image is to be displayed in one of two
		   combined color tables.  Can be used by itself, or in
		   conjunction with the VELOCITY or LOWER keywords.
	LOWER	 = If set, then the image is placed in the lower part of the
		   color table, rather than the upper.  Used in conjunction
		   with COMBINED keyword.
 Calls       : 
	EXPAND_TV
 Common      : 
	None.
 Restrictions: 
	The graphics device must be capable of displaying images.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	Messages about the size and position of the displayed image are printed
	to the terminal screen.  This can be turned off by setting !QUIET to 1.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, May 1992.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
	William Thompson, September 1992, use COMBINED keyword in place of
		INTENSITY.
	William Thompson, October 1992, modified so that keyword ORIGIN refers
		to the center of the first pixel, rather than to the lower left
		corner.
 Written     : 
	William Thompson, GSFC, May 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 13 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 9 November 1993.
		Removed restriction that scales be positive.
 Version     : 
	Version 2, 9 November 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	OPLOT_STRING
 Purpose     :	
	Overplot an X,Y array using a character string as a symbol.
 Explanation :	
	If /LINE is selected, then OPLOT is called with a plotting symbol of
	zero.  Finally, XYOUTS is called to draw the string at the X,Y
	coordinates.
 Use         :	
	OPLOT_STRING,  [ X, ]  Y, STRING
 Inputs      :	
	Y	= Y array, as in PLOT,Y or PLOT,X,Y
	STRING	= Character string to use as plotting symbol, e.g. "A".  If a
		  number is passed, then it is converted into a string.
 Opt. Inputs :	
	X	= X array, as in PLOT,X,Y
 Outputs     :	
	None.
 Opt. Outputs:	
	None.
 Keywords    :	
	LINE	= If present and non-zero, then connecting lines are drawn
		  between data points.
	COLOR	= Color used for the plotting symbol, and for any connecting
		  lines between data points.
	CHARSIZE= Character size to use for the character plotting symbol.
 Calls       :	
	TRIM
 Common      :	
	None.
 Restrictions:	
	X and Y must be arrays.  STRING must be a character string scalar.
 Side effects:	
	None.
 Category    :	
	Utilities, Graphics.
 Prev. Hist. :	
	W.T.T., May, 1990.
	William Thompson, Nov 1992, modified algorithm for getting the relative
		character size.
 Written     :	
	William Thompson, GSFC, May 1990.
 Modified    :	
	Version 1, William Thompson, GSFC, 9 July 1993.
		Incorporated into CDS library.
		Adjusted vertical spacing to better center characters.
		Fixed bug with logarithmic plots.
 Version     :	
	Version 1, 9 July 1993.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : OUTPLOT
               
 Purpose     : To overplot time series data on a plot created by UTPLOT
               
 Explanation : Converts input x-variable to seconds, applies the time offset
               stored in common and overplots data on a plot created by
               UTPLOT.
               
 Use         : IDL> outplot,x,y + normal oplot keywords.
    
 Inputs      : x - the time variable.  May be either an array of CDS internal
                                       time structures (as produced by the 
                                       routine STR2UTC, say) or...
 
                                       a string array of date/times in a 
                                       format translatable by STR2UTC.

               y - the data value to be plotted.

               
 Opt. Inputs : Various keywords.
               
 Outputs     : None
               
 Opt. Outputs: None
               
 Keywords    : dmy        - if the x-variable is a list of date/time strings
                            this keyword must be used if they are in the
                            format dd-mm(m)-yyyy as opposed to the CDS 
                            'official' format of yyyy-mm-dd

               + other standard oplot keywords

 Calls       : STR2UTC
               UTC2SEC
               SEC2UTC
               VCHECK


 Common      : cds_utplot_com  (for passing of time axis offset to outplot)
               
 Restrictions: Any 2-character year specifications are translated as being
               between 1950 and 2049 (use 4-characters as necessary).

               
 Side effects: None
               
 Category    : Data display, plotting
               
 Prev. Hist. : This is a version of the old OUTPLOT as used on
               Yohkoh and developed by Tolbert, Schwartz and Morrison.
       

 Written     : This version for CDS by C D Pike, RAL, 20-Apr-94
               
 Modified    : 

 Version     : Version 1, 20-Apr-94
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : PATH_DIR()
               
 Purpose     : Return directories in the path containing the input string
               
 Explanation : Searches the IDL path and returns an array of any directory
               names that include the input string.  All directories are
               returned if no input string is given. 
               
 Use         : IDL> print, path_dir(string)
               IDL> pd = path_dir('util', /show)
    
 Inputs      : None
               
 Opt. Inputs : string - search string
               
 Outputs     : Function returns a string array.
               
 Opt. Outputs: None
               
 Keywords    : SHOW  -  print output to screen

 Calls       : GREP()
               BREAK_PATH()
               
 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, string
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 4-Jan-95
               
 Modified    : 

 Version     : Version 1, 4-Jan-95
;-
;+
 Project     : SOHO - CDS

 Name        : 
	PATH_EXPAND
 Purpose     : 
	Expands VMS logical names in a search path.
 Explanation : 
	Expands any logical names in an IDL search PATH (e.g. !PATH) into the
	directories defined by that logical name.   *** VMS only. ***
 Use         : 
	Result = PATH_EXPAND(PATH)
 Inputs      : 
	PATH = Valid IDL search path, e.g. !PATH.
 Opt. Inputs : 
	None.
 Outputs     : 
	The result of the function is a string containing a modified search
	path with the logical names expanded.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	GETTOK
 Common      : 
	None.
 Restrictions: 
	The variable PATH must be in the proper format for !PATH.
 Side effects: 
	None.
 Category    : 
	Documentation, Online_help.
 Prev. Hist. : 
	William Thompson
 Written     : 
	William Thompson, GSFC, 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 23 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 24 September 1993.
		Renamed to PATH_EXPAND so as to not conflict with IDL v3.1
		internal routine called EXPAND_PATH.
 Version     : 
	Version 2, 24 September 1993.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : PB0R()
               
 Purpose     : To calculate the solar P, B0 angles and the semi-diameter.
               
 Explanation : Uses semi-rigorous formulae to calculate the solar P (position
               angle of pole) and B0 (latitude of point at disk centre) angles
               and also the semi-diameter of the solar disk at the date/time 
               requested.
               
 Use         : IDL> ang = pb0r(date_time)
    
 Inputs      : date_time  -  the date/time specified in any CDS format 
               
 Opt. Inputs : None
               
 Outputs     : Function returns a 3-element array with
                                    ang(0)  = P  (degrees)
                                    ang(1)  = B0 (degrees)
                                    ang(2)  = R  semi-diameter (arcmin)  
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : ANYTIM2UTC
               SUN_POS

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, coords
               
 Prev. Hist. : Based on Fortran programs by Hohenkerk and Emerson (RGO)

 Written     : CDS/IDL version, C D Pike, RAL, 16-May-94 
               
 Modified    : Update semi-diameter calculation, CDP, 20-May-94
		Version 3, William Thompson, GSFC, 14 November 1994
			Modified .DAY to .MJD

 Version     : Version 3, 14 November 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	PCL
 Purpose     : 
	Sets graphics device to HP LaserJet PCL file.
 Explanation : 
	This procedure sets the system variables needed to write HP LaserJet
	PCL plot files.  The plot is done in landscape mode, using most of the
	paper.

	SETPLOT is called to save and set the system variables, and DEVICE is
	called to set the plot window size and orientation, and to open the
	file.

	If the plot file is already open, then calling PCL without any
	parameters or keywords allows the user to write into the already opened
	file, in the same mode as before.

 Use         : 
	PCL  [, FILENAME ]

	PCL				;Open PCL plot file
	   ... plotting commands ...	;Create plot
	PCLPLOT				;Close & plot file, reset to prev. dev.
	   or
	PCLCLOSE			;Close w/o printing,  "    "   "    "

 Inputs      : 
	None required.
 Opt. Inputs : 
	FILENAME - Name of PCL plot file to be opened.  If not passed, and no
		   filename was previously passed, "idl.pcl" is assumed.
 Outputs     : 
	A message is printed to the screen.
 Opt. Outputs: 
	None.
 Keywords    : 
	LANDSCAPE = If set, then plotting is done in LANDSCAPE mode (default).
	PORTRAIT  = If set, then plotting is done in PORTRAIT mode.  PORTRAIT
		    takes precedent over LANDSCAPE.
 Calls       : 
	SETPLOT, FORM_FILENAME
 Common      : 
	PCL_FILE which contains PCL_FILENAME, the name of the plotting file,
	and LAST_DEVICE, which is the name of the previous graphics device.
 
	Also calls SETPLOT, which uses common block PLOTFILE.
 
 Restrictions: 
	Only the routines PCLPLOT and PCLCLOSE can be used to close the PCL
	plot file.  It is best if the routines TEK, REGIS, etc. (i.e. those
	routines that use SETPLOT) are used to change the plotting device.

	In general, the SERTS graphics devices routines use the special system
	variables !BCOLOR and !ASPECT.  These system variables are defined in
	the procedure DEVICELIB.  It is suggested that the command DEVICELIB be
	placed in the user's IDL_STARTUP file.

 Side effects: 
	If the FILENAME parameter, or either the LANDSCAPE or PORTRAIT
	keywords, is passed then DEVICE is called to open a new file.  Any
	previously opened PCL plot file would be closed.
 
	If a new file is opened, then the DEVICE routine is called with the
	/LANDSCAPE or /PORTRAIT switch to set the size and orientation of the
	plot window.
 
	If not the first time this routine is called, then system variables
	that affect plotting are reset to previous values.  If it is the first 
	time the routine is called, !FANCY is set to 1.

	In UNIX, if a new file is opened with the same name as an existing
	file, then the old file is lost.
 
 Category    : 
	Utilities, Devices.
 Prev. Hist. : 
	None.
 Written     : 
	William Thompson, GSFC, 15 June 1993.
 Modified    : 
	Version 1, William Thompson, GSFC, 15 June 1993.
		Based on QMS.PRO
 Version     : 
	Version 1, 15 June 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	PCLCLOSE
 Purpose     : 
	Close an HP LaserJet PCL plot file, reset graphics device.
 Explanation : 
	The currently opened HP LaserJet PCL plot file is closed, and the
	graphics device is reset to what was used previously.
 Use         : 
	PCLCLOSE

	PCL				;Open PCL plot file
	   ... plotting commands ...	;Create plot
	PCLPLOT				;Close & plot file, reset to prev. dev.
	   or
	PCLCLOSE			;Close w/o printing,  "    "   "    "

 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	A message is printed to the screen.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	SETPLOT
 Common      : 
	PCL_FILE which contains PCL_FILENAME, the name of the plotting file,
	and LAST_DEVICE, which is the name of the previous graphics device.
 Restrictions: 
	In general, the SERTS graphics devices routines use the special system
	variables !BCOLOR and !ASPECT.  These system variables are defined in
	the procedure DEVICELIB.  It is suggested that the command DEVICELIB be
	placed in the user's IDL_STARTUP file.

 Side effects: 
	The previous plotting device is reset.
 Category    : 
	Utilities, Devices.
 Prev. Hist. : 
	None.
 Written     : 
	William Thompson, GSFC, 15 June 1993.
 Modified    : 
	Version 1, William Thompson, GSFC, 15 June 1993.
		Based on QMCLOSE.PRO.
 Version     : 
	Version 1, 15 June 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	PCLPLOT
 Purpose     : 
	Print an HP LaserJet PCL plot file, reset graphics device.
 Explanation : 
	Sends a PCL plot file generated by IDL to the HP LaserJet PCL laser
	printer.  The default queue is defined by the logical name/environment
	variable HPLASER.  The graphics device is reset to what was used
	previously.
 Use         : 
	PCLPLOT  [, FILE ]  [, /DELETE ]

	PCL				;Open PCL plot file
	   ... plotting commands ...	;Create plot
	PCLPLOT				;Close & plot file, reset to prev. dev.
	   or
	PCLCLOSE			;Close w/o printing,  "    "   "    "

 Inputs      : 
	None required.
 Opt. Inputs : 
	The default filename is either taken from the last call to the PCL
	routine, or is "idl.pcl".

	A filename other than the default can be passed in one of three ways:

		Explicitly:		e.g. PCLPLOT,'graph.pcl'
		By number (VMS)		e.g. PCLPLOT,3   for "idl.pcl;3"
		All versions (VMS)	e.g. PCLPLOT,'*' for "idl.pcl;*"
		All ".pcl" files (UNIX)	e.g. PCLPLOT,'*' for "*.pcl"
 Outputs     : 
	A message is printed to the screen.
 Opt. Outputs: 
	None.
 Keywords    : 
	DELETE	= If set, then file is deleted after printing.
	QUEUE	= Name of printer queue to be used in printing the file.
	COMMAND	= (Unix only.)  Command to be used to send the plot file to the
		  printer.  If not passed, then the environment variable
		  PRINTCOM is checked.  If neither of these is set, then the
		  standard command "lpr" is used.
 Calls       : 
	SETPLOT
 Common      : 
	PCL_FILE which contains PCL_FILENAME, the name of the plotting file,
	and LAST_DEVICE, which is the name of the previous graphics device.
 Restrictions: 
	The requested plot file must exist.

	In general, the SERTS graphics devices routines use the special system
	variables !BCOLOR and !ASPECT.  These system variables are defined in
	the procedure DEVICELIB.  It is suggested that the command DEVICELIB be
	placed in the user's IDL_STARTUP file.

 Side effects: 
	The plot file is queued on the printer HPLASER.  Also, any files
	"idl.pcl" that may be open will be closed.  The previous plotting
	device is reset.
 Category    : 
	Utilities, Devices.
 Prev. Hist. : 
	None.
 Written     : 
	William Thompson, GSFC, 15 June 1993.
 Modified    : 
	Version 1, William Thompson, GSFC, 15 June 1993.
		Based on QMPLOT.PRO.
	Version 2, William Thompson, GSFC, 8 June 1994
		Added keyword COMMAND
 Version     : 
	Version 2, 8 June 1994.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : PCONVERT()
               
 Purpose     : Convert Plot DEVICE, DATA, NORMAL and PIXEL coordinates
               
 Explanation : Uses the data stored for each Plot Region to calculate
		to and from different coordinate systems.
               
 Use         : DEVICE_X = PCONVERT(PLOTREG,COORD)
    
 Inputs      : PLOTREG : A plot region ID as returned by PSTORE or PFIND

		COORD : The coordinate to be converted. See Restrictions.
               
 Opt. Inputs : None.
               
 Outputs     : Return value.
               
 Opt. Outputs: None.
               
 Keywords    : Y : 	Set to mark that it's the Y coordinate that is
			supplied.

		DEVICE/DATA/
		NORMAL/
		PIXEL  : Set to indicate the type of the supplied coordinate.
			Default is DEVICE.

		TO_DEVICE/TO_DATA/
		TO_NORMAL/
		TO_PIXEL: Set to indicate the type of coordinate to convert
			into. Default is DATA.
		
		LOWER: In converting PIXEL -> other units, it is normally
			assumed that the supplied coordinate is the 
			pixel _number_, i.e., the expected output is the
			value at the center of the pixel. If you are 
			supplying 'real' pixel values (with pixel 
			number 2 lying in the interval <1.0, 2.0>) or if
			you want the coordinates at the left/lower border of
			where the pixel is displayed, use this keyword to
			notify. E.g:

			pconvert(P,0,/pixel,/to_data) yields 0.000
			but:
			pconvert(P,0,/pixel,/to_data,/lower) yields -0.500
			given that the data coordinate system is set up
			to correspond with pixel index numbers.

 Calls       : TRIM()

 Common      : WSTORE
               
 Restrictions: There must exist a data coordinate system for the
		specified plot region, stored with PSTORE()

		When converting to and from PIXEL values it is assumed
		that:

		For one-dimensional data, the plot is generated
		with XRANGE = [MIN(x),MAX(x)],XSTYLE=1, and it is
		assumed that the pixels are placed at constant intervals.

		For two-dimensional data, the plot is generated with
		XRANGE = [MIN(x)-XSTEP,MAX(x)+XSTEP],XSTYLE=1, (and
		vice versa for Y) where XSTEP is the (DATA coordinate) 
		distance between two consecutive pixels.
		This is also necessary to get the axis ticks correct
		on the plot/TV'ed data.
               
 Side effects: None.
               
 Category    : Utilities, Graphics
               
 Prev. Hist. : Combined earlier ppix2dat/ppix2dev .... etc.

 Written     : SV Hagfors Haugan, 30-May-1994
               
 Modified    : SVHH, 1-June-1994 -- Found that IDL sometimes chops a pixel
			when calculating !X.S/!Y.S - fixed.
		SVHH, 25-November-1994 -- The above "fix" removed -- better
			to make sure that IDL is not missing the pixel
			using e.g., plot,[..],position=pos+0.0001,/dev
			--  this (hopefully) keeps IDL from miscalculations
			of !P.clip etc.
			Included bounds on /TO_PIXEL conversions.

 Version     : 1.2, 25-November-1994
;-
;+
 NAME:
	PD

 PURPOSE:
	Push a directory onto the top of a directory stack

 CALLING SEQUENCE:
	PD [, dir] [,rotate=rot_num]

 EXAMPLE:
       Suppose the current directory stack is:

          ~ ~/doc ~/idl /usr/local/bin

       Result of "pd":        ~/doc ~ ~/idl /usr/local/bin
       Result of "pd,r=2":    ~/idl ~ ~/doc /usr/local/bin
       Result of "pd,r=3":    /usr/local/bin ~ ~/doc ~/idl 
       Result of "pd,'~/cds': ~/cds ~ ~/doc ~/idl /usr/local/bin

 OPTIONAL INPUTS:
	DIR     - The directory to be pushed. If DIR is not present, or is
		  an undefined variable, PD will swap the first tow directory
                 on the top of the stack, or rotate the directory stack if
                 keyword ROTATE is set.
       ROT_NUM - Number of the directory to be rotated to the top of
                 stack.

 CALLS:
       CDD

 OTHER RELATED ROUTINES:
       CDD, PPD, SD, and CDUP

 SIDE EFFECTS:
       None.

 COMMON BLOCKS:
	DIR_STACK:  Contains the stack.
       CDD:        Common block used by CDD.

 MODIFICATION HISTORY:
       Version 1, Liyun Wang, GSFC/ARC, November 12, 1994
          Modified from PUSHD for use with CDD.
       Version 2, Liyun Wang, GSFC/ARC, January 11, 1995
          Added the ROTATE keyword
       Version 3, Liyun Wang, GSFC/ARC, January 18, 1995
          Fixed problem of changing directories from one disk to the
             other on VMS system

 VERSION:
       Version 3, January 18, 1995
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       PEEK

 PURPOSE:
       Search and print IDL routine.

 EXPLANATION:

 CALLING SEQUENCE:
       PEEK, doc_name

 INPUTS:
       DOC_NAME -- String scalar, name of the IDL routine

 OPTIONAL INPUTS:
       None.

 OUTPUTS:
       None.

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS:
       EXTRACT - If set, extract the document to current directory

 CALLS:
       CONCAT_DIR, GET_MOD, GREP

 COMMON BLOCKS:
       None.

 RESTRICTIONS:
       Under VMS, if a paging command is to be used (rather than the default
       "TYPE/PAGE" command), it has to be defined as a symbol with name
       "page" and can take one argument.

 SIDE EFFECTS:
       None.

 CATEGORY:
       Utility/Help

 PREVIOUS HISTORY:
       Written September 27, 1994, by Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
      Liyun Wang, GSFC/ARC, October 5, 1994
         Current directory also gets searched now.
       Version 2, Liyun Wang, GSFC/ARC, December 6, 1994
          Added the EXTRACT keyword
       Version 3, Liyun Wang, GSFC/ARC, December 15, 1994
          Made it work on VMS system
       Version 4, Liyun Wang, GSFC/ARC, December 29, 1994
          Use the environment variable (or symbol name under VMS) PAGE,
             if defined, as the paging command  

 VERSION:
       Version 4, December 29, 1994
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : PERIODOGRAM()
               
 Purpose     : Calculate periodogram of (unevenly spaced) time series.
               
 Explanation : Uses method of Horne and Baliuna (Ap.J. 1986) to calculate
               the periodogram within user-set frequency or period limits 
               a time series of data.  Data need not be equally spaced in 
               time.

               eg:
	        IDL> t = findgen(1000)
               IDL> x = sin(2.0*!dpi*t/27.0)
               IDL> power=periodogram(t,x,per=[20,30],npts=100)
               IDL> plot,power(0,*),power(1,*)


 Use         : IDL> power = periodogram(time, data,$
                                 [frequency_range=frequency_range, $
                                 period_range=period_range, taper=taper,$
                                 npts=npts])
    
 Inputs      : time - time values to which values in data correspond.
               data - data values corresponding to 'time'.
               
 Opt. Inputs : Either 'freq' or 'period' (see keywords) values must be 
               specified.
               
 Outputs     : Function returns a (2,npts) array.
               array(0,*) = frequency or period array (depends on input given)
               array(1,*) = periodogram power at returned values of array(0,*)
               
 Opt. Outputs: None
               
 Keywords    : freq   - 2 value array giving interval over which to calculate
                        periodogram, given in frequency.
               OR
               period - period values over which to calculate periodogram.

               np     - number of points in calculated periodogram 
                        (default = number of input data points).
               taper  - fraction of time series to be tapered to alleviate
                        end effects. taper=0.25 tapers first and last 25%
                        (default = 0)

               quiet  - set this to not receive statistical info on screen

 Calls       : None

 Common      : None
               
 Restrictions: Not fast for large data sets.
               
 Side effects: None
               
 Category    : Util,  numerical
               
 Prev. Hist. : Original by Judith Lean/John Mariska, NRL.

 Written     : Cosmetic CDS version by C D Pike, RAL, 16-Jan-95 
               
 Modified    : 

 Version     : Version 1, 16-Jan-95
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : PFIND()
               
 Purpose     : Find Plot Region ID corresponding to an event.
               
 Explanation : PFIND is used to return the ID of any plot region that
		has ben stored with PSTORE, whose clip coordinates include
		the position of the supplied event's coordinates.

 Use         : PFIND, EVENT [,FOUND]
    
 Inputs      : EVENT : A WIDGET_DRAW event.

 Opt. Inputs : None.
               
 Outputs     : Return value: The Plot Region ID, or -1 if none found.
               
 Opt. Outputs: FOUND: This is set to 1 if a region was found, 0 if not.
               
 Keywords    : PLOT_NUMBER: Set to a named variable to return the plot number
			that was sent to PSTORE().

		CURRENT: Set to indicate that the event only contains information
			on X/Y coordinates, and that the current plot window
			should be searched.

 Calls       : CDSNOTIFY

 Common      : WSTORE
               
 Restrictions: None.
               
 Side effects: None.
               
 Category    : Utility, Graphics
               
 Prev. Hist. : None.

 Written     : Stein Vidar Hagfors Haugan, May 1994
               
 Modified    : 

 Version     : 1, May 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	PLOT_ERR

 Purpose     :	Plot data with error bars in both X and Y directions

 Explanation :	Plots data points with accompanying error bars in both the X
		and Y directions.

		A plot of X versus Y with error bars drawn from X-XERR to
		X+XERR and from Y-YERR to Y+YERR is written to the output
		device.  Optionally, one can give different sizes for the lower
		and upper error bars.

		If !BCOLOR is not zero, then that color is used for error bars.

 Use         :	PLOT_ERR, [ X, ]  Y  [, XERR=XERR]  [, YERR=YERR]

 Inputs      :	Y = array of Y values.

 Opt. Inputs :	X = array of X values.  If not passed, then the index of Y is
		    used instead.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	XERR	  = Array of errors in X
		YERR	  = array of errors in Y.

		The error arrays can take one of two forms:

		    * Same dimensions as the data arrays, in which case the
		      error is applied in both the X and Y directions

		    * An extra initial dimension of 2, in which case the
		      first value is the size of the lower (or left) error bar,
		      and the second value is the size of the upper (or upper)
		      error bar.

		PSYM	  = Symbol to use for plotting.  Default is 7 (X).
		SYMSIZE   = Symbol size
		COLOR	  = Color to use for plotting.
		BCOLOR	  = Color to use instead of !BCOLOR for error bars.
		LINESTYLE = Line style
		THICK	  = Line thickness
		UTPLOT	  = If set, then the first (X) parameter is considered
			    to be time in one of the CDS time formats.  This is
			    only allowed if both X and Y are passed.  If used,
			    then XERR is in seconds.

		Also, most PLOT keywords are supported.

 Calls       :	DATATYPE, UTPLOT, OUTPLOT

 Common      :	None.

 Restrictions:	Requires that the system parameter !BCOLOR be defined.

 Side effects:	None.

 Category    :	Utilities, Plotting

 Prev. Hist. :	Based on an earlier routine called PLOTERR2.

 Written     :	William Thompson, GSFC, 19 April 1995

 Modified    :	Version 1, William Thompson, 19 April 1995
		Version 2, William Thompson, GSFC, 20 April 1995
			Added keyword UTPLOT.
			Made determination of symmetrical/asymmetrical error
			bars more robust.

 Version     :	Version 2, 20 April 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	PLOT_IMAGE
 Purpose     : 
	Display images with plot axes around it.
 Explanation : 
	Display images with plot axes around it.  Subsequent graphics commands,
	such as OPLOT and CURSOR, can then be called in the ordinary way.  In
	other words, the concept is to make displaying an image a graphics
	command, like PLOT or CONTOUR.  Then the special TV calls don't have to
	be used.

	SETSCALE is called to set the scale.  Axes are then plotted, and
	EXPAND_TV is called to display the image.  SETSCALE is then called
	again to reset to the default.

	If the NOSQUARE keyword is set, then SETSCALE is not called.  In this
	case, either the scale will be chosen in the normal manner, or a
	predefined scale (e.g. using SETSCALE) will be used.

 Use         : 
	PLOT_IMAGE, IMAGE
 Inputs      : 
	IMAGE	 = Two dimensional image array to be displayed.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	ORIGIN	 = Two-element array containing the coordinate value in
		   physical units of the center of the first pixel in the
		   image.  If not passed, then [0,0] is assumed.
	SCALE	 = Pixel scale in physical units.  Can have either one or two
		   elements.  If not passed, then 1 is assumed in both
		   directions.
	NOERASE	 = If set, then the screen is not erased before putting up the
		   plot.
	NOSQUARE = If set, then the scales in the X and Y directions are not
		   forced to be the same.
	NOADJUST = If set, then the viewport parameters !SC1,!SC2,!SC3,!SC4 are
		   not modified.  Ignored if NOSQUARE is set.
	SMOOTH	 = If set, then the image is expanded with bilinear
		   interpolation.
	NOSCALE  = If set, then the command TV is used instead of TVSCL to
		   display the image.
	MISSING	 = Value flagging missing pixels.  These points are scaled to
		   zero.  Ignored if NOSCALE is set.
	COLOR	 = Color used for drawing the axes.
	MAX	 = The maximum value of ARRAY to be considered in scaling the
		   image, as used by BYTSCL.  The default is the maximum value
		   of ARRAY.
	MIN	 = The minimum value of ARRAY to be considered in scaling the
		   image, as used by BYTSCL.  The default is the minimum value
		   of ARRAY.
	TOP	 = The maximum value of the scaled image array, as used by
		   BYTSCL.  The default is !D.N_COLORS-1.
	VELOCITY = If set, then the image is scaled using FORM_VEL as a
		   velocity image.  Can be used in conjunction with COMBINED
		   keyword.  Ignored if NOSCALE is set.
	COMBINED = Signals that the image is to be displayed in one of two
		   combined color tables.  Can be used by itself, or in
		   conjunction with the VELOCITY or LOWER keywords.
	LOWER	 = If set, then the image is placed in the lower part of the
		   color table, rather than the upper.  Used in conjunction
		   with COMBINED keyword.
	TITLE	 = Main plot title, default is !P.TITLE.
	XTITLE	 = X axis title, default is !X.TITLE.
	YTITLE	 = Y axis title, default is !Y.TITLE.
 Calls       : 
	EXPAND_TV, SETSCALE
 Common      : 
	None.
 Restrictions: 
	The graphics device must be capable of displaying images.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	Unless the NOSQUARE keyword is set, the system variables !X.STYLE,
	!Y.STYLE, !X.S, !Y.S, !X.RANGE (!XMIN and !XMAX) and !Y.RANGE (!YMIN
	and !YMAX) are modified.  Any previous settings are lost.

	System variables may be changed even if the routine exits with an error
	message.

	Messages about the size and position of the displayed image are printed
	to the terminal screen.  This can be turned off by setting !QUIET to 1.

 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, May 1992.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
	William Thompson, September 1992, use COMBINED keyword in place of
		INTENSITY.
	William Thompson, October 1992, modified so that keyword ORIGIN refers
		to the center of the first pixel, rather than to the lower left
		corner.
	William Thompson, November 1992, modified behavior when /NOSQUARE
		keyword is used to force exact X and Y ranges.
	William Thompson, November 1992, modified to be compatible with
		!P.MULTI.
	William Thompson, January 1993, modified to use modern system variable
		names.
	William Thompson, 28 April 1993, fixed bug with COLOR keyword.
	William Thompson, 30 April 1993, fixed bug with !P.MULTI.
 Written     : 
	William Thompson, GSFC, May 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 9 November 1993.
		Removed (unnecessary) restriction that scales be positive.
 Version     : 
	Version 2, 9 November 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	PLOT_STRING
 Purpose     :	
	Plot an X, Y array using a character string as the symbol.
 Explanation :	
	PLOT is first called with no plotting symbol.  If /LINE is selected,
	then OPLOT is called with a plotting symbol of zero.  Finally, XYOUTS
	is called to draw the string at the X,Y coordinates.
 Use         :	
	PLOT_STRING,  [ X, ]  Y, STRING
 Inputs      :	
	Y	= Y array, as in PLOT,Y or PLOT,X,Y
	STRING	= Character string to use as plotting symbol, e.g. "A".  If a
		  number is passed, then it is converted into a string.
 Opt. Inputs :	
	X	= X array, as in PLOT,X,Y
 Outputs     :	
	None.
 Opt. Outputs:	
	None.
 Keywords    :	
	LINE	= If present and non-zero, then connecting lines are drawn
		  between data points.
	COLOR	= Color used for the plotting symbol, and for any connecting
		  lines between data points.
	CHARSIZE= Character size to use for the character plotting symbol.
	TITLE	= Main plot title, default is !P.TITLE.
	XTITLE	= X axis title, default is !X.TITLE.
	YTITLE	= Y axis title, default is !Y.TITLE.
	XTYPE	= If set, then X axis is logarithmic.
	YTYPE	= If set, then Y axis is logarithmic.
	XRANGE	= Range of data values in the X direction.
	YRANGE	= Range of data values in the Y direction.
 Calls       :	
	TRIM
 Common      :	
	None.
 Restrictions:	
	X and Y must be arrays.  STRING must be a character string scalar.
 Side effects:	
	None.
 Category    :	
	None.
 Prev. Hist. :	
	W.T.T., May, 1990.
	William Thompson, December 1991, added keywords XTYPE and YTYPE.
	William Thompson, May 1992, added keywords XRANGE and YRANGE.
 Written     :	
	William Thompson, GSFC, May 1990.
 Modified    :	
	Version 1, William Thompson, GSFC, 9 July 1993.
		Incorporated into CDS library.
		Added CHARSIZE keyword.
		Adjusted vertical spacing to better center characters.
		Fixed bug with logarithmic plots.
 Version     :	
	Version 1, 9 July 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	POLY_VAL()
 Purpose     : 
	Returns values from polygonal areas of displayed images.
 Explanation : 
	The TV cursor is activated, and the user is prompted to enter in a 
	series of points defining a polygon surrounding the region of interest 
	on the displayed image.  This procedure is completed by entering in the
	same point twice.  Then POLYFILLV is used to get the positions POS 
	within that polygon.
 Use         : 
	VAL= POLY_VAL( IMAGE, POS, XVAL, YVAL  [, MX, MY, IX, IY ] )
 Inputs      : 
	IMAGE		= The image to take the positions and values from.
 Opt. Inputs : 
	MX, MY	 = Size of displayed image.
	IX, IY	 = Position of the lower left-hand corner of the image.

	If the optional parameters are not passed, then they are retrieved with
	GET_TV_SCALE.  It is anticipated that these optional parameters will
	only be used in extremely rare circumstances.

 Outputs     : 
	Function value	= Values of the points within the selected area.
	POS		= Positions of the points within the selected area.
	XVAL,YVAL	= The X,Y positions of the surrounding polygon.
 Opt. Outputs: 

 Keywords    : 
	DISABLE  = If set, then TVSELECT not used.
 Calls       : 
	GET_TV_SCALE, TVPOINTS
 Common      : 
	None.
 Restrictions: 
	Since this routine works interactively with the cursor, the image 
	must be displayed on the TV screen.  It is best if the image is 
	displayed using EXPTV.  But other methods of display are supported by 
	passing MX, MY, and IX, IY directly to the procedure.

	It is important that the user select the graphics device/window, and
	image region before calling this routine.  For instance, if the image
	was displayed using EXPTV,/DISABLE, then this routine should also be
	called with the /DISABLE keyword.  If multiple images are displayed
	within the same window, then use SETIMAGE to select the image before
	calling this routine.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	A polygon surrounding the selected area is drawn on the image display 
	screen.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., Oct. 1987.
	William Thompson, May 1992, modified to use GET_TV_SCALE.
 Written     : 
	William Thompson, GSFC, October 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 May 1993.
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       POPUP_MSG

 PURPOSE:
       Display a message from a popup text widget.

 Explanation:
     This routine creates a message window that informs the user with a
     message and requires the user to read the message and to dismiss the
     window before control will return to the calling procedure.

 Calling sequence:
     popup_msg, message [, title=title, group=group, font=font,$
                           multiple=multiple, verbatim=verbatim]

  calls to  :  xregistered('pop_msg'), xmanager,'popup_msg'

  common    :  none

 INPUT
     message:  string or string vector containing a message
		that will be displayed on the screen for the
		user to read.
		(multi-line messages are aesthetically better)

 Optional inputs:
     title:    Optional title of the message window
     group:    ID number of the widget which acts as a group leader
     modal:    Make the calling widget inactive if set
     space:    Number of lines to space text; default to 4

 Keywords:
     left_justify - Left justify text (default is to centre it)
     right        - Right justify text
     verbatim     - Don't do any adjustment of text layout

 OUTPUT
     none

 MODIFICATION HISTORY
	JAN 1993        -- Elaine Einfalt (HSTX)
       August 19, 1994 -- Liyun Wang (ARC)
       August 31, 1994 -- Liyun Wang (ARC), added GROUP keyword
       Feb 16 1995     -- C D Pike, RAL.  Added FONT and MULTIPLE keywords.
       Feb 20 1995     -- Added crude left justify option.
       April 27, 1995  -- Liyun Wang, GSFC/ARC, Added keywords SPACE, RIGHT
       April 30, 1995  -- C D Pike, RAL, Added VERBATIM keyword.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;-
;+
 NAME:
	PPD

 PURPOSE:
       Pop up directory name from the directory stack and CD to it.

 CALLING SEQUENCE:
	PPD

 SIDE EFFECTS:
	The top entry of the directory stack is removed.

 RESTRICTIONS:
	Popping up a directory from an empty stack causes a warning
	message to be printed.  The current directory is not changed
	in this case.

 COMMON BLOCKS:
	STACK_DIR:  Contains the stack.
       CDD:        Common block used by CDD.

 MODIFICATION HISTORY:
	17, July, 1989, Written by AB, RSI.
       Version 2, Liyun Wang, GSFC/ARC, November 12, 1994
          Modified from POPD for use with CDD and PD.

 VERSION:
       Version 2, November 12, 1994
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : PRESTORE
               
 Purpose     : Restore Plot Region data (!P,!X,!Y,!D, and data X/Y size)
               
 Explanation : Prestore is used to restore information about plot regions
		previously saved with PSTORE().
		The !P/!X/!Y/!D system variables are set to the values
		they had at the moment of the call to PSTORE().

		The Plot Region is identified by the plot region ID that
		was returned by PSTORE(), or found by PFIND()

 Use         : PRESTORE,P_REG [,DATAX, DATAY, SCRNX, SCRNY, JX, JY]
    
 Inputs      : P_REG : The plot region ID.

 Opt. Inputs : None.
               
 Outputs     : DATAX/Y : The size of the data in the plot region, as reported
			to PSTORE().

		SCRNX/Y : The size of the display region on the screen (device units)
		
		JX/JY   : !P.CLIP(0) and !P.CLIP(1)
               
 Opt. Outputs: None.
               
 Keywords    : PLOT_NUMBER: Set to a named variable to return the plot number
			that was sent to PSTORE().

 Calls       : SETWINDOW, TRIM()

 Common      : WSTORE
               
 Restrictions: None.
               
 Side effects: None.
               
 Category    : Utility, Graphics
               
 Prev. Hist. : None.

 Written     : Stein Vidar Hagfors Haugan, May 1994
               
 Modified    : 

 Version     : 1, May 1994
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : PRINT_STR
               
 Purpose     : Divide and print a string.  Optionally write ascii file.
               
 Explanation : Divides a string into an array (using supplied delimiter)
               and prints one element per line.  Most obvious use is to 
               print !path. If input is already a string vector then just
               print the elements one per line.
               
 Use         : IDL> print_str, string [, delim=delim, hard=hard, quiet=quiet
                                         file=file, keep=keep]
    
 Inputs      : string - the string to be split and printed
               
 Opt. Inputs : None
               
 Outputs     : Results are printed to screen and/or written to file
               
 Opt. Outputs: None
               
 Keywords    : DELIM - a substring to delimit the string items, default is ':'
               HARD  - produce a hard copy.
               QUIET - no output to screen.
               FILE  - specify output file, if null on input then name of
                       file created is returned in this - must use /keep if
                       this is null on entry. 
               KEEP  - do not delete disk file.

 Calls       : STR2ARR

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, string
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 20-July-94
               
 Modified    : Add print delay as fudge.  CDP, 9-Dec-94
               Handle vector input.  CDP, 23-Dec-94

               Added hardcopy keyword.  CDP, 20-Feb-95
               Added QUIET, FILE and KEEP keywords.  CDP, 9-Jun-95

 Version     : Version 4, 9-Jun-95
;-
;+
 Project     : SOHO - CDS

 Name        : 
	PRODUCT()
 Purpose     : 
	Calculates the product of all the elements of an array.
 Explanation : 
	Calculates the product of all the elements of an array--the
	multiplicative equivalent of total.
 Use         : 
	Result = PRODUCT(ARRAY)
 Inputs      : 
	ARRAY	= Array of elements to multiply together.  For instance, ARRAY
		  could contain the dimensions of another array--then
		  PRODUCT(ARRAY) would be the total number of elements of that
		  other array.
 Opt. Inputs : 
	None.
 Outputs     : 
	The result of the function is the total product of all the elements of
	ARRAY.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	ARRAY must be a numerical type.
 Side effects: 
	The result will always be of at least floating point type.
 Category    : 
	Utilities, Arrays.
 Prev. Hist. : 
	William Thompson, Feb. 1992.
 Written     : 
	William Thompson, GSFC, February 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 April 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	PROF()
 Purpose     : 
	Returns profiles from arrays along the path XVAL, YVAL.
 Explanation : 
	After the arrays XVAL and YVAL are converted, the routine INTERP2 is 
	called to do the interpolation.
 Use         : 
	P = PROF( ARRAY, XVAL, YVAL )
 Inputs      : 
	ARRAY	  = Image to take profile from.
	XVAL,YVAL = The X,Y coordinates of points defining the path.
 Opt. Inputs : 
	None.
 Outputs     : 
	Function value	= Values of ARRAY along profile.
	XVAL,YVAL	= The X,Y coordinates of the resulting path.  The
			  original points are converted to a set with points
			  set one pixel apart along the path.
 Opt. Outputs: 
	None.
 Keywords    : 
	MISSING  = Value flagging missing pixels.
 Calls       : 
	GET_IM_KEYWORD, INTERP2
 Common      : 
	None.
 Restrictions: 
	ARRAY must be two-dimensional.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	The arrays XVAL and YVAL are changed.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., Oct. 1987.
	W.T.T., Jan. 1991.  Changed FLAG to keyword BADPIXEL.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
 Written     : 
	William Thompson, GSFC, October 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	PS
 Purpose     : 
	Sets graphics device to PostScript file.
 Explanation : 
	This procedure sets the system variables needed to write PostScript
	printer plot files.  The default configuration is landscape mode.
	Alternate modes are (TeX-compatible) encapsulated mode, portrait mode
	using all of the paper, and color mode (either landscape or portrait)
	which is compatible with the color printer.

	SETPLOT is called to save and set the system variables.  If a new file
	is to be opened, then DEVICE is called to set the plot window size and
	orientation, and to open the file.

	If the plot file is already open, then calling PS without any
	parameters or keywords allows the user to write into the already opened
	file, in the same mode as before.

 Use         : 
	PS  [, FILENAME ]

	PS				;Open PostScript plot file
	   ... plotting commands ...	;Create plot
	PSPLOT				;Close & plot file, reset to prev. dev.
	   or
	PSCLOSE				;Close w/o printing,  "    "   "    "

 Inputs      : 
	None required unless /ENCAPSULATED switch set.  See FILENAME below.
 Opt. Inputs : 
	FILENAME - Name of postscript file to be opened.  If not passed, and no
		   filename was previously passed, "idl.ps" is assumed.  If the
		   /ENCAPSULATED switch is passed, then a filename must be
		   passed.
 Outputs     : 
	A message is printed to the screen.
 Opt. Outputs: 
	None.
 Keywords    : 
	The following keywords are listed in the order of precedence.

	ENCAPSULATED = If set, then the plot is done in encapsulated landscape
		       mode.  This is compatible with TeX/LaTeX.
	TEX	     = A synonym for ENCAPSULATED.
	PORTRAIT     = If set, then the plot is done in portrait mode, using
		       all of the paper.
	LANDSCAPE    = If set, then the plot is done in landscape mode, using
		       all of the paper.  This is the default mode.

	In addition, the following keyword can be used with any of the others.

	COLOR	     = If set, then a color plot is made.
	COPY	     = If set, (together with /COLOR) then the current color
		       table is copied to the PostScript device.  Also, unless
		       INTERPOLATE is also set, the SETFLAG routine is called
		       to set TOP equal to the number of colors.  Also makes
		       sure that !P.COLOR does not exceed the TOP color.
		       Requires the SERTS image display software.
	INTERPOLATE  = If set, (together with /COLOR and /COPY) then the
		       current color table is interpolated to the PostScript
		       device.

 Calls       : 
	SETPLOT, FORM_FILENAME
 Common      : 
	PS_FILE which contains PS_FILENAME, the name of the plotting file,
	LAST_DEVICE, which is the name of the previous graphics device, and
	various parameters used to keep track of which configuration is being
	used.

	Also calls SETPLOT, which uses common block PLOTFILE.

 Restrictions: 
	Only the routines PSPLOT and PSCLOSE can be used to close the
	PostScript file.  It is best if the routines TEK, REGIS, etc. (i.e.
	those routines that use SETPLOT) are used to change the plotting
	device.

	In general, the SERTS graphics devices routines use the special system
	variables !BCOLOR and !ASPECT.  These system variables are defined in
	the procedure DEVICELIB.  It is suggested that the command DEVICELIB be
	placed in the user's IDL_STARTUP file.

 Side effects: 
	If the filename, or one of the configuration keywords (ENCAPSULATED,
	COLOR, PORTRAIT, or LANDSCAPE) are passed, then DEVICE is called to
	open a new file.  Any previously opened PostScript file would be
	closed.

	If a new file has to be opened, and if none of the configuration
	keywords are passed, then the default configuration (LANDSCAPE) is
	used.  This is true even if the last PostScript file was in a different
	configuration.

	If not the first time this routine is called, then system variables
	that affect plotting are reset to previous values.  If it is the first 
	time the routine is called, !FANCY is set to 1.

	In UNIX, if a new file is opened with the same name as an existing
	file, then the old file is lost.

 Category    : 
	Utilities, Devices.
 Prev. Hist. : 
	W.T.T., Nov. 1989.
	W.T.T., Aug. 1990, added LAST_DEVICE to common block.
	W.T.T., Feb. 1991, added keywords LANDSCAPE, PORTRAIT, TEX, COLOR.
	W.T.T., June 1992, fixed bug where CUR_CONFIG was not stored.
	W.T.T., Nov. 1992, added !P.POSITION to common block.
 Written     : 
	William Thompson, GSFC, November 1989.
 Modified    : 
	Version 1, William Thompson, GSFC, 27 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 11 November 1993.
		Added ENCAPSULATED keyword.  Relegated TEX to a synonym.
	Version 3, William Thompson, GSFC, 14 September 1994
		Added COPY keyword.
	Version 4, William Thompson, GSFC, 21 June 1995
		Added INTERPOLATE keyword.
 Version     : 
	Version 4, 21 June 1995
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : PS_LONG
               
 Purpose     : To stretch plotting area when device is PostScript printer.
               
 Explanation : Resets plotting area using device command.  If the environment
               variable US_FUNNY_PAPER is defined then the size is adjusted
               from A4 to US size.
               
 Use         : IDL> ps_long
    
 Inputs      : None
               
 Opt. Inputs : None
               
 Outputs     : None
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : None

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util,  plotting
               
 Prev. Hist. : From Yohkoh routine by R D Bentley.

 Written     : CDS version by C D Pike, RAL, 21-Apr-94
               
 Modified    : 

 Version     : Version 1, 21-Apr-94
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : PS_RESET
               
 Purpose     : Resets PostScript plotting area to Portrait, normal size.
               
 Explanation : The antidote to PS_LONG.
               
 Use         : IDL> ps_reset
    
 Inputs      : None
               
 Opt. Inputs : None
               
 Outputs     : None
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : None

 Common      : None
               
 Restrictions: None
               
 Side effects: Returns PostScript device to Portrait mode also.
               
 Category    : Util, device
               
 Prev. Hist. : Yohkoh routine by R D Bentley.

 Written     : CDS version by C D Pike, RAL, 21-Apr-94
               
 Modified    : 

 Version     : Version 1, 21-Apr-94
;-
;+
 Project     : SOHO - CDS

 Name        : 
	PSCLOSE
 Purpose     : 
	Close a PostScript plot file, reset graphics device.
 Explanation : 
	The currently opened PostScript plot file is closed, and the graphics
	device is reset to what was used previously.
 Use         : 
	PSCLOSE

	PS				;Open PostScript plot file
	   ... plotting commands ...	;Create plot
	PSPLOT				;Close & plot file, reset to prev. dev.
	   or
	PSCLOSE				;Close w/o printing,  "    "   "    "

 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	A message is printed to the screen.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	SETPLOT
 Common      : 
	PS_FILE which contains PS_FILENAME, the name of the plotting file,
	LAST_DEVICE, which is the name of the previous graphics device, and
	various parameters used to keep track of which configuration is being
	used.
 Restrictions: 
	In general, the SERTS graphics devices routines use the special system
	variables !BCOLOR and !ASPECT.  These system variables are defined in
	the procedure DEVICELIB.  It is suggested that the command DEVICELIB be
	placed in the user's IDL_STARTUP file.

 Side effects: 
	The previous plotting device is reset.
 Category    : 
	Utilities, Devices.
 Prev. Hist. : 
	William Thompson, August 1990.
	W.T.T., Feb. 1991, modified to reflect change in common block PS_FILE.
 Written     : 
	William Thompson, GSFC, August 1990.
 Modified    : 
	Version 1, William Thompson, GSFC, 27 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 2 January 1994.
		Added save into common plot of current configuration.
 Version     : 
	Version 2, 2 January 1994.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	PSPLOT
 Purpose     : 
	Prints PostScript plots and resets to the previous device.
 Explanation : 
	Send a PostScript plot file generated by IDL to the PostScript laser
	printer.  The default queue is defined by the logical name/environment
	variable PSLASER.

	If PSPLOT is being used to close the PostScript file as well as print
	it, and the queue name is not passed explicitly, then it will
	automatically select a color printer (PSCOLOR) if the file was opened by
	the PS procedure with /COLOR set, and a regular PostScript printer
	(PSLASER) otherwise.  However, if the file was previously closed with
	PSCLOSE or PSPLOT, then either the /COLOR or QUEUE keyword will need to
	be used to direct a color PostScript file to the appropriate printer.

 Use         : 
	PSPLOT  [, FILE ]  [, /DELETE ]

	PS				;Open PostScript plot file
	   ... plotting commands ...	;Create plot
	PSPLOT				;Close & plot file, reset to prev. dev.
	   or
	PSCLOSE				;Close w/o printing,  "    "   "    "

 Inputs      : 
	None required.
 Opt. Inputs : 
	The default filename is either taken from the last call to the PS
	routine, or is "idl.ps".

	A filename other than the default can be passed in one of three ways:

		Explicitly:		e.g. PSPLOT,'graph.ps'
		By number (VMS)		e.g. PSPLOT,3   for "idl.ps;3"
		All versions (VMS)	e.g. PSPLOT,'*' for "idl.ps;*"
		All ".ps" files (UNIX)	e.g. PSPLOT,'*' for "*.ps"
 Outputs     : 
	A message is printed to the screen.
 Opt. Outputs: 
	None.
 Keywords    : 
	DELETE	= If set, then file is deleted after printing.
	QUEUE	= Name of printer queue to be used in printing the file.  If
		  not passed, then the environment variable PSLASER (or
		  PSCOLOR) is checked for the name of the print queue.
	COLOR	= If set, then the environment variable PSCOLOR is checked for
		  the name of the print queue rather then PSLASER.  Ignored if
		  QUEUE is passed.
	COMMAND	= (Unix only.)  Command to be used to send the plot file to the
		  printer.  If not passed, then the environment variable
		  PRINTCOM is checked.  If neither of these is set, then the
		  standard command "lpr" is used.
 Calls       : 
	SETPLOT
 Common      : 
	PS_FILE which contains PS_FILENAME, the name of the plotting file,
	LAST_DEVICE, which is the name of the previous graphics device, and
	various parameters used to keep track of which configuration is being
	used.
 Restrictions: 
	The requested plot file must exist.

	In general, the SERTS graphics devices routines use the special system
	variables !BCOLOR and !ASPECT.  These system variables are defined in
	the procedure DEVICELIB.  It is suggested that the command DEVICELIB be
	placed in the user's IDL_STARTUP file.

 Side effects: 
	The plot file is queued on the printer.  Also, any files "idl.ps" that
	may be open will be closed.  The previous plotting device is reset.
 Category    : 
	Utilities, Devices.
 Prev. Hist. : 
	William Thompson, November 1989.
	W.T.T., added check for LAST_DEVICE, August 1990.
	W.T.T., changed DELETE to keyword, February, 1991.
	W.T.T., Feb. 1991, modified to reflect change in common block PS_FILE.
	W.T.T., May 1991, extended environment variable PSLASER to UNIX.
	W.T.T., Jun 1992, added check for PSCOLOR.
	W.T.T., Jul 1992, added check for PS_FILENAME in common block.
	W.T.T., Sep 1992, added COLOR keyword.
 Written     : 
	William Thompson, GSFC, November 1989.
 Modified    : 
	Version 1, William Thompson, GSFC, 27 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 2 January 1994.
		Added save into common plot of current configuration.
       Version 2.1, S.V. Haugan, ItA/UiO
		Added support for alternative UNIX print commands via $PRINTCOM
	Version 3, William Thompson, GSFC, 8 June 1994
		Added keyword COMMAND
 Version     : 
	Version 3, 8 June 1994.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : PSTORE()
               
 Purpose     : Store Plot Region data (!P,!X,!Y,!D, and data X/Y size)
               
 Explanation : Pstore is used to store information about plot regions
		where data is displayed (plotted or TV'ed). 
		The !P/!X/!Y/!D system variables should be set by
		the caller by e.g. plotting with x/yrange set
		to the correct values, with x/ystyle=1.

		More than one plot region per window can be used,
		just supply a unique NUMBER for each plot. If the
		plot is redisplayed later, an identical call to
		PSTORE will store the information on the same plot
		region ID number as the previous one.

		For TV'ed data, note that the correct ranges for the
		axes are [coordinate of leftmost pixel - 1/2 *stepsize,
			  coordinate of rightmost ""   + 1/2 *stepsize]
		For plotted data (i.e., plot,x,y), xrange should
		not be expanded in this way (the first and last data
		points will fall _on_ the border of the plot region).
 
               Equidistant scales are assumed. 

 Use         : plot_region_no = PSTORE(NUMBER,XSIZE,YSIZE)
    
 Inputs      : NUMBER : A user-assigned number identifying the
			plot region(s) within this window.

		X/YSIZE: The size of the displayed data. For 1D data,
			use XSIZE=number of points, and YSIZE=1.
               
 Opt. Inputs : None.
               
 Outputs     : Return value: A Plot Region ID, referring to
			the stored plot region.
               
 Opt. Outputs: None.
               
 Keywords    : CLEAN : Set to remove any earlier plot region definitions
			for this window.

		INIT : Restarts the common block.

 Calls       : None.

 Common      : WSTORE
               
 Restrictions: None.
               
 Side effects: None.
               
 Category    : Utility, Graphics
               
 Prev. Hist. : None.

 Written     : Stein Vidar Hagfors Haugan, May 1994
               
 Modified    : 

 Version     : 1, May 1994
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : PURPOSE
               
 Purpose     : List procedure/function names and purposes.
               
 Explanation : Creates a list of all .PRO files and then searches them for
               the standard CDS header and extracts the Name and Purpose 
               fields.  The resultant one-line documentation is printed to
               the screen or to the file "purpose.doc".
               
 Use         : IDL> purpose [,file_spec, /hard, /path, list=list]
               IDL> purpose, path='userlib
    
 Inputs      : None
               
 Opt. Inputs : file_spec   -  specification of the files to be searched.
                              If omitted, the current directory is used.
               
 Outputs     : The information can be printed to the screen or to the default
               output file "purpose.doc" (or both).
               
 Opt. Outputs: None
               
 Keywords    : hard    -  specifies that output is to be stored in file
                          purpose.doc
               path    -  if present (/path or path=1) use current IDL path 
                          (!path) as the search path but select only the "cds"
                          directories, otherwise use any directory whose name
                          contains the string specified by path.

               quiet   -  if specified, do not print to screen.

               list    -  if present, the list of one-liners is returned
                          in a string array.

 Calls       : None
               
 Restrictions: When the /path option is requested, only directories containing
               the letters "cds" will be used.  The VMS option is also very
               fragile in using the path directories and is likely not
               to work if the path contains symbols and libraries etc.
               
 Side effects: None
               
 Category    : Utilities, Documentation, Manual
               
 Prev. Hist. : None

 Written     : C D Pike,  RAL,  23-Jun-1993
               
 Modified    : To include output variable LIST and keyword QUIET.
                                                        CDP, 12-Nov-93
               To detect uppercase NAME and PURPOSE for compatibility with
               IDL userlib routines.   CDP, 5-May-94
            
               Include more flexible path specification, CDP, 13-May-94

               Make search for Name and Purpose more robust, CDP, 25-May-94
               Back to only read 10 lines from ;+.  CDP, 17-Jun-94
               Improve handling of no files/directory present when path
               specified.  CDP, 21-Jun-94

 Version     : Version 7,  21-Jun-1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	PUT
 Purpose     : 
	Places one of several images on the image display screen.
 Explanation : 
	Uses SETIMAGE, SCALE_TV and EXPAND_TV to place an image on the TV
	display screen.  The image is placed at position IX out of NX from the
	left and position IY out of NY from the top.
 Use         : 
	PUT, ARRAY, II, NN
	PUT, ARRAY, IX, NX, IY, NY
	PUT, ARRAY, X1, X2, Y1, Y2, /NORMAL

	Examples: Display the third in a series of five images, and let the
	computer decide how to arrange the images.  All of the images should be
	of the same size.

		PUT, image, 3, 5

	In this example, the computer will decide to put the images into one of
	the following configurations, depending on the size of the screen, and
	the size of the images.

		1       1 2     1 2 3     1 2 3 4     1 2 3 4 5
		2       3 4     4 5       5
		3       5
		4
		5

	Display an image as the third of five from the left, and the second of
	three from the top.

		PUT, image, 3, 5, 2, 3

	Display an image in a box using the top 80% of the screen, with 5%
	margins on either side.

		PUT, image, 0.05, 0.95, 0.2, 1, /NORMAL

 Inputs      : 
	ARRAY	 = Image to be displayed.

	Also, either the parameters II, NN or the parameters IX, NX, IY, NY
	must be passed.

 Opt. Inputs : 

	II, NN	 = Relative position within a series of NN images.  The program
		   chooses how to arrange the images along the X and Y axes
		   depending on the size of the image and the size of the
		   window.

		or

	IX, NX	= Relative position along X axis, expressed as position IX
		  out of a possible NX, from left to right.
	IY, NY	= Relative position along Y axis, from top to bottom.

		or

	X1, X2	= Coordinates along the X axis of an arbitrary box in
		  normalized coordinates.  Can have values between 0 and 1.
	Y1, Y2	= Coordinates along the Y axis of an arbitrary box in
		  normalized coordinates.  Can have values between 0 and 1.

 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	NORMAL	 = If set, then the input parameters are in normalized
		   coordinates.  Otherwise, they refer to the relative position
		   of the image on the screen in a regular array of images.
	NOSQUARE = If passed, then pixels are not forced to be square.
	SMOOTH	 = If passed, then interpolation used in expanding array.
	NOBOX	 = If passed, then box is not drawn, and no space is reserved
		   for a border around the image.
	NOSCALE  = If passed, then the command TV is used instead of TVSCL to
		   display the image.
	MISSING	 = Value flagging missing pixels.  These points are scaled to
		   zero.  Ignored if NOSCALE is set.
	SIZE	 = If passed and positive, then used to determine the scale of
		   the image.  Returned as the value of the image scale.  May
		   not be compatible with /NOSQUARE.
	DISABLE  = If set, then TVSELECT not used.
	NOEXACT  = If set, then exact scaling is not imposed.  Otherwise, the
		   image scale will be either an integer, or one over an
		   integer.  Ignored if SIZE is passed with a positive value.
	XALIGN	 = Alignment within the image display area.  Ranges between 0
		   (left) to 1 (right).  Default is 0.5 (centered).
	YALIGN	 = Alignment within the image display area.  Ranges between 0
		   (bottom) to 1 (top).  Default is 0.5 (centered).
	RELATIVE = Size of area to be used for displaying the image, relative
		   to the total size available.  Must be between 0 and 1.
		   Default is 1.  Passing SIZE explicitly will override this
		   keyword.
	COLOR	 = Color used for drawing the box around the image.
	MAX	 = The maximum value of ARRAY to be considered in scaling the
		   image, as used by BYTSCL.  The default is the maximum value
		   of ARRAY.
	MIN	 = The minimum value of ARRAY to be considered in scaling the
		   image, as used by BYTSCL.  The default is the minimum value
		   of ARRAY.
	TOP	 = The maximum value of the scaled image array, as used by
		   BYTSCL.  The default is !D.N_COLORS-1.
	VELOCITY = If set, then the image is scaled using FORM_VEL as a
		   velocity image.  Can be used in conjunction with COMBINED
		   keyword.  Ignored if NOSCALE is set.
	COMBINED = Signals that the image is to be displayed in one of two
		   combined color tables.  Can be used by itself, or in
		   conjunction with the VELOCITY or LOWER keywords.
	LOWER	 = If set, then the image is placed in the lower part of the
		   color table, rather than the upper.  Used in conjunction
		   with COMBINED keyword.
	ORIGIN	 = Two-element array containing the coordinate value in
		   physical units of the center of the first pixel in the
		   image.  If not passed, then [0,0] is assumed.
	SCALE	 = Pixel scale in physical units.  Can have either one or two
		   elements.  If not passed, then 1 is assumed in both
		   directions.
	DATA	 = If set, then immediately activate the data coordinates for
		   the displayed image.
 Calls       : 
	EXPAND_TV, GET_IM_KEYWORD, SCALE_TV, SETIMAGE, TRIM, TVSELECT,
	TVUNSELECT
 Common      : 
	None.
 Restrictions: 
	ARRAY must be two-dimensional.  If /NORMAL is set, then X1, X2, Y1, Y2
	must be between 0 and 1.  Otherwise, IX must be between 1 and NX, and
	(if passed) IY must be between 1 and NY.

	If the II, NN option is used, then II must be between 1 and NN.  This
	option really only works if all the images to be displayed are the same
	size.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	SETIMAGE is set to the portion of the window the image is displayed in.

	Messages about the size and position of the displayed image are printed
	to the terminal screen.  This can be turned off by setting !QUIET to 1.

 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., Oct. 1987.
	W.T.T., Jan. 1991, added BADPIXEL keyword.
	W.T.T., Feb. 1991, modified to use SETIMAGE.
	W.T.T., Feb. 1991, added SIZE keyword.
	W.T.T., Mar. 1991, this used to be PLACE_TV, and PUT was somewhat
			   different.
	W.T.T., Mar. 1991, added NOEXACT keyword.
	W.T.T., Nov. 1991, added MAX, MIN, and TOP keywords.
	W.T.T., Nov. 1991, added INTENSITY, VELOCITY and COMBINED keywords.
	W.T.T., Jan. 1992, changed SETIMAGE behavior, and added RETAIN keyword.
	W.T.T., Feb. 1992, added LOWER keyword.
	W.T.T., Feb. 1992, returned SETIMAGE behavior to the way it was before.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
	William Thompson, September 1992, use COMBINED keyword in place of
					  INTENSITY.
	William Thompson, Oct. 1992, changed strategy used when II,NN are
				     passed instead of IX,NX,IY,NY.
	William Thompson, November 1992, added /NORMAL keyword.
 Written     : 
	William Thompson, October 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 24 June 1993.
		Fixed problem with /NORMAL keyword.
	Version 3, William Thompson, GSFC, 2 September 1993.
		Added ORIGIN, SCALE and DATA keywords.
 Version     : 
	Version 3, 2 September 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	QMCLOSE
 Purpose     : 
	Close a QMS plot file and reset the graphics device.
 Explanation : 
	The currently opened QMS plot file is closed, and the graphics device
	is reset to what was used previously.
 Use         : 
	QMCLOSE

	QMS				;Open QMS plot file
	   ... plotting commands ...	;Create plot
	QMPLOT				;Close & plot file, reset to prev. dev.
	   or
	QMCLOSE				;Close w/o printing,  "    "   "    "

 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	A message is printed to the screen.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	SETPLOT
 Common      : 
	QMS_FILE which contains QMS_FILENAME, the name of the plotting file,
	and LAST_DEVICE, which is the name of the previous graphics device.
 Restrictions: 
	In general, the SERTS graphics devices routines use the special system
	variables !BCOLOR and !ASPECT.  These system variables are defined in
	the procedure DEVICELIB.  It is suggested that the command DEVICELIB be
	placed in the user's IDL_STARTUP file.

 Side effects: 
	The previous plotting device is reset.
 Category    : 
	Utilities, Devices.
 Prev. Hist. : 
	William Thompson, Feb. 1991, from PSCLOSE
 Written     : 
	William Thompson, GSFC, February 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 27 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 27 April 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	QMPLOT
 Purpose     : 
	Print a QMS plot file and reset the graphics device.
 Explanation : 
	Sends a QMS plot file generated by IDL to the QMS laser printer.  The
	default queue is defined by the logical name/environment variable
	LASER.  The graphics device is reset to what was used previously.
 Use         : 
	QMPLOT  [, FILE ]  [, /DELETE ]

	QMS				;Open QMS plot file
	   ... plotting commands ...	;Create plot
	QMPLOT				;Close & plot file, reset to prev. dev.
	   or
	QMCLOSE				;Close w/o printing,  "    "   "    "

 Inputs      : 
	None required.
 Opt. Inputs : 
	The default filename is either taken from the last call to the QMS
	routine, or is "idl.bit".

	A filename other than the default can be passed in one of three ways:

		Explicitly:		e.g. QMPLOT,'graph.bit'
		By number (VMS)		e.g. QMPLOT,3   for "idl.bit;3"
		All versions (VMS)	e.g. QMPLOT,'*' for "idl.bit;*"
		All ".bit" files (UNIX)	e.g. QMPLOT,'*' for "*.bit"
 Outputs     : 
	A message is printed to the screen.
 Opt. Outputs: 
	None.
 Keywords    : 
	DELETE	= If set, then file is deleted after printing.
	QUEUE	= Name of printer queue to be used in printing the file.
	COMMAND	= (Unix only.)  Command to be used to send the plot file to the
		  printer.  If not passed, then the environment variable
		  PRINTCOM is checked.  If neither of these is set, then the
		  standard command "lpr" is used.
 Calls       : 
	SETPLOT
 Common      : 
	QMS_FILE which contains QMS_FILENAME, the name of the plotting file,
	and LAST_DEVICE, which is the name of the previous graphics device.
 Restrictions: 
	The requested plot file must exist.

	In general, the SERTS graphics devices routines use the special system
	variables !BCOLOR and !ASPECT.  These system variables are defined in
	the procedure DEVICELIB.  It is suggested that the command DEVICELIB be
	placed in the user's IDL_STARTUP file.

 Side effects: 
	The plot file is queued on the printer LASER.  Also, any files
	"idl.bit" that may be open will be closed.  The previous plotting
	device is reset.
 Category    : 
	Utilities, Devices.
 Prev. Hist. : 
	W.T.T., February, 1991, from PSPLOT.
	W.T.T., May 1991, extended environment variable LASER to UNIX.
	W.T.T., Jul 1992, added check for QMS_FILENAME in common block.
 Written     : 
	William Thompson, GSFC, February 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 27 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 3 June 1993.
		Fixed bug with ENDIF/ENDELSE statements.
	Version 3, William Thompson, GSFC, 8 June 1994
		Added keyword COMMAND
 Version     : 
	Version 3, 8 June 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	QMS
 Purpose     : 
	Sets graphics device to QMS Quikplot file.
 Explanation : 
	This procedure sets the system variables needed to write QMS plot
	files.  The plot is done in landscape mode, using most of the paper.

	SETPLOT is called to save and set the system variables, and DEVICE is
	called to set the plot window size and orientation, and to open the
	file.

	If the plot file is already open, then calling QMS without any
	parameters or keywords allows the user to write into the already opened
	file, in the same mode as before.

 Use         : 
	QMS  [, FILENAME ]

	QMS				;Open QMS plot file
	   ... plotting commands ...	;Create plot
	QMPLOT				;Close & plot file, reset to prev. dev.
	   or
	QMCLOSE				;Close w/o printing,  "    "   "    "

 Inputs      : 
	None required.
 Opt. Inputs : 
	FILENAME - Name of QMS plot file to be opened.  If not passed, and no
		   filename was previously passed, "idl.bit" is assumed.
 Outputs     : 
	A message is printed to the screen.
 Opt. Outputs: 
	None.
 Keywords    : 
	LANDSCAPE = If set, then plotting is done in LANDSCAPE mode (default).
	PORTRAIT  = If set, then plotting is done in PORTRAIT mode.  PORTRAIT
		    takes precedent over LANDSCAPE.
 Calls       : 
	SETPLOT, FORM_FILENAME
 Common      : 
	QMS_FILE which contains QMS_FILENAME, the name of the plotting file,
	and LAST_DEVICE, which is the name of the previous graphics device.
 
	Also calls SETPLOT, which uses common block PLOTFILE.
 
 Restrictions: 
	Only the routines QMPLOT and QMCLOSE can be used to close the QMS plot
	file.  It is best if the routines TEK, REGIS, etc. (i.e. those
	routines that use SETPLOT) are used to change the plotting device.

	In general, the SERTS graphics devices routines use the special system
	variables !BCOLOR and !ASPECT.  These system variables are defined in
	the procedure DEVICELIB.  It is suggested that the command DEVICELIB be
	placed in the user's IDL_STARTUP file.

 Side effects: 
	If the FILENAME parameter, or either the LANDSCAPE or PORTRAIT
	keywords, is passed then DEVICE is called to open a new file.  Any
	previously opened QMS plot file would be closed.
 
	If a new file is opened, then the DEVICE routine is called with the
	/LANDSCAPE or /PORTRAIT switch to set the size and orientation of the
	plot window.
 
	If not the first time this routine is called, then system variables
	that affect plotting are reset to previous values.  If it is the first 
	time the routine is called, !FANCY is set to 1.

	In UNIX, if a new file is opened with the same name as an existing
	file, then the old file is lost.
 
 Category    : 
	Utilities, Devices.
 Prev. Hist. : 
	W.T.T., Feb. 1991, from PS.PRO.
 Written     : 
	William Thompson, GSFC, February 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 27 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 27 April 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	RD_ASCII

 Purpose     : Read sequential ASCII file

 Explanation :

 Use         : output = rd_ascii(file)

 Inputs      : file = string file name

 Opt. Inputs : None.

 Outputs     : output = string array with ASCII text

 Opt. Outputs: None.

 Keywords    : None.

 Calls       : FSTAT

 Common      : None.

 Restrictions: None.

 Side effects: None.

 Category    : I/O

 Prev. Hist. : None.

 Written     :	Version 1.0, DMZ (ARC) August 22 1994

 Modified    : Version 1.1, DMZ (ARC/GSFC) October 29 1994
               Fixed potential bug in irec

 Version     : 1.1 

;-
;+
 Project     :	SOHO - CDS

 Name        :	
	READ_DEFAULT
 Purpose     :	
	Prompts for a variable with a default value.
 Explanation :	
	Reads in a variable from the terminal.  If nothing is typed in, then
	the default is used. 
 Use         :	
	READ_DEFAULT, PROMPT, ANSWER, DEFAULT
 Inputs      :	
	PROMPT	= Prompt to READ_DEFAULT for input.
	DEFAULT	= Default answer if nothing typed in.
 Opt. Inputs :	

 Outputs     :	
	ANSWER	= Answer, either typed in or default.	
 Opt. Outputs:	
	None.
 Keywords    :	
	None.
 Calls       :	
	TRIM
 Common      :	
	None.
 Restrictions:	
	None.
 Side effects:	
	None.
 Category    :	
	Utilities, User_interface.
 Prev. Hist. :	
	W.T.T., Oct. 1989.
 Written     :	
	William Thompson, GSFC, October 1989.
 Modified    :	
	Version 1, William Thompson, GSFC, 9 July 1993.
		Incorporated into CDS library.
 Version     :	
	Version 1, 9 July 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	READ_KEY

 Purpose     :	
	Returns ASCII equivalent of keystroke.

 Explanation :	
	Reads a keystroke and return its ASCII equivalent, unless an
	ESCAPE sequence was produced.  In that case, if the sequence is
	recognized, a code is returned.

 Use         :	
	key = READ_KEY(Wait)

 Inputs      :	
	Wait  -  The wait flag.  If non-zero, execution is halted until a
	         key is struck.  If zero, execution returns immediately and
	         a zero is returned if there was no keystroke waiting in the
	         keyboard buffer.  If not specified, zero is assumed.

 Opt. Inputs :	None.

 Outputs     :	
	Returned - The key struck.  The ASCII code for non-escape sequences.
	           Escape sequence equivalents:
			Up Arrow     --  128
			Down Arrow   --  130
			Left Arrow   --  129
			Right Arrow  --  131
			Else         --    0

	The return value is a byte value.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, user_interface.

 Prev. Hist. :	
	Written by Michael R. Greason, STX, 22 June 1990.
	Rewritten for a SUN workstation.  MRG, STX, 23 August 1990.

 Written     :	Michael R. Greason, STX, 22 June 1990.

 Modified    :	Version 1, William Thompson, GSFC, 30 March 1995
			Incorporated into CDS library

 Version     :	Version 1, 30 March 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	READFITS

 Purpose     :	
	Read a FITS file into IDL data and header variables.

 Explanation :	
	Read a FITS file into IDL data and header variables.

	The procedure FXREAD can be used as an alternative to READFITS.
	FXREAD has the option of reading a subsection of the primary FITS data.

 Use         :	
	Result = READFITS( Filename,[ Header, /NOSCALE, EXTEN_NO = ,
			/SILENT , NaNVALUE = , STARTROW = , NUMROW = ] )

	EXAMPLE: Read a FITS file TEST.FITS into an IDL image array, IM and
	FITS header array, H.  Do not scale the data with BSCALE and BZERO.

		IDL> im = READFITS( 'TEST.FITS', h, /NOSCALE)

	If the file contain a FITS extension, it could be read with

		IDL> tab = READFITS( 'TEST.FITS', htab, /EXTEN )

	To read only rows 100-149 of the FITS extension,

		IDL> tab = READFITS( 'TEST.FITS', htab, /EXTEN, 
					STARTR=100, NUMR = 50 )

 Inputs      :	
	FILENAME = Scalar string containing the name of the FITS file  
		(including extension) to be read.

 Opt. Inputs :	
	None.

 Outputs     :	
	Result = FITS data array constructed from designated record.

 Opt. Outputs:	
	Header = String array containing the header from the FITS file.

 Keywords    :	
	NOSCALE - If present and non-zero, then the ouput data will not be
		scaled using the optional BSCALE and BZERO keywords in the 
		FITS header.   Default is to scale.

	SILENT - Normally, READFITS will display the size the array at the
		terminal.  The SILENT keyword will suppress this

	NaNVALUE - This scalar is only needed on Vax architectures.   It 
		specifies the value to translate any IEEE "not a number"
		values in the FITS data array.   It is needed because
		the Vax does not recognize the "not a number" convention.

	EXTEN_NO - scalar integer specify the FITS extension to read.  For
		example, specify EXTEN = 1 or /EXTEN to read the first 
		FITS extension.    Extensions are read using recursive
		calls to READFITS.

	POINT_LUN  -  Position (in bytes) in the FITS file at which to start
		reading.   Useful if READFITS is called by another procedure
		which needs to directly read a FITS extension.    Should 
		always be a multiple of 2880.

	STARTROW - This keyword only applies when reading a FITS extension
		It specifies the row (scalar integer) of the extension table at
		which to begin reading. Useful when one does not want to read 
		the entire table.

	NUMROW -  This keyword only applies when reading a FITS extension. 
		If specifies the number of rows (scalar integer) of the 
		extension table to read.   Useful when one does not want to
		read the entire table.

 Calls       :	
	Functions:   SXPAR, WHERENAN
	Procedures:  IEEE_TO_HOST, SXADDPAR

 Common      :	
	None.

 Restrictions:	
	Cannot handle random group FITS

 Side effects:	
	None.

 Category    :	
	Utilities, FITS

 Prev. Hist. :	
	MODIFIED, Wayne Landsman  October, 1991
	Added call to TEMPORARY function to speed processing     Feb-92
	Added STARTROW and NUMROW keywords for FITS tables       Jul-92
	Close logical unit if EOF encountered
	Make SILENT keyword work for tables                      Oct-92
	Work under "windows"   R. Isaacman                       Jan-93
	Check for SIMPLE keyword in first 8 characters           Feb-93
	Removed EOF function for DECNET access                   Aug-93
	Work under "alpha"                                       Sep-93
       Null array processing fixed:  quotes in a message 
          properly nested, return added.  Affected case when
          readfits called from another procedure.   R.S.Hill    Jul-94

 Written     :	

 Modified    :	
       Version 1, Liyun Wang, GSFC/ARC, September 19, 1994
          Incorporated into CDS library
	Version 2, William Thompson, GSFC/ARC, 9 January 1995
		Incorporated following change:

	Correct size of variable length binary tables W.Landsman Dec-94

 Version     :	
       Version 2, 9 January 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	REARRANGE()
 Purpose     :	
	Rearranges the dimensions in an array (ala TRANSPOSE).
 Explanation :	
	Rearranges the dimensions in an array.  The concept is similar to
	TRANSPOSE or ROTATE, but generalized to N dimensions.
 Use         :	
	Result = REARRANGE(ARRAY,DIMENSIONS)

	EXAMPLE:  If ARRAY has the dimensions NI x NJ x NK, then

			RESULT = REARRANGE(ARRAY, [3,1,2])

		  will have the dimensions NK x NI x NJ.

 Inputs      :	
	ARRAY		= Input array to be rearranged.
	DIMENSIONS	= Array containing the order of the original dimensions
			  once they are rearranged.  Each dimension is
			  specified by a number from 1 to N.  If any dimension
			  is negative, then the order of the elements is
			  reversed in that dimension.
 Opt. Inputs :	
	None.
 Outputs     :	
	The result of the function is ARRAY with the dimensions rearranged into
	the order specified by DIMENSIONS.
 Opt. Outputs:	
	None.
 Keywords    :	
	None.
 Env. Vars.  :
	CDS_EXTERNAL = Points to a sharable object file containing associated C
		       software callable by CALL_EXTERNAL.  If this environment
		       variable exists, then the routine uses CALL_EXTERNAL to
		       perform the rearrangement.  Otherwise the rearrangement
		       is performed within IDL, which is slower.
 Calls       :	
	None.
 Common      :	
	None.
 Restrictions:	
	DIMENSIONS cannot contain the same dimensions more than once each.
	Each dimension must be accounted for.

	This routine is not very fast for large arrays, unless CDS_EXTERNAL is
       defined so that CALL_EXTERNAL is used.
 Side effects:	
	None.
 Category    :	
	Utilities, Arrays.
 Prev. Hist. :	
	William Thompson, February 1993.
	William Thompson, 30 June 1993, modified to allow dimensions to be
		reversed.
 Written     :	
	William Thompson, GSFC, February 1993.
 Modified    :	
	Version 1, William Thompson, GSFC, 9 July 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 24 August 1994.
		Combined pure IDL and CALL_EXTERNAL versions into one routine.
		Ported CALL_EXTERNAL software to OSF.
	Version 3, William Thompson, GSFC, 27 December 1994
		Fixed bug where trailing dimensions with one element were lost.
 Version     :	
	Version 3, 27 December 1994
;-
;+
 Project     : SOHO - CDS

 Name        : REGIS

 Purpose     : Sets graphics device to REGIS mode.

 Explanation : SETPLOT is called to save and set the system variables.

 Use         : REGIS

 Inputs      : None.

 Opt. Inputs : None.

 Outputs     : A message is printed to the screen.

 Opt. Outputs: None.

 Keywords    : None.

 Calls       : SETPLOT

 Common      : None.  But calls SETPLOT, which uses common block PLOTFILE.

 Restrictions: It is best if the routines TEK, REGIS, etc.  are used (i.e.
		those routines that use SETPLOT) to change the plotting device.

		In general, the SERTS graphics devices routines use the special
		system variables !BCOLOR and !ASPECT.  These system variables
		are defined in the procedure DEVICELIB.  It is suggested that
		the command DEVICELIB be placed in the user's IDL_STARTUP file.

 Side effects: If not the first time this routine is called, then system
		variables that affect plotting are reset to previous values.

 Category    : Utilities, Devices.

 Prev. Hist. : W.T.T., Nov. 1987.

 Written     : William Thompson, GSFC, November 1987.

 Modified    : Version 1, William Thompson, GSFC, 27 April 1993.
			Incorporated into CDS library.

 Version     : Version 1, 27 April 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	REGRESS

 Purpose     :	Linear regression routine for functions with constant term

 Explanation :	This subroutine performs the same function as subroutine FITTER
		with the proviso that the function to be fitted consists of a
		constant DC-level term A0 and terms PAR(I) multiplying
		nontrivial functions FDER(X,I) in the variable X.  This allows
		a more efficient computation to be made.

 Use         :	REGRESS, X, Y, FDER, A0, PARAM  [, PERR ]

 Inputs      :	X	= Positions.
		Y	= Data values.
		FDER	= Array of partial derivatives of fitted function
			  w.r.t. PARAM (not A0).  This array will have the
			  dimensions: FDER( N_ELEMENTS(X) , N_ELEMENTS(PARAM) )

 Opt. Inputs :	None.

 Outputs     :	A0	= Constant DC-level term.
		PARAM	= Returned parameters of fit.

 Opt. Outputs:	PERR	= Errors in PARAM.

 Keywords    :	POISSON	= If set, then a Poisson error distribution is
			  assumed, and the weights are set accordingly to 1/Y.
		ERROR	= Array of errors.  The weights are set accordingly to
			  1/ERROR^2.  Overrides POISSON.
		WEIGHT	= Array of weights to use in fitting.  Overrides
			  POISSON and ERROR.
		CHISQR	= Returned value of chi-squared.  Only relevant if
			  ERROR passed explicitly.
		CMATRIX	= Correlation matrix.

 Calls       :	FITTER

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Curve_fitting

 Prev. Hist. :	William Thompson, June 1991, modified to use keywords.

 Written     :	William Thompson, GSFC, June 1991

 Modified    :	Version 1, William Thompson, GSFC, 9 January 1995
			Incorporated into CDS library

 Version     :	Version 1, 9 January 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	REM_COM()

 Purpose     :	Finds elements unique to second vector.

 Explanation :	Returns indeces of all those elements which are unique to the second vector,
               removing any duplicate elements or any that are also present in the first 
               vector.

 Use         : <indeces = rem_com( vec1, vec2)>

 Inputs      : vec1 = array of values;
               vec2 = array of values.

 Opt. Inputs : None.

 Outputs     : Array of indeces into vec2 poitnign to unique elements.

 Opt. Outputs:	None.

 Keywords    : None.

 Calls       :	rem_dup.
                
 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Command preparation.

 Prev. Hist. :	None.

 Written     :	Version 0.00, Martin Carter, RAL, 14/10/94

 Modified    :	Version 0.01, Martin Carter, RAL, 28/11/94
                            Added proforma.

 Version     :	Version 0.01, 28/11/94
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : REM_DUP()
               
 Purpose     : Function to remove duplicate values from a vector. 
               
 Explanation : None
               
 Use         : result = rem_dup( vector, [ flag ] )  

               Eg. Remove duplicate values in vector a.
                          a = a( rem_dup(a) )

                   Remove duplicates in vector WAVE.  When duplicate values
                   are found, select the one with the largest intensity, INTE.

                          sub  = rem_dup( wave, inte)
                          wave = wave( sub )
                          inte = inte( sub )

    
 Inputs      : vector - vector of values from which duplicates are to be found
               
 Opt. Inputs : flag   - if supplied then when duplicates occur,
                        the one with the largest value of flag is selected.
                        If not supplied the the first occurence of the value
                        in 'vector' is selected.  Should be a vector with 
                        the same number of elements as in 'vector'.
               
 Outputs     : A vector of subscripts in 'vector' is returned.  Each subscript
               points to a selected value such that vec(rem_dup(vec,flag))
               has no duplicates.
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : None
               
 Restrictions: None
               
 Side effects: The returned subscripts will sort the values in 'vector' in 
               ascending order with duplicates removed.
               
 Category    : Util, misc
               
 Prev. Hist. : D. Lindler  Mar. 87

 Written     : CDS version by C D Pike, RAL, 22-Oct-93
               
 Modified    : Use BSORT instead of SORT to maintain order.  CDP 7-Nov-94

 Version     : Version 2, 7-Nov-94
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : REM_MULT_CHAR()
               
 Purpose     : Function to remove multiple characters from a string. 
               
 Explanation : Same as STRCOMPRESS only works on all characters.
               
 Use         : result = rem_mult_char(string [, char ,/all])  

    
 Inputs      : string - string variable in which to compress all multiple
                        characters
               
 Opt. Inputs : char   - character, multiple occurrences of which are to be
                        replaced. Default is space
               
 Outputs     : Function returns compressed string
               
 Opt. Outputs: None
               
 Keywords    : ALL - if present all occurrences of the named character will
                     be deleted.

 Calls       : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, string
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 6-Mar-95
               
 Modified    : Handle edge effects.  CDP, 10-mar-95

 Version     : Version 2, 10-Mar-95
;-
;+
 Project     :	SDAC

 Name        :	REM_TAG

 Purpose     :	remove a tag from a structure

 Explanation :	

 Use         : NEW_STRUCT=REM_TAG(STRUCT,TAG)

 Inputs      :	STRUCT = input structure (array or scalar)
             : TAG = array of tag names to remove

 Opt. Inputs :	None.

 Outputs     :	NEW_STRUCT = new structure

 Opt. Outputs:	None.

 Keywords    :	NAME = new name for output structure

 Calls       :	CONCAT_STRUCT

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Structure handling

 Prev. Hist. :	None.

 Written     :	Dominic Zarro (ARC)

 Version     :	Version 1.0, 7 November 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	REMCHAR
 Purpose     : 
	Remove all appearances of a character from a string.
 Explanation : 
	Remove all appearances of character (char) from string (st).
 Use         : 
	REMCHAR,ST,CHAR
 Inputs      : 
	ST  - String from which character will be removed.  
	CHAR- Character to be removed from string. 
 Opt. Inputs : 
	None.
 Outputs     : 
	ST	= The modified string is returned in ST.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	None.
 Category    : 
	Utilities, strings.
 Prev. Hist. : 
	Written D. Lindler October 1986
	Test if empty string needs to be returned   W. Landsman  Feb 1991
 Written     : 
	Don Lindler, GSFC/HRS, October 1986.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 April 1993.
;-
;+
 Project     :	SDAC

 Name        :	REP_TAG_NAME

 Purpose     :	Replace a tag name in structure

 Explanation :	

 Use         : NEW_STRUCT=REP_TAG_NAME(STRUCT,OLD_NAME,NEW_NAME)

 Inputs      :	STRUCT = input structure
             : OLD_NAME = old tag name
             : NEW_NAME= new tag name

 Opt. Inputs :	None.

 Outputs     :	NEW_STRUCT = new structure

 Opt. Outputs:	None.

 Keywords    :	NAME = new name for output structure

 Calls       :	CONCAT_STRUCT

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Structure handling

 Prev. Hist. :	None.

 Written     :	Dominic Zarro (ARC)

 Version     :	Version 1.0, 7 November 1994
;-
;+
 Project     :	SDAC

 Name        :	REP_TAG_VALUE

 Purpose     :	replace tag value in a structure

 Explanation :	Useful for avoiding name definition
               conflicts when changing structure fields


 Use         : NEW_STRUCT=REP_TAG_VALUE(STRUCT,TAG_VALUE,TAG_NAME)

 Inputs      :	STRUCT = input structure
             : TAG_VALUE = value to give tag
             : TAG_NAME = string tag name to modify (or index value)

 Opt. Inputs :	None.

 Outputs     :	NEW_STRUCT = new structure

 Opt. Outputs:	None.

 Keywords    :	NAME = name to give output structure [def = ANON].

 Calls       : CONCAT_STRUCT

 Common      :	None.

 Restrictions:	Restricted to changing single tags at a time

 Side effects:	None.

 Category    :	Structure handling

 Prev. Hist. :	None.

 Written     :	Dominic Zarro (ARC)

 Version     :	Version 1.0, 4 May 1995
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : REPCHAR()
               
 Purpose     : Replaces a character within a string by another.
               
 Explanation : All occurrences of the specified character within a string 
               are replaced by the specified character (a space by default).
               
 Use         : IDL> new = repchar(old,out_char [,in_char])
    
 Inputs      : old      - string in which to replace character.
               out_char - character to be replaced

 Opt. Inputs : in_char  - character to be inserted in place of out_char.
                          (Default is a space)
               
 Outputs     : Function returns suitably adapted string.
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : None

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, string
               
 Prev. Hist. : R. Sterner.  Oct, 1986.

 Written     : CDS version by C D Pike, RAL, 24-Jun-94
               
 Modified    : 

 Version     : Version 1, 24-Jun-94
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : REPSTR()
               
 Purpose     : Replaces all occurrences of a substring within a string.
               
 Explanation : All occurrences of the specified string within a string 
               are replaced by the new string.

               eg.  IDL> x = 'abcdefgcd'
                         print,repstr(x,'cd','qq')  --> 'abqqefgqq'

               See STREP for replacement of first occurrence only.
               
 Use         : IDL> new = repstr(old,out_str [,in_str])
    
 Inputs      : old      - string in which to replace string.
               out_str  - string to be replaced

 Opt. Inputs : in_str  - string to be inserted in place of out_str.
                         (Default is a space).

               
 Outputs     : Function returns suitably adapted string.
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : None

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, string
               
 Prev. Hist. : Robert S. Hill, ST Systems Corp., April 1989.

 Written     : CDS version by C D Pike, RAL, 24-Jun-94
               
 Modified    : 

 Version     : Version 1, 24-Jun-94
;-
;+
 Project     : SOHO - CDS

 Name        : 
	RESET
 Purpose     : 
	Resets system variables to their default values.
 Explanation : 
	Resets the system variables for the currently selected device, and
	sets the following system variables to their default settings:

		!LINETYPE	!PSYM		!NOERAS
		!X.TITLE	!Y.TITLE	!P.TITLE
		!XTICKS		!YTICKS

	The routine SETPLOT is called to reinitialize the relevant system 
	parameters for the selected device.  Then the above mentioned system
	variables are set to their defaults.

 Use         : 
	RESET
 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	SETPLOT
 Common      : 
	None, but this routine calls SETPLOT which uses the PLOTFILE common 
	block.
 Restrictions: 
	In general, the SERTS graphics devices routines use the special system
	variables !BCOLOR and !ASPECT.  These system variables are defined in
	the procedure DEVICELIB.  It is suggested that the command DEVICELIB be
	placed in the user's IDL_STARTUP file.

 Side effects: 
	None.
 Category    : 
	Utilities, Devices.
 Prev. Hist. : 
	William Thompson, January 23, 1989.
	William Thompson, January 1993, changed to use current system variable
		names.
 Written     : 
	William Thompson, GSFC, 23 January 1989.
 Modified    : 
	Version 1, William Thompson, GSFC, 27 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 27 April 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	RESPOND_WIDG

 Purpose     :	Widget to prompt user for (e.g.) a "YES" or "NO" response.

 Explanation :	
	Creates a widget to prompt user for a "YES" or "NO" response as a
	default.  But you may pass your own button names with the BUTTONS
	keyword.

 Use         :	
   var = respond_widg, [message=message, buttons=buttons, /column,
			/row, group_leader=group]

 Inputs      :	
	MESSAGE : 	String or string vector with message to be 
		    	displayed in widget
			The default message is 'Respond YES or NO '	
	BUTTONS :	String vector where each element will be a button
			You may have as many elements as will fit.
	TITLE   :	string to appear as widget's banner
	COLUMN  :	if set then the buttons will be verically placed
	ROW	:	if set then the buttons will be horizontally placed
				(/ROW is the default and it overrides /COLUMN)
	GROUP_LEADER : 	Causes the widgets destruction if parent is killed

 Opt. Inputs :	None.

 Outputs     :	
	Returns a -1 if program fails else it returns the index number of 
	the button that was selected, as determined by the array BUTTONS.
       Indexes start at 0.  
	If you passed this array then you already know your values.
	If you use the default BUTTONS array then 
		   0 if "YES" was selected
	           1 if "NO" was selected

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	
	Must have X windows device.

 Side effects:	None.

 Category    :	Utilities, User_interaction

 Prev. Hist. :	
	FEB 1993 - Elaine Einfalt (HSTX)

 Written     :	Elaine Einfalt, GSFC (HSTX), February 1993

 Modified    :	Version 1, Elaine Einfalt, GSFC (HSTX), February 1993

 Version     :	Version 1, February 1993
;-
;+
 Project     :	SOHO - CDS

 Name        :	REV_SWAP

 Purpose     :	Swaps data between reverse network and host byte order.

 Explanation :	This routine takes data with bytes in reverse network
		(little-endian) order, as used by DEC computers and PCs, and
		converts it to the correct byte order for the current host.
		Conversely, it can also convert data in host to reverse network
		order.

 Use         :	REV_SWAP, DATA

 Inputs      :	DATA	= Data in reverse network order.

 Opt. Inputs :	None.

 Outputs     :	DATA	= The byte swapped data is returned in place of the
			  input array. 

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	DATATYPE

 Common      :	The common block REV_SWAP_CMN is used internally to keep track
		of whether the current computer uses network or reverse network
		byte order.

 Restrictions:	Only the byte order of the data is affected.  No other
		conversions, such as for example IEEE to host floating point
		formats, are performed on the data.  If such conversions are
		necessary, then the call to REV_SWAP can be followed up with
		either IEEE_TO_HOST or HOST_TO_IEEE.

 Side effects:	None.

 Category    :	Utilities, Operating_system.

 Prev. Hist. :	None.

 Written     :	William Thompson, GSFC, 10 February 1994

 Modified    :	Version 1, William Thompson, GSFC, 10 February 1994

 Version     :	Version 1, 10 February 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	REWIND

 Purpose     :	Emulates the VMS REWIND function in Unix.

 Explanation :	Emulates the VMS REWIND function in the Unix environment.

		**Unix only**

 Use         :	REWIND, UNIT

 Inputs      :	UNIT = Tape unit number.  Tape drives are selected via the UNIX
		       environment variables "MT1", "MT2", etc.  The desired
		       tape drive is thus specified by numbers, as in VMS.
		       Must be from 0 to 9.

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	CHECK_TAPE_DRV

 Common      :	None.

 Restrictions:	The environment variable "MTn", where n corresponds to the
		variable UNIT, must be defined.  E.g.,

			setenv MT0 /dev/nrst0

		Requires IDL v3.1 or later.

 Side effects:	The device file is opened.

 Category    :	Utilities, I/O, Tape.

 Prev. Hist. :	VERSION 1, R. W. Thompson 11/30/89
		William Thompson, Apr 1991, rewrote to better emulate VMS
			version.

 Written     :	R. W. Thompson, GSFC/IUE, 30 November 1989.

 Modified    :	Version 1, William Thompson, GSFC, 21 December 1993.
			Rewrote to use IOCTL.

 Version     :	Version 1, 21 December 1993.
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       RM_PATH

 PURPOSE: 
       Remove directory (and optionally its subdirs) from IDL path

 EXPLANATION:
       
 CALLING SEQUENCE: 
       RM_PATH, path_name [,/expand] [index=index]

 INPUTS:
       PATH_NAME -- A string scalar containing directory name to be
                    removed

 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       None. !path may be changed though.

 OPTIONAL OUTPUTS:
       INDEX -- Index of the removed directory in the !path.

 KEYWORD PARAMETERS: 
       EXPAND -- Set this keyword to remove all subdirectories under
                 PATH_NAME from the IDL path.

 CALLS:
       STR_SEP, ARR2STR, REST_MASK, DATATYPE

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       Utilities, OS
       
 PREVIOUS HISTORY:
       Written October 7, 1994, by Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 2, Liyun Wang, GSFC/ARC, October 19, 1994
          Added the EXPAND keyword

 VERSION:
       Version 2, October 19, 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	ROOTNR

 Purpose     :	Finds the value of VARIABLE for which FUNC(VARIABLE) = 0.

 Explanation :	Finds the value of VARIABLE for which FUNC(VARIABLE) = 0.

		Approximations to VARIABLE are made by a modified version of
		the Newton-Raphson method until either MAX_ITER is exceeded or
		else successive estimates of VARIABLE differ by less than
		ACCURACY.

 Use         :	ROOTNR, FUNC, VARIABLE, START  [, PARAMS ]

 Inputs      :	FUNC	  - Character string containing name of function.
		START	  - Initial guess.

 Opt. Inputs :	PARAMS	  - The parameters of the function FUNC.  If passed,
		FUNC has the form
 
			F = FUNC(VARIABLE,PARAMS)
 
		Otherwise it has the form
 
			F = FUNC(VARIABLE)

 Outputs     :	VARIABLE  - Variable to store result in.

 Opt. Outputs:	None.

 Keywords    :	ACCURACY = Accuracy to cut off at.  Defaults to 1E-5.
		MAX_ITER = Maximum number of reiterations.  Defaults to 20.
		VALUE	 = Finds VARIABLE for which FUNC(VARIABLE) = VALUE.
			   Defaults to zero.

 Calls       :	None.

 Common      :	None.

 Restrictions:	The function FUNC must have one of the above two forms.

 Side effects:	None.

 Category    :	Utilities, Curve_Fitting.

 Prev. Hist. :	
	William Thompson, February, 1990, from FORTRAN subroutine written by
		Roger Thomas.
	William Thompson, December 1991, modified for IDL version 2.

 Written     :	William Thompson, GSFC, February 1990

 Modified    :	Version 1, William Thompson, GSFC, 9 January 1995
			Incorporated into CDS library

 Version     :	Version 1, 9 January 1995
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:	
       ROTATION()

 PURPOSE:
       Make a 3x3 matrix for a rotation transformation conversion.

 EXPLANATION:
       
 CALLING SEQUENCE: 
       Result = ROTATION(axis_id, angle)

 INPUTS:
       axis_id -- An integer that indicates the axis about which the system
                  is rotated. For x, y, and z axes, the value is 1, 2, and 3
                  respectively. 
       angle   -- Angle of rotation in radians. Positive value indicates a
                  rotation that follows the right-hand rule.

 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       Result  -- A 3x3 two-dimensional array, the transformation matrix

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS: 
       None.

 CALLS:
       None.

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       Utilities, coordinates
 PREVIOUS HISTORY:
       Written in Fortran by Liyun Wang, UF, January 17, 1988      

 MODIFICATION HISTORY:
       Written September 8, 1994, by Liyun Wang, GSFC/ARC
       
 VERSION:
       
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : ROUND_OFF()
               
 Purpose     : To round a number to a specified accuracy
               
 Explanation : Rounds the input number to the accuracy specified.
               
 Use         : IDL> out = round_off(x,acc)
               IDL> out = round_off(12.278,0.01) ==> out = 12.28
    
 Inputs      : x    - the number to be operated on
               acc  - the numerical accuracy required
               
 Opt. Inputs : None
               
 Outputs     : The function value is the input rounded to the desired accuracy
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : NINT
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, Numerical
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 17-May-1993
               
 Modified    : 

 Version     : Version 1
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : SAME_DATA()
               
 Purpose     : Check if two variables are identical.
               
 Explanation : Checks if the values contained in the 2 inputs are the same.
               Works on any type of data input. 
               
 Use         : IDL> if same_data(a,b) then print,'a and b are identical'
    
 Inputs      : a  -  first input
               b  -  second input
               
 Opt. Inputs : None
               
 Outputs     : Function returns 1 for identity, 0 otherwise.
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : MATCH_STRUCT

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, numerical
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 22-Feb-95
               
 Modified    : 

 Version     : Version 1, 22-Feb-95
;-
;+
 Project     : SOHO - CDS

 Name        : 
	SCALE_TV
 Purpose     : 
	Scales an image to best fit the image display screen.
 Explanation : 
	Scales the size of an image to best fit the size of an available area 
	on the image display screen.  Called from EXPTV and other routines.
 Use         : 
	SCALE_TV, ARRAY, MX, MY, JX, JY
 Inputs      : 
	ARRAY	= Image to be scaled.
 Opt. Inputs : 
	None.
 Outputs     : 
	MX, MY	 = The size to use in displaying the image.
	JX, JY	 = The position of the lower left-hand corner of the image to 
		   use in displaying the image.
 Opt. Outputs: 
	None.
 Keywords    : 
	NOSQUARE = If passed, then pixels are not forced to be square.
	SIZE	 = If passed and positive, then used to determine the scale of
		   the image.  Returned as the value of the image scale.  May
		   not be compatible with /NOSQUARE.
	NOBOX	 = If set, then no space is reserved for a border around the
		   image.  Generally used with the EXPAND_TV switch of the same
		   name.
	DISABLE  = If set, then TVSELECT not used.
	NOEXACT  = If set, then exact scaling is not imposed.  Otherwise, the
		   image scale will be either an integer, or one over an
		   integer.  Ignored if SIZE is passed with a positive value.
	XALIGN	 = Alignment within the image display area.  Ranges between 0
		   (left) to 1 (right).  Default is 0.5 (centered).
	YALIGN	 = Alignment within the image display area.  Ranges between 0
		   (bottom) to 1 (top).  Default is 0.5 (centered).
	RELATIVE = Size of area to be used for displaying the image, relative
		   to the total size available.  Must be between 0 and 1.
		   Default is 1.  Passing SIZE explicitly will override this
		   keyword.
 Calls       : 
	GET_IM_KEYWORD, IM_KEYWORD_SET, TVSELECT, TVUNSELECT
 Common      : 
	IMAGE_AREA  = Contains switch IMAGE_SET and position IX, NX, IY, NY.
 Restrictions: 
	ARRAY must be two-dimensional.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., Oct. 1987.
	W.T.T., Feb. 1991, modified to use TVSELECT, TVUNSELECT.
	W.T.T., Feb. 1991, modified to use common block IMAGE_AREA.
	W.T.T., Feb. 1991, added SIZE keyword.
	W.T.T., Mar. 1991, added NOEXACT keyword.
	W.T.T., Oct. 1991, added !ASPECT system variable.
 Written     : 
	William Thompson, GSFC, October 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 May 1993.
;-
;+
 Project     : SDAC

 Name        : SCANPATH

 Purpose     : Widget prog. for reading documentation within IDL procedures

 Explanation : 
	Widget-based routine to read in the documentation from IDL procedures
	in the search path.  Optionally, reads in the entire procedure.
 Use         : 
	SCANPATH  [, NAME ]

 Inputs      : None required.

 Opt. Inputs : NAME - Name of procedure to search and document

 Outputs     : 
	None.
 Opt. Outputs: 
       PROC:           String array with the text of the latest saved procedure
 Keywords    : 
       RESET:          Clear out previous procedures from memory
	FONT:     	Optional font to use in the base widget.  Note that the
			font is a function of the computer or terminal
			providing the X-windows display server, not the host
			computer for the IDL application.
       NOSPLIT:        If set, then do not split procedure text base into 
                       a separate base
       PC:             If set, then put directory list widget in separate column
       LAST:           Restore last procedure in memory
                       
 Buttons     : 
	QUIT:		Exits SCANPATH.
	PRINT:		Prints selected procedure.
	DOC ONLY / ALL:	Toggles between showing only the documentation from a
			file (the part between the "+" and "-" lines), and
			the entire file.
       EXTRACT         Extract and copy procedure from library and/or directory
                       to current working directory with ".txt" extension.
 Env. Vars.  : 
	IDL_PRINT_TEXT:	Environment variable (VMS: logical name) which contains
			the print command to be used in printing files.
	XDOC_FONT:	Optional font to use in the text widget.  Note that the
			font is a function of the computer or terminal
			providing the X-windows display server, not the host
			computer for the IDL application.
       XDOC_ONLY       If set to 1, then make DOC only the default

 Calls       : 
	CONCAT_DIR, GET_LIB, GET_MOD, GET_PROC, LOC_FILE
 Common      : 
	Uses the common blocks defined in SP_COMMON.
 Restrictions: 
	Needs X-windows and widgets support (MOTIF or OPENLOOK).
 Side effects: 
	If "ALL" is selected to read in the entire file, then memory problems
	may arise when reading very large procedure files.
 Category    : 
	Documentation, Online_help.
 Prev. Hist. : 
	Written May'91 by DMZ (ARC).
	Modified Dec 91 by WTT (ARC) to support UNIX, and add the following
		features:
			- Search current directory, as well as !PATH
			- Allow for files "aaareadme.txt" containing more
			  general information to also be searched.
			- Only save last five procedures in memory.
			- Add "documentation only" button.
			- Use environment variable IDL_PRINT_TEXT
			- Change extensions ".SCL", ".MOD" to "._SCL", "._MOD".
       Modified Jan'92 by DMZ (ARC) to sense screen size and autosize widgets
	Modified Feb'92 by WTT (ARC) to use SCANPATH_FONT environment variable.
	Modified Feb'92 by DMZ (ARC) to include a message window
	Modified Mar'92 by DMZ (ARC) to enable remote printing of files
       Modified Jul'92 by DMZ (ARC) to improve DOC_ONLY switch and add EXTRACT button
       Modified Oct'92 by DMZ (ARC) to accept procedure name as input
       Modified Dec'92 by EEE (HSTX) to accept search strings
       Modified Mar'93 by DMZ (ARC) to handle "~" in UNIX directory names
                                    and print modules from VMS text libraries
 Written     : 
	D. Zarro, GSFC/SDAC, May 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 23 April 1993.
		Renamed SCANPATH_COM to SP_COMMON for DOS compatibility,
		changed line defining YSZ, and incorporated into CDS library.
	Version 2, William Thompson, GSFC, 18 June 1993.
		Added IDL for Windows compatibility.
		Changed size of widgets to better fit in IDL for Windows.
		Split columns into two widget windows to make better use of
               space.
	Version 2.1 Dominic Zarro, GSFC, 21 July 1993.
		Made procedure and search text widgets independent bases.
       Version 3, Dominic Zarro, GSFC, 1 August 1994.
               Cleaned up and added check for XDOC_ONLY environment variable.
               Changed SCANPATH_FONT to XDOC_FONT for procedure text widget
       Version 3.1, Dominic Zarro, GSFC, 16 August 1994.
               Added /NOSPLIT keyword.
               Fixed /FONT so that original font is restored on exit.
               (This keyword overrides the value of XDOC_FONT)
       Version 3.2, Zarro, GSFC, 24 August 1994.
               Fixed bug where XMANAGER was being called twice.
               Excised PC keyword
       Version 3.3, Zarro, GSFC, 3 September 1994.
               Fixed another potential bug when XMANAGER was being
               called twice during search. 
       Version 4, Zarro, GSFC, 18 September 1994.
               Put back /PC. If set, then the directory list widget appears
               in a second column (rather than in a third row, where
               it usually falls off the screen). 
       Version 4.1, Zarro, GSFC, 19 September 1994.
               Removed forcing of procedure names to lowercase.
               Converted PROC keyword to argument to enable transfer
               back to XDOC
       Version 5, Zarro, GSFC, 10 October 1994.
               Changed search text function to search file function.
               Added STRIP_DOC function.
       Version 5.1, Zarro, GSFC, 22 October 1994.
               Added LAST keyword to restore last save procedure
       Version 5.2, Zarro, GSFC, 12 December 1994.
               Fixed potential bug in FIND logic -- should only arise
               in 1 in 22 million cases.
  Version:
	Version 5.2, 12 December 1994.
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	SCR_ATTRIB
 Purpose     :	
	Set screen attributes to those given, in the given order.

 Explanation :	
	To set the screen attribute to those given, in the given order.

	A string containing the appropriate DEC terminal command is put 
	together and printed.  NOTE:  In general, the DEC commands correspond
	to the ANSI escape sequences.

 Use         :	
	scr_attrib [, a1, a2, a3, a4, a5]

 Inputs      :	
	a1 - a5  --  The attribute codes.  The attributes are set in the
	             command string in the given order.  Thus, if a1 turns
	             the attributes off and a2 sets reverse video, the final
	             attribute will reset and then set to reverse video.  If
	             the order were reversed, then the current attribute 
	             would have reverse video added to it, and then would be
	             reset, leaving the terminal with all attributes off.  Up
	             to five attribute codes may be specified.  The codes are:
	                  0 : all attributes off  (default)
	                  1 : bold on
	                  2 : underscore on
	                  3 : blink on
	                  4 : reverse video on

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	
	This procedure will only work with DEC compatible equipment (or
	terminal emulators).

 Side effects:	None.

 Category    :	Utilities, User_interface

 Prev. Hist. :	
	Written by Michael R. Greason, STX, May 1990.

 Written     :	Michael R. Greason, GSFC/UIT (STX), May 1990

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	SCR_CHARSET
 Purpose     :	
	To change the character sets.
 Explanation :	
	To change the character sets.

	A string containing the appropriate DEC terminal command is put 
	together and printed.  NOTE:  In general, the DEC commands correspond
	to the ANSI escape sequences.

 Use         :	
	scr_charset [, g, cset]

 Inputs      :	
	g     --  The terminal character set to change (either 0, for the
	          G0 designator, or 1, for the G1 designator).  0 = default.
	cset  --  The character set to use:
	               0 : United Kingdom.
	               1 : United States (USASCII)  --  default.
	               2 : Special graphics characters and line drawing set.
	               3 : Alternate character ROM.
	               4 : Alternate character ROM special graphics chars.

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	
	This procedure will only work with DEC compatible equipment (or
	terminal emulators).

 Side effects:	None.

 Category    :	Utilities, User_interface

 Prev. Hist. :	
	Written by Michael R. Greason, STX, May 1990.

 Written     :	Michael R. Greason, GSFC/UIT (STX), May 1990

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	SCR_CURMOV
 Purpose     :	
	Moves the cursor relative to its original position.
 Explanation :	
	To move the cursor around the screen relative to its original position.

	A string containing the appropriate DEC terminal command is put 
	together and printed.  NOTE:  In general, the DEC commands correspond
	to the ANSI escape sequences.

 Use         :	
	scr_curmov [, cmd, n]

 Inputs      :	
	cmd  --  An integer indicating the direction in which to move the curs.
	              0 : Up
	              1 : Down  (Default)
	              2 : Left
	              3 : Right
	n    --  The number of spaces to move the cursor.  If not specified
	         (or if less than or equal to zero), this is set to one.

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	
	This procedure will only work with DEC compatible equipment (or
	terminal emulators).

 Side effects:	None.

 Category    :	Utilities, User_interface

 Prev. Hist. :	
	Written by Michael R. Greason, STX, May 1990.

 Written     :	Michael R. Greason, GSFC/UIT (STX), May 1990

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library.

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	SCR_CURPOS
 Purpose     :	
	Positions the cursor at the specified screen location.
 Explanation :	
	To position the cursor at the specified screen location.  Unspecified
	coordinates are set to one.  Please note that the ESCAPE sequence
	expects the coordinates to be counted from (1,1).

	A string containing the appropriate DEC terminal command is put 
	together and printed.  NOTE:  In general, the DEC commands correspond
	to the ANSI escape sequences.

 Use         :	
	scr_curpos [, lin, col]

 Inputs      :	
	lin  --  The screen line coordinate.
	col  --  The screen column coordinate.

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	
	This procedure will only work with DEC compatible equipment (or
	terminal emulators).

 Side effects:	None.

 Category    :	Utilities, User_interface

 Prev. Hist. :	
	Written by Michael R. Greason, STX, May 1990.

 Written     :	Michael R. Greason, GSFC/UIT (STX), May 1990

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	SCR_ERASE
 Purpose     :	
	To erase portions of the terminal screen.
 Explanation :	
	To erase portions of the terminal screen.

	A string containing the appropriate DEC terminal command is put 
	together and printed.  NOTE:  In general, the DEC commands correspond
	to the ANSI escape sequences.

 Use         :	
	scr_erase [, cmd]

 Inputs      :	None.

 Opt. Inputs :	
	cmd  --  An integer telling the procedure what part of the screen to
	         erase.  If not specified, it is set to 5.  Key:
	                 0 : From cursor to end-of-line.
	                 1 : From beginning-of-line to cursor.
	                 2 : Entire line containing cursor.
	                 3 : From cursor to end-of-screen.
	                 4 : from beginning-of-screen to cursor.
	              ELSE : Entire screen.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	
	This procedure will only work with DEC compatible equipment (or
	terminal emulators).

 Side effects:	None.

 Category    :	Utilities, User_interface

 Prev. Hist. :	
	Written by Michael R. Greason, STX, May 1990.

 Written     :	Michael R. Greason, GSFC/UIT (STX), May 1990

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	SCR_OTHER
 Purpose     :	
	To allow the user to issue any ESCAPE sequence.
 Explanation :	
	To allow the user to issue any ESCAPE sequence.

	A string containing the appropriate DEC terminal command is put 
	together and printed.  NOTE:  In general, the DEC commands correspond
	to the ANSI escape sequences.

 Use         :	
	scr_other, str

 Inputs      :	
	str  --  A string containing the escape sequence.  The initial ESCAPE
	         should not be included; this will be added by this procedure.
	         This parameter is NOT optional; if not available, the 
	         procedure will return without doing anything.

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	
	This procedure will only work with DEC compatible equipment (or
	terminal emulators).

 Side effects:	None.

 Category    :	Utilities, User_interface

 Prev. Hist. :	
	Written by Michael R. Greason, STX, May 1990.

 Written     :	Michael R. Greason, GSFC/UIT (STX), May 1990

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	SCR_RESET
 Purpose     :	
	To reset the terminal.
 Explanation :	
	To reset the terminal.

	A string containing the appropriate DEC terminal command is put 
	together and printed.  NOTE:  In general, the DEC commands correspond
	to the ANSI escape sequences.

 Use         :	
	scr_reset

 Inputs      :	None.

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	
	This procedure will only work with DEC compatible equipment (or
	terminal emulators).

 Side effects:	None.

 Category    :	Utilities, User_interface

 Prev. Hist. :	
	Written by Michael R. Greason, STX, May 1990.

 Written     :	Michael R. Greason, GSFC/UIT (STX), May 1990

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	SCR_SCROLL
 Purpose     :	
	Defines the scrolling area on the screen.
 Explanation :	
	To define the scrolling area on the screen.  Please note that the
	line coordinates should be counted from 1.

	A string containing the appropriate DEC terminal command is put 
	together and printed.  NOTE:  In general, the DEC commands correspond
	to the ANSI escape sequences.

 Use         :	
	scr_scroll [, top, bot]
 Inputs      :	
	top  --  The line to be the top of the scrolling area.
	         The default value is 1 and the maximum value is 23.
	bot  --  The line to be the bottom of the scrolling area.
	         The default value is 24 and the minimum value is 2.

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	
	This procedure will only work with DEC compatible equipment (or
	terminal emulators).

 Side effects:	
	NOTE:  The screen coordinate system is NOT effected.  (1,1) is not
	       the top of the scrolling area but the top of the screen.

 Category    :	Utilities, User_interface

 Prev. Hist. :	
	Written by Michael R. Greason, STX, May 1990.

 Written     :	Michael R. Greason, GSFC/UIT (STX), May 1990

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	SCREEN_SELECT

 Purpose     :	Interactively select from list using widgets, X or terminal

 Explanation :	
	Routine to allow a user to make an interactive screen selection
	from a list (array) of strings.  This procedure determines whether
	to use dumb terminal version, the non- widget x-windows version or 
	the widget version by examining the !D.NAME system variable.

	The actual processing is farmed out to different procedures depending
	on the terminal type.    

	Widget Terminal   ==>  SELECT_W.PRO
	Vanilla X windows ==>  SELECT_X.PRO 
	VT100 Terminal  ==>    SELECT_O.PRO

 Use         :	
	screen_select, selections, iselected, comments, command_line, only_one

 Inputs      :	
	selections - string array giving list of items that can be
		selected.

 Opt. Inputs :	
	comments - comments which can be requested for each item in
		array selections.  It can be:
			string array - same length as array selections.
			null string - no comments available
			scalar string - name of a procedure which will
				return comments.  It will take selections
				as its first argument and return comments
				as its second argument.
	command_line - optional command line to be placed at the bottom
		of the screen.  It is usually used to specify what the
		user is selecting.
	only_one - integer flag. If set to 1 then the user can only select
		one item.  The routine returns immediately after the first
		selection is made.

 Outputs     :	
	iselected - list of indices in selections giving the selected
		items.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	SELECT_O, SELECT_W, SELECT_X

 Common      :	None.

 Restrictions:	None.

 Side effects:	
	!err is set to the number of selections made

 Category    :	Utilities, User_interface

 Prev. Hist. :	
	Written by M. Greason, STX, May 1990.
       Added widget support    W. Landsman           January, 1992

 Written     :	M. Greason, GSFC/UIT (STX), May 1990

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : SEC2UTC()
               
 Purpose     : Converts seconds since MJD=0 to CDS UTC time format.
               
 Explanation : Used in the UTPLOT programs, this function converts elapsed
               seconds since the zero time of MJD to CDS internal UTC format.
               It takes no account of leap seconds.  For more information on
		various time formats, see file aaareadme.txt.
               
 Use         : IDL>  str = sec2utc(tsec)
    
 Inputs      : tsec  -  variable with number of elapsed seconds
               
 Opt. Inputs : None
               
 Outputs     : Function returns structure with .mjd and .time tags.
               
 Opt. Outputs: None
               
 Keywords    : ERRMSG  =  If defined and passed, then any error messages 
                          will be returned to the user in this parameter 
                          rather than being handled by the IDL MESSAGE 
                          utility.  If no errors are encountered, then a null 
                          string is returned.  In order to use this feature, 
                          the string ERRMSG must be defined first, e.g.,

                            ERRMSG = ''
                            UTC = SEC2UTC( TSEC, ERRMSG=ERRMSG )
                            IF ERRMSG NE '' THEN ...

 Calls       : None

 Common      : None
               
 Restrictions: No account of leap seconds.
               
 Side effects: If an error is encountered and the ERRMSG keyword is set, 
		SEC2UTC returns a structure of value {mjd:0L,time:0L}.
               
 Category    : Util, time
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 20-Apr-94
               
 Modified    :	Version 1, C.D. Pike, RAL, 20 April 1994
		Version 2, Donald G. Luttermoser, GSFC/ARC, 28 December 1994
                       Added the keyword ERRMSG.  Added IDL ON_ERROR utility.
			Note that there are no internally called procedures
			that use the ERRMSG keyword.
		Version 3, Donald G. Luttermoser, GSFC/ARC, 30 January 1995
			Made error handling procedure more robust.  Note that
			this routine can handle both vectors and scalars as
			input.

 Version     :	Version 3, 30 January 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	SELECT_BOX
 Purpose     : 
	Interactive selection of a box on the graphics display.
 Explanation : 
	If the graphics device is windows based, then BOX_CURSOR is used.
	Otherwise, the user is prompted to enter two corners of the box.

	Note that the parameter list for SELECT_BOX is in a different order
	than BOX_CURSOR.  However, it was decided to order the parameters this
	way to be compatible with the SERTS image display routines.

 Use         : 
	SELECT_BOX, MX, MY, IX, IY
 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	MX, MY	= Size of selected box, in device coordinates.
	IX, IY	= Coordinates of lower left-hand corner of selected box.
 Opt. Outputs: 
	None.
 Keywords    : 
	DATA	= If this keyword is set, then the values are in returned in
		  data coordinates instead of device coordinates.

	The following keywords are only relevant when used on a graphics device
	that supports windows:

	INIT	   = If this keyword is set, MX, MY, and IX, IY contain the
		     initial parameters for the box.

	FIXED_SIZE = If this keyword is set, MX and MY contain the initial size
		     of the box.  This size may not be changed by the user.

 Calls       : 
	BOX_CURSOR, BOX_CRS
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	None.
 Category    : 
	Utilities, User_interface.
 Prev. Hist. : 
	William Thompson, May 1992.
	William Thompson, Nov 1992, added DATA keyword.
 Written     : 
	William Thompson, GSFC, May 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 30 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 25 June 1993.
		Changed to call BOX_CRS for MSWindows, BOX_CURSOR otherwise.
		Added INIT and FIXED_SIZE keywords.
 Version     : 
	Version 2, 25 June 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	SELECT_O
 Purpose     :	
	Allows interactive (text) screen selection from a list.
 Explanation :	
	Routine to allow a user to make an interactive screen selection
	from a list (array) of strings.  This assumes a non-x-windows device.

 Use         :	
	select_o, selections, iselected, comments, command_line, only_one

 Inputs      :	
	selections - string array giving list of items that can be
		selected.

 Opt. Inputs :	
	comments - comments which can be requested for each item in
		array selections.  It can be:
			string array - same length as array selections.
			null string - no comments available
			scalar string - name of a procedure which will
				return comments.  It will take selections
				as its first argument and return comments
				as its second argument.
	command_line - optional command line to be placed at the bottom
		of the screen.  It is usually used to specify what the
		user is selecting.
	only_one - integer flag. If set to 1 then the user can only select
		one item.  The routine returns immediately after the first
		selection is made.

 Outputs     :	
	iselected - list of indices in selections giving the selected
		items.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	READ_KEY, SCR_ATTRIB, SCR_CURPOS, SCR_ERASE, SCR_OTHER

 Common      :	None.

 Restrictions:	None.

 Side effects:	
	!err is set to the number of selections made

 Category    :	Utilities, User_interface

 Prev. Hist. :	
	version 1, D. Lindler  April 88.
	modified to IDL V2 (from screen_select).  M. Greason, May 1990.
	changed name from screen_select_o         W. Landsman January 1993

 Written     :	D. Lindler, GSFC/HRS, April 1988

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	SELECT_W    
 Purpose     :	
	Creates a non-exclusive menu in widget form.
 Explanation :	
	This procedure creates a non-exclusive menu of items
	in widget form. More than one item may be selected or  
	'de-selected'.   Normally called by SCREEN_SELECT

 Use         :	
	SELECT_W, items ,iselected, [ comments, command_line, only_one ]

 Inputs      :	
	items - string array giving list of items that can be
		selected.

 Opt. Inputs :	
	comments - comments which can be requested for each item in
		array selections.    NOT YET IMPLEMENTED
	command_line - optional command line to be placed at the bottom
		of the screen.  It is usually used to specify what the
		user is selecting.
	only_one - integer flag. If set to 1 then the user can only select
		one item.  The routine returns immediately after the first
		selection is made.

 Outputs     :	
	iselected - list of indices in selections giving the selected
		items.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	
	SELECT_W - Used to communicate with the SELECT_W_EVENT procedure 

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, User_interface

 Prev. Hist. :	
	Written, K. Venkatakrishna & W. Landsman, Hughes/STX    January, 1992
	Widgets made MODAL.  M. Greason, Hughes STX, 15 July 1992.

 Written     :	K. Venkatakrishna & W. Landsman, GSFC/UIT (Hughes/STX),
			January 1992

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	SELECT_X
 Purpose     :	
	Allos interactive screen selection from X-windows device.
 Explanation :	
	Routine to allow a user to make an interactive screen selection
	from a list (array) of strings.  This assumes an x-windows device.

 Use         :	
	select_x, selections, iselected, comments, command_line, only_one

 Inputs      :	
	selections - string array giving list of items that can be
		selected.

 Opt. Inputs :	
	comments - comments which can be requested for each item in
		array selections.  It can be:
		string array - same length as array selections.
		null string - no comments available
		scalar string - name of a procedure which will
			return comments.  It will take selections
			as its first argument and return comments
			as its second argument.
	command_line - optional command line to be placed at the bottom
		of the screen.  It is usually used to specify what the
		user is selecting.
	only_one - integer flag. If set to 1 then the user can only select
		one item.  The routine returns immediately after the first
		selection is made.

 Outputs     :	
	iselected - list of indices in selections giving the selected
		items.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	READ_KEY

 Common      :	None.

 Restrictions:	
	The screen must be X-windows compatible.
	As of Mar 91, the comments option does not appear to be working

 Side effects:	
	!err is set to the number of selections made

	A window is opened and closed.

 Category    :	Utilities, User_interface

 Prev. Hist. :	
	version 1, D. Lindler  April 88.
	modified to IDL V2 (from screen_select).  M. Greason, May 1990.
	Changed name from screen_select_x         W. Landsman  January 1993
	Removed RETAIN = 2, not needed 		  W. Landsman May 1993

 Written     :	D. Lindler, GSFC/HRS, April 1988

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 PROJECT:
       SOHO - SUMER

 NAME:
       SET_LINE_COLOR

 PURPOSE: 
       Define 11 different colors for the first 11 color indices

 EXPLANATION:
       This routine assigns 11 different colors to the first 11 color
       indices. These color indices correspond to the following colors:

           'black',  'white',  'yellow',  'red',     'green', 
           'blue',   'orange', 'purple',  'magenta', 'brown', 
           'turquoise'

       The appearance of the actual color will depends on how many
       colors are available in your display device. Generally
       speaking, it will appear pretty close if more than 200 colors
       are available.

 CALLING SEQUENCE: 
       SET_LINE_COLOR

 INPUTS:
       None.

 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       None.

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS: 
       None.

 CALLS:
       LINECOLOR

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       
 PREVIOUS HISTORY:
       Written April 18, 1995, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 1, Liyun Wang, GSFC/ARC, April 18, 1995

 VERSION:
       Version 1, April 18, 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	SETENV

 Purpose     :	Emulates the SETENV routine in VMS.

 Explanation :	Converts the SETENV syntax used in Unix and Microsoft Windows
		to the equivalent SETLOG statement in VMS.

 Use         :	SETENV, EXPRESSION

		SETENV, 'ZDBASE=SYS$USER1:[CDS.DATA.PLAN.DATABASE]'

 Inputs      :	EXPRESSION = A scalar string containing the name of the
			     environment variable to be defined, followed by
			     the equals "=" character, and the value to set
			     this environment variable to.

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	DATATYPE

 Common      :	None.

 Restrictions:	VMS-only.  In Unix and Microsoft Windows, the built-in SETENV
		routine is used instead.

 Side effects:	None.

 Category    :	Utilities, Operating_system.

 Prev. Hist. :	None.

 Written     :	William Thompson, GSFC, 27 March 1995

 Modified    :	Version 1, William Thompson, 27 March 1995

 Version     :	Version 1, 27 March 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	SETFLAG
 Purpose     : 
	Sets flags to control behavior of image display routines.
 Explanation : 
	Sets one of the flag fields in the !IMAGE structure.  One can use this
	routine to set the default value of one of the SERTS keyword parameters
	once rather than passing the relevant keyword to each and every
	routine.  Passing the keyword to any individual routine takes
	precedence over SETFLAG.

	Use UNSETFLAG to disable any keyword set with SETFLAG.

	Use ENABLEFLAG instead of SETFLAG to reenable one of the keyword that
	takes a value, such as MISSING or SIZE, without disturbing the value
	of that keyword.

	Use SHOWFLAGS to show what flags are set, and what values they have.

 Use         : 
	SETFLAG, Keyword=Value or /Keyword, ...
 Inputs      : 
	None.  Only keyword parameters are used by this routine.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	NOSQUARE = If set, then pixels are not forced to be square.
	SMOOTH	 = If set, then image is expanded with interpolation.
	NOBOX	 = If set, then box is not drawn, and no space is reserved
		   for a border around the image.
	NOSCALE	 = If set, then the command TV is used instead of TVSCL to
		   display the image.
	MISSING	 = Value flagging missing pixels.  These points are scaled to
		   zero.  Ignored if NOSCALE is set.
	SIZE	 = If passed and positive, then used to determine the scale of
		   the image.
	NOEXACT  = If set, then exact scaling is not imposed.  Otherwise, the
		   image scale will be either an integer, or one over an
		   integer.  Ignored if SIZE is passed with a positive value.
	XALIGN	 = Alignment within the image display area.  Ranges between 0
		   (left) to 1 (right).  Default is 0.5 (centered).
	YALIGN	 = Alignment within the image display area.  Ranges between 0
		   (bottom) to 1 (top).  Default is 0.5 (centered).
	RELATIVE = Size of area to be used for displaying the image, relative
		   to the total size available.  Must be between 0 and 1.
		   Default is 1.  Passing SIZE explicitly will override this
		   keyword.
	MAX	 = The maximum value to be considered in scaling images, as
		   used by BYTSCL.
	MIN	 = The minimum value to be considered in scaling images, as
		   used by BYTSCL.
	VELOCITY = If set then the MIN and MAX values pertain to velocity
		   images rather than intensity images.  (An alternate way to
		   do the same thing is to use the keywords VMIN and VMAX.)
	TOP	 = The maximum value of the scaled image array, as used by
		   BYTSCL.
	COMBINED = Signal to FORM_VEL to scale velocity images so that they can
		   be displayed together with intensity images.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, June 1991.
	W.T.T., Nov. 1991, added keywords MIN, MAX, VMIN, VMAX, TOP and
			   COMBINED.
	W.T.T., May 1992, added VELOCITY keyword, and made VMIN, VMAX alternate
			  format.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
 Written     : 
	William Thompson, GSFC, June 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	SETIMAGE
 Purpose     : 
	Allow several images in one window.
 Explanation : 
	Allows several images in one window, arranged horizontally and/or
	vertically.

	If the /NORMAL keyword is set, then the equivalent values of IX, NX,
	and IY, NY (which may be fractional) are calculated and substituted in
	the common block.

	If no parameters are passed, or the full screen is selected, then
	the behavior is reset to the default.

	Normally, PUT is used to actually display an image using only part of
	the screen, although SETIMAGE and EXPTV,/NORESET could be used to
	generate the same output.

	SETIMAGE can be used to reselect an image that was previously displayed
	(e.g. with PUT).

 Use         : 
	SETIMAGE					;Reset to default

	SETIMAGE, IX, NX  [, IY, NY ]			;Divide screen into
							;NX x NY boxes

	SETIMAGE, /NORMAL, X1, X2  [, Y1, Y2 ]		;Arbitrary box in
							;normalized coordinates

	Example: Display an image as the third of five from the left, and the
	second of three from the top.

		SETIMAGE, 3, 5, 2, 3
		EXPTV, image, /NORESET

	Example: Display an image in a box using the top 80% of the screen,
	with 5% margins on either side.

		SETIMAGE, 0.05, 0.95, 0.2, 1, /NORMAL
		EXPTV, image, /NORESET

	Example: Select a previously displayed image and retrieve the data
	coordinates associated with it.

		SETIMAGE, 2, 5, 1, 3, /DATA

 Inputs      : 
	None required.
 Opt. Inputs : 
	IX, NX	= Relative position along X axis, expressed as position IX
		  out of a possible NX, from left to right.  If not passed,
		  then 1,1 is assumed. 
	IY, NY	= Relative position along Y axis, from top to bottom.  If
		  not passed, then 1,1 is assumed.

	or

	X1, X2	= Coordinates along the X axis of an arbitrary box in
		  normalized coordinates.  Can have values between 0 and 1.
	Y1, Y2	= Coordinates along the Y axis of an arbitrary box in
		  normalized coordinates.  Can have values between 0 and 1.  If
		  not passed, then 0,1 is assumed.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	NORMAL	= If set, then the input parameters are in normalized
		  coordinates.  Otherwise, they refer to the relative position
		  of the image on the screen in a regular array of images.
	DATA	= Retrieve the data coordinates associated with an already
		  displayed image.
	DISABLE	= If set, then TVSELECT is not called.  Only relevant in
		  conjunction with the DATA keyword.
	CURRENT	= If set, then the currently stored settings are used.  Used in
		  conjunction with the DATA keyword to allow calling without
		  parameters.
 Calls       : 
	TRIM, TVSELECT, TVUNSELECT
 Common      : 
	IMAGE_AREA  = Contains switch IMAGE_SET and position IX, NX, IY, NY.
 Restrictions: 
	If /NORMAL is set, then X1, X2, Y1, Y2 must be between 0 and 1.
	Otherwise, IX must be between 1 and NX, and (if passed) IY must be
	between 1 and NY.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson	Applied Research Corporation
	February, 1991          8201 Corporate Drive
				Landover, MD  20785

	William Thompson, November 1992, added /NORMAL keyword.
 Written     : 
	William Thompson, GSFC, February 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 24 June 1993.
		Added call to ON_ERROR.
	Version 3, William Thompson, GSFC, 2 September 1993.
		Added DATA and DISABLE keywords.
		Added CURRENT keyword.
 Version     : 
	Version 3, 2 September 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	SETPLOT
 Purpose     : 
	Switch between plotting devices with memory about each.
 Explanation : 
	Switches among the various available plotting devices.	The plotting
	variables for each device are saved in a common block so that the user
	retains the ability to reset to a previously used device and do over-
	plots, even if plots were produced on another device in the meantime.

	Calling SETPLOT with the name of the currently selected device resets
	the system variables to either default values, or those from the last
	time SETPLOT was called.

	The !BCOLOR and !ASPECT system variables are also saved.

 Use         : 
	SETPLOT, DEVICE
 Inputs      : 
	DEVICE	- Name of the plotting device one is changing to.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	COPY = If set, then the current color table is copied to the new
	       graphics device.  Also, the SETFLAG routine is called to set TOP
	       equal to the number of colors.  Also makes sure that !P.COLOR
	       does not exceed the TOP color.  Requires the SERTS image display
	       software.
 Calls       : 
	ADD_DEVICE, SETSCALE
 Common      : 
	PLOTFILE - Saves system variables for later retrieval.  Not to be used 
	by other routines.
 Restrictions: 
	The procedure will not work correctly unless it is used exclusively to 
	change the plotting device.

	In general, the SERTS graphics devices routines use the special system
	variables !BCOLOR and !ASPECT.  These system variables are defined in
	the procedure DEVICELIB.  It is suggested that the command DEVICELIB be
	placed in the user's IDL_STARTUP file.

 Side effects: 
	Many system variables are manipulated by this routine--in particular
	!P.CHARSIZE and !P.FONT.

	The first time the routine is called for a particular graphics device,
	certain plot parameters may be set to default values.

	Any SETSCALE settings will be lost.

 Category    : 
	Utilities, Devices.
 Prev. Hist. : 
	W.T.T., Sept. 1987.
	William Thompson, February, 1990.
	William Thompson, October, 1991, added !ASPECT system variable.
	William Thompson, November 1992, changed to save !P.NOERASE and
					 !Z.THICK.
 Written     : 
	William Thompson, GSFC, September 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 27 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 14 September 1994
		Added COPY keyword.
	Version 3, William Thompson, GSFC, 21 June 1995
		Added INTERPOLATE keyword.
 Version     : 
	Version 3, 21 June 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	SETSCALE
 Purpose     : 
	Sets plot scale so it is the same in X and Y directions.
 Explanation : 
	The data limits in the X and Y directions (plus 5%) are calculated and
	compared against the the physical size of the plotting area in device
	coordinates.  Whichever scale is larger is then used for both axes, and
	the plot limits are set to center the data in both directions.  The
	parameters !X.STYLE and !Y.STYLE are then set to 1 for exact spacing.
 Use         : 
	SETSCALE				- Resets to previous state.
	SETSCALE, ARRAY				- Calculates scale for CONTOUR.
	SETSCALE, XARRAY, YARRAY		- Calculates scale from arrays.
	SETSCALE, XMIN, XMAX, YMIN, YMAX	- Calculates scale from limits.
 Inputs      : 
	None required.  Calling SETSCALE without any parameters resets to the
	default behavior.
 Opt. Inputs : 
	ARRAY			- Two dimensional array to be used in a simple
				  contour plot.  The minima are set to zero,
				  and the maxima are set to one less than the
				  dimensions of the array.
	XARRAY, YARRAY		- Arrays from which the minimum and maximum
				  values are calculated.
	XMIN, XMAX, YMIN, YMAX	- The limits in the X and Y directions from
				  which the scale is calculated.  The actual
				  X and Y ranges must include these values.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	NOBORDER = If set, then the 5% border is not applied.
	NOADJUST = If set, then the edges of the plot (!P.POSITION) are
		   not modified. 
 Calls       : 
	GET_VIEWPORT
 Common      : 
	SETSCALE = Keeps track of the system variables changed by this routine.
 Restrictions: 
	Unpredictable results may occur if SETSCALE is in effect when WINDOW,
	WSET or SET_PLOT are called.  It is recommended that SETSCALE be called
	without parameters to reset to the ordinary behavior before the
	graphics device or window is changed.

	In general, the SERTS graphics devices routines use the special system
	variables !BCOLOR and !ASPECT.  These system variables are defined in
	the procedure DEVICELIB.  It is suggested that the command DEVICELIB be
	placed in the user's IDL_STARTUP file.

 Side effects: 
	The system variables !X.STYLE, !Y.STYLE, !X.S, !Y.S, !X.RANGE (!XMIN
	and !XMAX) and !Y.RANGE (!YMIN and !YMAX) are modified.

	Unless NOADJUST is set, the edges of the plot (!P.POSITION) are
	adjusted to fit the data.  Then, when SETSCALE is called without any
	parameters, these parameters are returned to their original settings.

	System variables may be changed even if the routine exits with an error
	message.

	If SETSCALE is called without any parameters, then the modified system
	variables are restored to their original values.  Additional graphics
	functions such as OPLOT will still be possible.

 Category    : 
	Utilities, Devices.
 Prev. Hist. : 
	William Thompson, Feb. 1991.
	William Thompson, Oct. 1991, added !ASPECT system variable.
	William Thompson, May  1992, added common block and changing viewport.
	William Thompson, Nov. 1992, changed structure of common block, and
		removed support for changing viewport.
	William Thompson, Nov. 1992, changed to use GET_VIEWPORT instead of
		INIT_SC1_SC4, and to restore original !P.POSITION when called
		with no parameters.
	William Thompson, December 1992, changed common block to keep better
		track of the state of the system variables.
 Written     : 
	William Thompson, GSFC, February 1991.
 Modified    : 
	Version 1, William Thompson, 27 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 27 April 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	SETVIEW
 Purpose     : 
	Switch between several plots on one page.
 Explanation : 
	SETVIEW modifies the viewport parameters !SC1, !SC2, !SC3 and !SC4 to
	allow several plots on one page, arranged horizontally and/or 
	vertically.

	Calling SETVIEW with nontrivial parameters also sets !NOERAS to 1.
	New plots must be started with an explicit ERASE command.
 
	Calling SETVIEW without any parameters, or IX,NX and IY,NY all equal
	to 1 resets the viewport, and sets !NOERAS to 0.

	Recalling SETVIEW with the same parameters as before will restore the
	system variables associated with that setting.  This allows the user to
	switch between several plots without losing the scaling information
	associated with each.  Note that when switching between windows that
	both WSET and SETVIEW must be called each time for this to work.
	Alternatively, SETWINDOW can be used to switch between windows.
 
 Use         : 
	SETVIEW  [, IX, NX  [, IY, NY  [, SX  [, SY ]]]]
 Inputs      : 
	None required.  Calling SETVIEW without any parameters resets to the
	default behavior.
 Opt. Inputs : 
	IX, NX	= Relative position along X axis, expressed as position IX
		  out of a possible NX, from left to right.  If not passed,
		  then 1,1 is assumed. 
	IY, NY	= Relative position along Y axis, from top to bottom.  If
		  not passed, then 1,1 is assumed. 
	SX	= Multiplication factor for space between plots in X 
		  direction.  A value of SX between 0 and 1 decreases the 
		  amount of space between plots, a value greater than 1 
		  increases the amount of space.  If not passed, then 1 is 
		  assumed.
	SY	= Multiplication factor for space between plots in Y 
		  direction.  If not passed, then 1 is assumed.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	ADD_VIEWPORT, SETSCALE, TRIM
 Common      : 
	VIEWPORT  = Contains data to maintain information about the viewports
		    as a function of graphics device and window.
 Restrictions: 
	IX must be between 1 and NX.  IY must be between 1 and NY.

	SX and SY must not be negative.

	This routine must be called separately for each graphics device.

	In general, the SERTS graphics devices routines use the special system
	variables !BCOLOR and !ASPECT.  These system variables are defined in
	the procedure DEVICELIB.  It is suggested that the command DEVICELIB be
	placed in the user's IDL_STARTUP file.

 Side effects: 
	The system variable !NOERAS is changed.

	Any SETSCALE settings will be lost.

 Category    : 
	Utilities, Devices.
 Prev. Hist. : 
	William Thompson	Applied Research Corporation
	September, 1988		8201 Corporate Drive
				Landover, MD  20785

	William Thompson, Nov 1992, changed common block to allow system
				    variables to be saved between multiple
				    plots.  Also added call to disable
				    possible SETSCALE settings.
 Written     : 
	William Thompson, GSFC, September 1988.
 Modified    : 
	Version 1, William Thompson, GSFC, 27 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 4 January 1994.
		Fixed bug where original state was not being completely
		restored.
 Version     : 
	Version 2, 4 January 1994.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	SETWINDOW
 Purpose     : 
	Switch between windows, retaining parameters for each.
 Explanation : 
	SETWINDOW stores the plot parameters for the current window in a common
	block, switches to the desired window, and restores the plot parameters
	from the last time that window was used.
 Use         : 
	SETWINDOW  [, WINDOW ]
 Inputs      : 
	None required.
 Opt. Inputs : 
	WINDOW	= Number of window to switch to.  If not passed, then the
		  parameters for the current window are saved.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	SHOW  : call WSHOW
 Calls       : 
	ADD_WINDOW, SETSCALE, TRIM
 Common      : 
	SETWINDOW = Contains WINDOWS, and the structure SAVE which contains the
		    graphics system variables.
 Restrictions: 
	WINDOW must be a valid, existing window.

	Creating a new window with the WINDOW command will also switch to that
	window.  To save the settings for the current window, call SETWINDOW
	before calling WINDOW.

	In general, the SERTS graphics devices routines use the special system
	variables !BCOLOR and !ASPECT.  These system variables are defined in
	the procedure DEVICELIB.  It is suggested that the command DEVICELIB be
	placed in the user's IDL_STARTUP file.

 Side effects: 
	Certain system variables from the previous time the window was used are
	recalled.

	Any SETSCALE settings will be lost.

 Category    : 
	Utilities, Devices.
 Prev. Hist. : 
	William Thompson	Applied Research Corporation
	November, 1992		8201 Corporate Drive
				Landover, MD  20785
 Written     : 
	William Thompson, GSFC, November 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 27 April 1993.
		Incorporated into CDS library.
       Version 1.1, Dominic Zarro, (ARC/GFSC), 15 December 1994.
               Added WSHOW
 Version     : 
	Version 1.1, 15 December 1994.
;-
;+
 Project     :	SOHO - CDS

 Name        :	SHORTHEX()

 Purpose     :	Converts a short int value into fixed hex string format.

 Explanation :	Converts short integer value in 0xnnnn format.

 Use         : <str = shorthex(value)>

 Inputs      : value = short integer value.

 Opt. Inputs : None.

 Outputs     : Character string containing hex value.

 Opt. Outputs:	None.

 Keywords    : None.

 Calls       :	None.
                
 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Command preparation.

 Prev. Hist. :	None.

 Written     :	Version 0.00, Martin Carter, RAL, 14/10/94

 Modified    :	Version 0.01, Martin Carter, RAL, 28/11/94
                            Added proforma.

 Version     :	Version 0.01, 28/11/94
;-
;+
 Project     : SOHO - CDS

 Name        : 
	SHOW_COLORS
 Purpose     : 
	Displays the current color table.
 Explanation : 
	The color tables are read using TVLCT,/GET.  Each color table (red,
	green and blue) is plotted with a different value of !COLOR, and then
	the color tables are modified so that the red color table is plotted in
	red, etc.  The background (color 0) is changed to black, and the axes
	(color 4) are changed to white.
 Use         : 
	SHOW_COLORS
 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	DISABLE  = If set, then TVSELECT not used.
 Calls       : 
	LINECOLOR, TVSELECT, TVUNSELECT
 Common      : 
	None.
 Restrictions: 
	The plotting device must have at least five available colors, and be
	able to load color tables.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	The first five colors (0-4) in the color table are changed after
	plotting, so that the red color table is plotted in red, etc.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, April 1992, changed to use TVLCT,/GET instead of
				      common block, and added DISABLE keyword.
 Written     : 
	William Thompson, GSFC.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 27 July 1994
		Rewrote not to use PLOTC or OPLOTC.
 Version     : 
	Version 2, 27 July 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	SHOW_QUEUE
 Purpose     : 
	Show the contents of a print queue.
 Explanation : 
	Spawns the proper command to the operating system to display the
	contents of print queues.
 Use         : 
	SHOW_QUEUE  [, QUEUE ]
 Inputs      : 
	None required.
 Opt. Inputs : 
	QUEUE	= Name of queue to be listed.  If not passed, then the
		  environment variable PSLASER (or PSCOLOR) is checked for the
		  name of the print queue.
 Outputs     : 
	The information about the print queue is printed to the terminal
	screen.
 Opt. Outputs: 
	None.
 Keywords    : 
	COLOR	= If set, then the environment variable PSCOLOR is checked for
		  the name of the print queue rather then PSLASER.  Ignored if
		  QUEUE is passed.
 Calls       : 
	TRIM
 Common      : 
	None.
 Restrictions: 
	In general, the SERTS graphics devices routines use the special system
	variables !BCOLOR and !ASPECT.  These system variables are defined in
	the procedure DEVICELIB.  It is suggested that the command DEVICELIB be
	placed in the user's IDL_STARTUP file.

 Side effects: 
	None.
 Category    : 
	Utilities, Devices.
 Prev. Hist. : 
	William Thompson, July 1992.
 Written     : 
	William Thompson, GSFC, July 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 27 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 27 April 1993.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : SHOW_STRUCT
               
 Purpose     : Display contents and breakdown of an IDL structure.
               
 Explanation : Displays in a widget the contents of a structure.  Embedded
               structures are unpacked.
               
 Use         : IDL> show_struct, str_name
    
 Inputs      : str_name  - name of structure to be viewed.
               
 Opt. Inputs : None
               
 Outputs     : None
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : DSP_STRUCT

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, structure
               
 Prev. Hist. : Just a packaged version of S V Haugan's DSP_STRUCT with the
               /alone keyword.

 Written     : C D Pike, RAL, 21-Apr-94
               
 Modified    : 

 Version     : Version 1, 21-Apr-94
;-
;+
 Project     : SOHO - CDS

 Name        : 
	SHOWFLAGS
 Purpose     : 
	Show the settings controlled by SET/UNSET/ENABLEFLAG.
 Explanation : 
	Shows the flag fields in the !IMAGE structure as set by the routines
	SETFLAG, UNSETFLAG, and ENABLEFLAG.
 Use         : 
	SHOWFLAGS
 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	TRIM
 Common      : 
	None.
 Restrictions: 
	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, June 1991.
	W.T.T., Nov. 1991, added support for MIN, MAX, VMIN, VMAX, TOP and
			   COMBINED.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
 Written     : 
	William Thompson, GSFC, June 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	SIGRANGE()
 Purpose     : 
	Selects the most significant data range in an image.
 Explanation : 
	Selects out the most significant range in the data to be used in 
	displaying images.  The histogram of ARRAY is used to select the most
	significant range.
 Use         : 
	OUTPUT = SIGRANGE( ARRAY )
 Inputs      : 
	ARRAY	 = Array to take most significant range of.
 Opt. Inputs : 
	None.
 Outputs     : 
	The function returns an array where values above and below the
	selected range are set equal to the maximum and minimum of the
	range respectively.
 Opt. Outputs: 
	None.
 Keywords    : 
	FRACTION = Fraction of data to consider most significant.
		   Defaults to 0.9
	MISSING	 = Value used to flag missing points.  Data points with this
		   value are not considered or changed.
 Calls       : 
	GET_IM_KEYWORD
 Common      : 
	None.
 Restrictions: 
	ARRAY must have more than two points.  Fraction must be greater than 0 
	and less than 1.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	None.
 Prev. Hist. : 
	W.T.T., Oct. 1987.
	W.T.T., Jan. 1991.  Changed FRACTION to keyword, and added keyword
			    BADPIXEL.
	W.T.T., Mar. 1992.  Rewrote to apply histograms to only a fraction of
			    the array to speed up the process.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
 Written     : 
	William Thompson, GSFC, October 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 25 May 1993.
		Changed call to HISTOGRAM to be compatible with OpenVMS/ALPHA
 Version     : 
	Version 2, 25 May 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	SINCE_VERSION

 Purpose     :	
	Determine if current release is later than specified.

 Explanation :	
	Determine if the current release of IDL (as given in the 
	!VERSION.RELEASE system variable) comes after the user specified 
	release.   

 Use         :	
	test = SINCE_VERSION( release )

	Use the /FTOXDR keyword to the BYTEORDER procedure if the current 
	release of IDL is 2.2.2 or later

	IDL> if since_version('2.2.2') then byteorder, a, /FTOXDR

 Inputs      :	
	release - scalar string, must be formatted exactly like the 
		!VERSION.RELEASE system variable (e.g. '3.0.0') 

 Opt. Inputs :	
	None.

 Outputs     :	
	test - 1 if current release is identical or later than the specified 
              'release' else 0

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Miscellaneous

 Prev. Hist. :	
	Written   Wayne Landsman         Hughes/STX        January, 1992
	Corrected algorithm     W. Landsman                April, 1992

 Written     :	Wayne Landsman, Hughes/STX, January 1992

 Modified    :	Version 1, William Thompson, GSFC, 14 December 1994
			Incorporated into CDS library

 Version     :	Version 1, 14 December 1994
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : SIZEOF()
               
 Purpose     : Calculates the size of an IDL variable 
               
 Explanation : Calculates the size of an IDL variable. In the current
               Ultrix IDL release (2.3.0 ), size of structures cannot be 
               obtained since recursive calls are not supported. String
               variables are countedas one byte each (??)

               
 Use         : x= sizeof( input )
    
 Inputs      : input -  any IDL variable
               
 Opt. Inputs : None
               
 Outputs     : Function returns size of input variable
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, misc
               
 Prev. Hist. : Arnulf, Oct-93

 Written     : For FM sci_ana program, C D Pike, RAL, 22-Oct-93
               
 Modified    : 

 Version     : Version 1, 22-Oct-93
;-
;+
 Project     :	SOHO - CDS

 Name        :	SKIPF

 Purpose     :	Emulates the VMS SKIPF function on UNIX machines.

 Explanation :	Emulates the VMS SKIPF function on UNIX machines.

 Use         :	SKIPF, UNIT, NSKIP
		SKIPF, UNIT, NSKIP, RECORDS

 Inputs      :	UNIT	= Tape unit number.  Tape drives are selected via the
			  UNIX environment variables "MT1", "MT2", etc.  The
			  desired tape drive is thus specified by numbers, as
			  in VMS.  Must be from 0 to 9.

		NSKIP	= Number of files or records to skip.

 Opt. Inputs :	RECORDS = If present, then records are skipped instead of
			  files.

 Outputs     :	None.  However, !ERR is set to ABS(NSKIP)

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	CHECK_TAPE_DRV

 Common      :	None.

 Restrictions:	This routine may not act exactly the same as the VMS
		equivalent, particularly in regards to the behavior of the !ERR
		system variable.

		The environment variable "MTn", where n corresponds to the
		variable UNIT, must be defined.  E.g.,

			setenv MT0 /dev/nrst0

		Requires IDL v3.1 or later.

 Side effects:	The device file is opened.  !ERR is set to ABS(NSKIP).

 Category    :	Utilities, I/O, Tape.

 Prev. Hist. :	VERSION 1, R. W. Thompson 12/4/89
		William Thompson, Apr 1991, rewrote to better emulate VMS
			version.

 Written     :	R. W. Thompson, GSFC/IUE, 4 December 1989.

 Modified    :	Version 1, William Thompson, GSFC, 21 December 1993.
			Rewrote to use IOCTL.

 Version     :	Version 1, 21 December 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : SP_COMMON

 Purpose     : Contains common blocks used by SCANPATH.

 Explanation : This is not a procedure as such, but contains the common blocks
		used by SCANPATH and associated routines.

 Common      : Contains the common blocks SCANPATH, LIB_STUFF and PROCB.

 Category    : Documentation, Online_help.

 Prev. Hist. : See SCANPATH.

 Written     : D. Zarro, GSFC/SDAC, 1993.

 Modified    : Version 1, William Thompson, GSFC, 23 April 1993.
			Renamed to SP_COMMON for DOS compatibility, and
			incorporated into CDS library.
               Version 2, Dominic Zarro, GSFC, 1 August 1994.
                       Added additional common block (DEVICE) and
                       extended common block SCANPATH to accomodate
                       the new independent procedure widget base
               Version 2.1, Dominic Zarro, GSFC, 3 September 1994.
                       Added SEARCH common block
 Version     : Version 2.1, 1 August 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	SPEC_DIR()
 Purpose     :	
	Appends a default disk or directory to a filename.
 Explanation :	
	Provide a complete file specification by appending a default disk
	or directory if necessary.

	For Unix, SPEC_DIR will simply append the default directory obtained
	from the CD command (if necessary).   Under VMS one must also 
	determine if the disk and/or directory is already specified.    Under 
	VMS, SPEC_DIR will also try to translate disk and directory logical 
	names.

 Use         :	
	File_spec = SPEC_DIR(filename,[extension])

 Inputs      :	
	filename - character string giving partial specification of a file
		name.  VMS examples include 'UIT$USER2:TEST.DAT', or 
		'[.SUB]TEST'.   Unix examples include 
		'/home/idl/lib', or '$IDL_HOME/pro'.   

 Opt. Inputs :	
	exten - string giving a default file name extension to be used if
		filename does not contain one.  Do not include the period.

 Outputs     :	
	File_spec - Complete file specification using default disk or 
		directory when necessary.  If the default directory
		is UIT$USER1:[IDL] then, for the above VMS examples, the
		output would be 'UIT$USER2:[IDL]TEST.DAT'
		'UIT$USER2:[IDL.SUB]TEST'. 

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	FDECOMP

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Operating_System

 Prev. Hist. :	
	Written W. Landsman         STX         July, 1987
	Revised for use on VAXes and on SUNs, W.  Landsman, STX   August 1991

 Written     :	W. Landsman, GSFC/UIT (STX), July 1987

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	SPLIT_STRUCT

 Purpose     :	split two structures apart

 Explanation :

 Use         : SPLIT_STRUCT,STRUCT,INDEX,S1,S2

 Inputs      :	STRUCT = input structure to split
               INDEX  = index (or tag name) at which to break off structure

 Opt. Inputs :	None.

 Outputs     :	S1, S2 = split structures

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Structure handling

 Prev. Hist. :	None.

 Written     :	Dominic Zarro (ARC)

 Version     :	Version 1.0, 22 January 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	STORE_ARRAY
 Purpose     : 
	Insert array into an array of arrays.
 Explanation : 
	Inserts array INSERT into array DESTINATION, allowing the dimensions of
	DESTINATION to adjust to accommodate it.
 Use         : 
	STORE_ARRAY, DESTINATION, INSERT, INDEX
 Inputs      : 
	DESTINATION	= Array to be expanded.
	INSERT		= Array to insert into DESTINATION.
	INDEX		= Index of the final dimension of DESTINATION to insert
			  INSERT into.
 Opt. Inputs : 
	None.
 Outputs     : 
	DESTINATION	= Expanded output array.  If both input arrays have the
			  same number of dimensions, then the DESTINATION will
			  be replaced with INSERT.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	DESTINATION and INSERT have to be either both of type string or both of
	numerical types.

	INSERT must not have more dimensions than DESTINATION.

 Side effects: 
	None.
 Category    : 
	Utilities, Arrays.
 Prev. Hist. : 
	William Thompson, Feb. 1992, from BOOST_ARRAY by D. Zarro and P. Hick.
 Written     : 
	William Thompson, GSFC, February 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 April 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	STORE_TV_SCALE
 Purpose     : 
	Store information about displayed images.
 Explanation : 
	Stores information about images displayed by EXPTV, PUT, and other
	routines.  Called from SCALE_TV.

	Data arrays containing the passed parameters, as well as !D.NAME,
	!D.WINDOW, and the parameters from SETIMAGE, are stored in the TV_SCALE
	common block.  Each time the routine is called, if the common block
	already contains an entry for the NAME, WINDOW and SETIMAGE variables,
	then the other variables are updated.  Otherwise, another entry is
	added to the database.

 Use         : 
	STORE_TV_SCALE, SX, SY, MX, MY, JX, JY
 Inputs      : 
	SX, SY	= Image size, in data pixels
	MX, MY	= Image size, in screen pixels
	JX, JY	= Position of lower left-hand corner of displayed image, in
		  screen pixels.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	DISABLE  = If set, then TVSELECT not used.
	ORIGIN	 = Two-element array containing the coordinate value in
		   physical units of the center of the first pixel in the
		   image.  If not passed, then [0,0] is assumed.
	SCALE	 = Pixel scale in physical units.  Can have either one or two
		   elements.  If not passed, then 1 is assumed in both
		   directions.
	DATA	 = Used to override the ORIGIN and SCALE keywords.  The value
		   of this keyword is a structure variable containing the data
		   needed to convert pixel coordinates into data coordinates.
		   The main use of this keyword is to support the routine
		   TVAXIS.
 Calls       : 
	BOOST_ARRAY, TVSELECT, TVUNSELECT
 Common      : 
	TV_SCALE contains the passed parameters as a function of graphics
	device, window, and SETIMAGE settings.  The parameters needed to
	translate pixel coordinates into data coordinates are also store in
	this common block.

	IMAGE_AREA contains switch IMAGE_SET and position IX, NX, IY, NY, from
	SETIMAGE.

 Restrictions: 
	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, May 1992.
 Written     : 
	William Thompson, GSFC, May 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 1 September 1993.
		Added calculation of data coordinates.
		Added ORIGIN and SCALE keywords.
		Added variable DATA to TV_SCALE common block.
	Version 3, William Thompson, GSFC, 9 November 1993.
		Removed (unnecessary) restriction that scales be positive.
 Version     : 
	Version 3, 9 November 1993.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : STR2ARR()
               
 Purpose     : Given a delimiter, convert a string to an array of strings. 
               
 Explanation : Recursively parses the input string using the default or
               supplied delimiter and creates an array of the elements.
               
 Use         : IDL> array = strarr( string [, delim=delim, /list, /nomult]) 

               eg print,str2arr(!path,':',/list,/nomult)
    
 Inputs      : string  - string to be parsed and separated into delimited
                         components.
               
 Opt. Inputs : delim   - character defining the delimiter (default = comma)
               
 Outputs     : array   - string array, number elements=number of delimiters+1
               
 Opt. Outputs: If /list keyword is present, the array is printed as a list.
               
 Keywords    : list  - if present the array elements are listed on the screen.
               nomult - eliminates multiple, consecutive occurrences of the 
                        deliminter.  ie for a delimiter of <space> then
                        a consecutive run of n spaces is treated as a single
                        delimiter.

 Calls       : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Utilities, Strings
               
 Prev. Hist. : Yohkoh routine by Sam freeland, LPARL

 Written     : CDS version by C D Pike, RAL, 2-Jul-1993
               
 Modified    : /nomult keyword,  CDP, 17-Nov-93

 Version     : Version 2,  17-Nov-1993
;-
;+
 Project     :	SOHO - CDS

 Name        :	STR2UTC()

 Purpose     :	Parses UTC time strings.

 Explanation :	This procedure parses UTC time strings to extract the date and
		time.

 Use         :	Result = STR2UTC( UTC )
		Result = STR2UTC( UTC, /EXTERNAL )

 Inputs      :	UTC	= A character string containing the date and time.  The
			  target format is the CCSDS ASCII Calendar Segmented
			  Time Code format (ISO 8601), e.g.

				"1988-01-18T17:20:43.123Z"

			  The "Z" is optional.  The month and day can be
			  replaced with the day-of-year, e.g.

				"1988-018T17:20:43.123Z"

			  Other variations include

				"1988-01-18T17:20:43.12345"
				"1988-01-18T17:20:43"
				"1988-01-18"
				"17:20:43.123"

			  Also, the "T" can be replaced by a blank, and the
			  dashes "-" can be replaced by a slash "/".  This is
			  the format used by the SOHO ECS.

			  In addition this routine can parse dates where only
			  two digits of the year is given--the year is assumed
			  to be between 1950 and 2049.

			  Character string months, e.g. "JAN" or "January", can
			  be used instead of the number.  In that case, it
			  assumes that the date is either in day-month-year or
			  month-day-year format, e.g. "18-JAN-1988" or
			  "Jan-18-1988".  However, if the first parameter is
			  four digits, then year-month-day is assumed, e.g.
			  "1988-Jan-18".

			  Dates in a different order than year-month-day are
			  supported, but unless the month is given as a
			  character string, then these are only supported
			  through the /MDY and /DMY keywords.

 Opt. Inputs :	None.

 Outputs     :	The result of the function is a structure containing the (long
		integer) tags:

			MJD:	The Modified Julian Day number.
			TIME:	The time of day, in milliseconds since the
				beginning of the day.

		Alternatively, if the EXTERNAL keyword is set, then the result
		is a structure with the elements YEAR, MONTH, DAY, HOUR,
		MINUTE, SECOND, and MILLISECOND.

		Any elements not found in the input character string will be
		set to zero.		

 Opt. Outputs:	None.

 Keywords    :	EXTERNAL = If set, then the output is in CDS external format,
			   as described above.
		DMY	 = Normally the date is in the order year-month-day.
			   However, if DMY is set then the order is
			   day-month-year.
		MDY	 = If set, then the date is in the order
			   month-day-year.
		YMD	 = If set, then the date is in the order
			   year-month-day.
		ERRMSG	 = If defined and passed, then any error messages 
			   will be returned to the user in this parameter 
			   rather than being handled by the IDL MESSAGE 
			   utility.  If no errors are encountered, then a null 
			   string is returned.  In order to use this feature, 
			   the string ERRMSG must be defined first, e.g.,

				ERRMSG = ''
				RESULT = STR2UTC( UTC, ERRMSG=ERRMSG )
				IF ERRMSG NE '' THEN ...

 Calls       :	DATATYPE, DATE2MJD, UTC2INT, MJD2DATE, VALID_NUM

 Common      :	None.

 Restrictions:	The components of the time must be separated by the colon ":"
		character, except between the seconds and fractional seconds
		parts, where the separator is the period "." character.

		The components of the date must be separated by either the dash
		"-" or slash "/" character.

		The only spaces allowed are at the beginning or end of the
		string, or between the date and the time.

		This routine does not check to see if the dates entered are
		valid.  For example, it would not object to the date
		"1993-February-31", even though there is no such date.

 Side effects:	If an error is encountered and the ERRMSG keyword is set, 
		STR2UTC returns an integer scalar equal to -1.

 Category    :	Utilities, Time.

 Prev. Hist. :	Part of the logic of this routine is taken from TIMSTR2EX by M.
		Morrison, LPARL.  However, the behavior of this routine is
		different from the Yohkoh routine.  Also, the concept of
		"internal" and "external" time is based in part on the Yohkoh
		software by M. Morrison and G. Linford, LPARL.

 Written     :	William Thompson, GSFC, 13 September 1993.

 Modified    :	Version 1, William Thompson, GSFC, 21 September 1993.
		Version 2, William Thompson, GSFC, 28 September 1993.
			Expanded the capabilities of this routine based on
  			TIMSTR2EX.
		Version 3, William Thompson, GSFC, 20 October 1993.
			Corrected small bug when the time string contains
			fractional milliseconds, as suggested by Mark Hadfield,
			NIWA Oceanographic.
		Version 4, William Thompson, GSFC, 18 April 1994.
			Corrected bugs involved with passing arrays as
			input--routine was not calling itself reiteratively
			correctly.
		Version 5, Donald G. Luttermoser, GSFC/ARC, 28 December 1994
			Added the keyword ERRMSG.
		Version 6, William Thompson, GSFC, 25 January 1995
			Changed to call intrinsic ROUND instead of NINT.  The
			version of NINT in the Astronomy User's Library doesn't
			automatically select between short and long integers as
			the CDS version does.
		Version 7, William Thompson, GSFC, 26 January 1995
			Modified to support VMS-style format.
			Made error-handling more robust.
		Version 8, Donald G. Luttermoser, GSFC/ARC, 30 January 1995
			Added ERRMSG keyword to internally called procedures.
			Note that this routine can handle both scalars and
			vectors as input.
		Version 9, William Thompson, GSFC, 2 February 1995
			Fixed bug with years input with two-digits.
		Version 10, William Thompson, GSFC, 22 March 1995
			Fixed bug when date string contains OCT in capital
			letters.
		Version 11, William Thompson, GSFC, 15 June 1995
			Modified so that the default behavior is different when
			the month is given as a character string.  In that
			case, it now assumes that the year is the *last*
			parameter in the string unless given with all four
			digits.
		Version 12, William Thompson, GSFC, 19 June 1995
			Made logic used in version 11 more robust.  Added
			keyword YMD.

 Version     :	Version 12, 19 June 1995
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:	
       STR_CHOP()

 PURPOSE:
       Chop off a substring from a string scalar or vector

 EXPLANATION:
       
 CALLING SEQUENCE: 
       Result = STR_CHOP(strings, substr)

 INPUTS:
       STRINGS - String scalar or vector from which a substring is chopped
       SUBSTR  - Substring to be chopped from STRINGS

 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       RESULT - A new string scalar or vector in which STRSUB has been
                removed from each of its elements.

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS: 
       None.

 CALLS:
       GREP, DATATYPE, STR_SEP, ARR2STR

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       
 PREVIOUS HISTORY:
       Written January 20, 1995, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       
 VERSION:
       Version 1, January 20, 1995
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       STR_INDEX()

 PURPOSE:
       Get indices of a substring (SUBSTR) in string.

 EXPLANATION:
       The IDL intrinsic function STRPOS returns only the index of the first
       occurrence of a substring. This routine calls itself recursively to get
       indices of the rest occurrences.

 CALLING SEQUENCE:
       result= STR_INDEX(str, substr [, offset])

 INPUTS:
       STR    -- The string in which the substring is searched for
       SUBSTR -- The substring to be searched for within STR

 OPTIONAL INPUTS:
       OFFSET -- The character position at which the search is begun. If
                 omitted or being negative, the search begins at the first
                 character (character position 0).

 OUTPUTS:
       RESULT -- Integer scalar or vector containing the indices of SUBSTR
                 within STR. If no substring is found, it is -1.

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS:
       None.

 CALLS:
       DATATYPE, DELVARX

 COMMON BLOCKS:
       STR_INDEX -- internal common block. The variable save in the block is
                    deleted upon final exit of this routine.

 RESTRICTIONS:
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       Utility, string

 PREVIOUS HISTORY:
       Written January 3, 1995, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:

 VERSION:
       Version 1, January 3, 1995
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : STR_PICK()
               
 Purpose     : Extract a substring bounded by given characters.
               
 Explanation : Given an input string and two bounding characters (or
               substrings), the function returns the extracted substring.  
               Default delimiters are first and second spaces.  
               If only one is given then substring returned
               is from there to the end of the string. If both characters
               are specified and one of them does not exist then a null
               string is returned.
               
 Use         : IDL> text = str_pick(in_text, char1, char2)

               eg print, str_pick('this is <crazy>.', '<','>')

                        --->  crazy
    
 Inputs      : in_text  -  string from which to extract
               
               
 Opt. Inputs : char1 - left boundary character (or substring)
               char2 - right boundary character (or substring)
               
 Outputs     : Function returns extracted substring
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : Standard str_ routines

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, string
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 27-Mar-95
               
 Modified    : Allow boundaries to be substrings.  CDP, 10-Apr-95

 Version     : Version 2, 10-Apr-95
;-
;+
 Project     :	SOHO - CDS

 Name        :	STREP

 Purpose     : Replaces first occurrence of given string within a string.

 Explanation : Within the given string the routine will replace the first
               occurrence of the supplied substring with the requested
               replacement.

               eg. IDL> x = 'abcdefgcd'
                        print, strep(x,'cd','qq')  --> 'abqqefgcd'

               see also REPSTR() for replacement of all occurrences.

 Use         : Result = output=strep(input,old,new,/all)

 Inputs      :
               input=any string
               old=old characters
               new=new characters

 Opt. Inputs : None.

 Outputs     : Result = new string.

 Opt. Outputs: None.

 Keywords    : all = replace all characters

 Calls       : uses STRMID

 Common      : None.

 Restrictions: None.

 Side effects: None.

 Category    : String processing

 Prev. Hist. : None.

 Written     :	DMZ (ARC) August 1993

 Modified    : Documentation header update.  CDP, 26-Sep-94

 Version     : Version 2, 26-Sep-94
;-
;+
 Name        : STRIP_ARG

 Purpose     : Strip argument and keyword calls from an IDL program.

 Explanation : 

 Use         : STRIP_ARG,PROC

 Inputs      : 
	        PROC = string array with text of program.

 Outputs     : 
	        None.

 Category    : Documentation, Online_help.

 Written     : Dominic Zarro, ARC, 10 October 1994.

;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       STRIP_DIRNAME()

 PURPOSE: 
       Strip off directory name associated with filenames.

 EXPLANATION:
       Given a string array containing full filenames (including
       directory paths), this routine will strip off directory names
       and return only the file names.

 CALLING SEQUENCE: 
       Results = STRIP_DIRNAME(full_names [,path=path])

 INPUTS:
       FULL_NAMES -- String array containing full names of files
                     including directory paths.
   
 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       Results -- String array in which directory paths have beeb
                  stripped off from the full filename.

 OPTIONAL OUTPUTS:
       PATH -- An optional return variable that contains the stripped path
               string of the file names.

 KEYWORD PARAMETERS: 
       None.

 CALLS:
       None.

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       Utilities, os

 PREVIOUS HISTORY:
       Written September 19, 1994, by Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Liyun Wang, GSFC/ARC, September 20, 1994
          Added the PATH keyword.
       
 VERSION: 
       Version 1, September 19, 1994
       
;-
;+
 Name        : STRIP_DOC

 Purpose     : Strip internal documentation from an IDL program.

 Explanation : 

 Use         : DOC=STRIP_DOC(ARRAY)

 Inputs      : 
	        ARRAY = string array with text of program.

 Outputs     : 
	        DOC = string array with documentation part.

 Category    : Documentation, Online_help.

 Written     : Dominic Zarro, ARC, 10 October 1994.

;-
;+
 Project     :	SOHO - CDS

 Name        :	
	STRN

 Purpose     :	Convert number to unpadded string.

 Explanation :	
	The main and original purpose of this procedure is to convert a number
	to an unpadded string (i.e. with no blanks around it.)  However, it 
	has been expanded to be a multi-purpose formatting tool.  You may 
	specify a length for the output string; the returned string is either 
	set to that length or padded to be that length.  You may specify 
	characters to be used in padding and which side to be padded.  Finally,
	you may also specify a format for the number.  NOTE that the input 
	"number" need not be a number; it may be a string, or anything.  It is
	converted to string.

 Use         :	
	tmp = STRN( number, [ LENGTH=, PADTYPE=, PADCHAR=, FORMAT = ] )

	print,'Used ',strn(stars),' stars.'  ==> 'Used 22 stars.'
	print,'Attempted ',strn(ret,leng=6,padt=1,padch='0'),' retries.'
		==> 'Attempted 000043 retries.'
	print,strn('M81 Star List',length=80,padtype=2)
		==> an 80 character line with 'M81 Star List' centered.
	print,'Error: ',strn(err,format='(f15.2)')
		==> 'Error: 3.24'     or ==> 'Error: 323535.22'

 Inputs      :	
	NUMBER    This is the input variable to be operated on.  Traditionally,
		 it was a number, but it may be any scalar type.

 Opt. Inputs :	None.

 Outputs     :	
	tmp       The formatted string

 Opt. Outputs:	None.

 Keywords    :	
	LENGTH    This KEYWORD specifies the length of the returned string.  
		If the output would have been longer, it is truncated.  If 
		the output would have been shorter, it is padded to the right 
		length.
	PADTYPE   This KEYWORD specifies the type of padding to be used, if any.
		0=Padded at End, 1=Padded at front, 2=Centered (pad front/end)
		IF not specified, PADTYPE=1
	PADCHAR   This KEYWORD specifies the character to be used when padding.
		The default is a space (' ').
	FORMAT    This keyword allows the FORTRAN type formatting of the input
		number (e.g. '(f6.2)')

 Calls       :	None.

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, String.

 Prev. Hist. :	
	03-JUL-90 Version 1 written by Eric W. Deutsch
	10-JUL-90 Trimming and padding options added         (E. Deutsch)
	29-JUL-91 Changed to keywords and header spiffed up     (E. Deutsch)
	Ma7 92 Work correctly for byte values (W. Landsman)
	19-NOV-92 Added Patch to work around IDL 2.4.0 bug which caused an
	error when STRN('(123)') was encountered.            (E. Deutsch)

 Written     :	Eric W. Deutsch, 3 July 1990

 Modified    :	Version 1, William Thompson, GSFC, 10 June 1994
			Incorporated into CDS library

 Version     :	Version 1, 10 June 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	STRNUMBER()
 Purpose     : 
	Function to determine if a string is a valid numeric value.
 Explanation : 
	Function to determine if a string is a valid numeric value.

	This routine is mainly here to support routines from the IDL Astronomy
	User's Library.  The routine VALID_NUM performs the same function, but
	is more robust.

 Use         : 
	result = strnumber( st, [val] )
 Inputs      : 
	st - string
 Opt. Inputs : 
	None.
 Outputs     : 
	1 is returned as the function value if the string st has a
	valid numeric value, otherwise, 0 is returned.
 Opt. Outputs: 
	val - (optional) value of the string.  real*8
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
    (1)   Note that a blank string (e.g. " ") is not a valid numeric value, 
          although an empty string ("") is (=0.0).
    (2)   In V2.2.2 there was a bug in the IDL ON_IOERROR procedure that
          will cause the following statement to hang up IDL

		IDL> print,'' + string( strnumber('xxx') )

          This bug was fixed in V2.3.0
     (3)  As of V2.3.2, an IDL bug is seen in the following statements 

		IDL> st = 'E'
		IDL> q = strnumber(st)  & print,st

         The variable 'st' gets modified to an empty string.   This problem
         is related to the ambiguity of whether 'E' is a number or not 
         (could be = 0.0E).    A fix is expected a new IDL version.
 Category    : 
	Utilities, Numerical
 Prev. Hist. : 
	version 1  By D. Lindler Aug. 1987
 Written     : 
	Don Lindler, GSFC/HRS August 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 April 1993.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : STRPAD()
               
 Purpose     : Pads a string with blanks (or whatever) to specified width

              
 Explanation : Spaces are added in front of the input string to
		make the returned string have LENGTH characters.
		Use /AFTER to add spaces at the end.
               
 Use         : str = strpad(value, length, /after, fill=fill])
    
 Inputs      : VALUE:  A string..
		LENGTH: The desired length of the result in characters
               
 Opt. Inputs : None.
               
 Outputs     : Returns the padded string.
               
 Opt. Outputs: None.
               
 Keywords    : AFTER : Set to add spaces at the end.
               FILL  : The character with which to pad out the string.
                        Default is the space character

 Calls       : STRLEN, STRMID

 Common      : None.
               
 Restrictions: Value must be a scalar string
               
 Side effects: If the input string is longer than the desired
		width, it is returned without truncation
               
 Category    : Utilities, Strings
               
 Prev. Hist. : None.

 Written     : Stein Vidar Hagfors Haugan, 27 September 1993
               
 Modified    : Corrected typo which stopped /after working.  CDP, 28-Sep-94
               Increased possible length used.  CDP, 22-Dec-94
               Handle arrays of strings.  CDP, 16-Mar-95
               Add FILL keyword and stop overwriting input. CDP, 30-Apr-95

 Version     : Version 5, 30-Apr-95
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : SUM_COL()
               
 Purpose     : Sums along the columns of a matrix.
               
 Explanation : Sums along the columns of a matrix.
               
 Use         : col = sum_col(array)
    
 Inputs      : array  -  the array to be column-summed
               
 Opt. Inputs : None
               
 Outputs     : None
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : None

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, arrays
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 4-Jan-94
               
 Modified    : 

 Version     : Version 1, 4-Jan-94
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : SUM_ROW()
               
 Purpose     : Sums along the rows of a matrix.
               
 Explanation : Sums along the rows of a matrix.
               
 Use         : row = sum_row(array)
    
 Inputs      : array  -  the array to be row-summed
               
 Opt. Inputs : None
               
 Outputs     : None
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : None

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, arrays
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 4-Jan-94
               
 Modified    : 

 Version     : Version 1, 4-Jan-94
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : SUN_POS
               
 Purpose     : Calculate solar ephemeris parameters.
               
 Explanation : Allows for planetary and lunar perturbations in the calculation
               of solar longitude at date and various other solar positional
               parameters.
               
 Use         : IDL> sun_pos, date, longitude, ra, dec, app_long, obliq
    
 Inputs      : date - fractional number of days since JD 2415020.0 
               
 Opt. Inputs : None
               
 Outputs     : longitude  -  Longitude of sun for mean equinox of date (degs)
               ra         -  Apparent RA for true equinox of date (degs)
               dec        -  Apparent declination for true equinox of date (degs)
               app_long   -  Apparent longitude (degs)
               obliq      -  True obliquity (degs)
               
 Opt. Outputs: All above
               
 Keywords    : None

 Calls       : None

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, coords
               
 Prev. Hist. : From Fortran routine by B Emerson (RGO).

 Written     : CDS/IDL version by C D Pike, RAL, 17-May-94
               
 Modified    : 

 Version     : Version 1, 17-May-94
;-
;+
 Project     : SOHO - CDS

 Name        : SUNVIEW

 Purpose     : Switch to SunView mode.

 Explanation : SETPLOT is called to save and set the system variables.

 Use         : SUNVIEW

 Inputs      : None.

 Opt. Inputs : None.

 Outputs     : A message is printed to the screen.

 Opt. Outputs: None.

 Keywords    : None.

 Calls       : SETPLOT

 Common      : None.  But calls SETPLOT, which uses common block PLOTFILE.

 Restrictions: It is best if the routines TEK, REGIS, etc. (i.e.  those
		routines that use SETPLOT) are used to change the plotting
		device.

		In general, the SERTS graphics devices routines use the special
		system variables !BCOLOR and !ASPECT.  These system variables
		are defined in the procedure DEVICELIB.  It is suggested that
		the command DEVICELIB be placed in the user's IDL_STARTUP file.

 Side effects: If not the first time this routine is called, then system
		variables that affect plotting are reset to previous values.

 Category    : Utilities, Devices.

 Prev. Hist. : William Thompson

 Written     : William Thompson, GSFC.

 Modified    : Version 1, William Thompson, GSFC, 27 April 1993.
			Incorporated into CDS library.
		Version 2, William Thompson, GSFC, 21 October 1993.
			Renamed to SUNVIEW.

 Version     : Version 2, 21 October 1993.
;-
;+
 PROJECT     : SOHO - CDS

 NAME:
	SXADDPAR
 PURPOSE:
	Add or modify a parameter in a FITS or STSDAS header array.

 CALLING SEQUENCE:
	sxaddpar, Header, Name, Value, [ Comment,  Location,
				BEFORE =, AFTER = , FORMAT= ]

 INPUTS:
	Header = String array containing FITS or STSDAS header.    The
		length of each element must be 80 characters.    If not 
		defined, then SXADDPAR will create an empty FITS header array.

	Name = Name of parameter. If Name is already in the header the value 
		and possibly comment fields are modified.  Otherwise a new 
		record is added to the header.  If name = 'HISTORY' then the 
		value will be added to the record without replacement.  In 
		this case the comment parameter is ignored.

	Value = Value for parameter.  The value expression must be of the 
		correct type, e.g. integer, floating or string.  String values
		 of 'T' or 'F' are considered logical values.

 OPTIONAL INPUT PARAMETERS:
	Comment = String field.  The '/' is added by this routine.  Added 
		starting in position 31.    If not supplied, or set equal to 
		'', then the previous comment field is retained (when found) 

	Location = Keyword string name.  The parameter will be placed before the
		location of this keyword.    This parameter is identical to
		the BEFORE keyword and is kept only for consistency with
		earlier versions of SXADDPAR.

 OPTIONAL INPUT KEYWORD PARAMETERS:
	BEFORE	= Keyword string name.  The parameter will be placed before the
		location of this keyword.  For example, if BEFORE='HISTORY'
		then the parameter will be placed before the first history
		location.  This applies only when adding a new keyword;
		keywords already in the header are kept in the same position.

	AFTER	= Same as BEFORE, but the parameter will be placed after the
		location of this keyword.  This keyword takes precedence over
		BEFORE.

	FORMAT	= Specifies FORTRAN-like format for parameter, e.g. "F7.3".  A
		scalar string should be used.  For complex numbers the format
		should be defined so that it can be applied separately to the
		real and imaginary parts.

 OUTPUTS:
	Header = updated FITS header array.

 RESTRICTIONS:
	Warning -- Parameters and names are not checked
		against valid FITS parameter names, values and types.

 MODIFICATION HISTORY:
	DMS, RSI, July, 1983.
	D. Lindler Oct. 86  Added longer string value capability
	Converted to NEWIDL  D. Lindler April 90
	Added Format keyword, J. Isensee, July, 1990
	Added keywords BEFORE and AFTER. K. Venkatakrishna, May '92
	Pad string values to at least 8 characters   W. Landsman  April 94

       Version 1, Liyun Wang, GSFC/ARC, September 19, 1994
          Incoporated into CDS library.

 Version     :
       Version 1, September 19, 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	SXDELPAR()
 Purpose     : 
	Procedure to delete keyword parameter(s) from FITS header.
 Explanation : 
	Procedure to delete a keyword parameter(s) from a FITS header
 Use         : 
	sxdelpar,h,parname

	Delete the old-style astrometry keywords CDn_n from a FITS header, h

		sxdelpar,h,['CD1_1','CD1_2','CD2_1','CD2_2']

 Inputs      : 
	h - FITS header, string array
	parname - string or string array of keyword name(s) to delete
 Opt. Inputs : 
	None.
 Outputs     : 
	h -updated header
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
   (1)  Nothing happens if the keyword to be deleted is not found (no message)
   (2)  All appearances of a keyword in the header will be deleted
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	version 1  D. Lindler Feb. 1987
	Converted to new IDL  April 1990 by D. Lindler
 Written     : 
	Don Lindler, GSFC/HRS, Feb. 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 April 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	SXPAR()
 Purpose     : 
	Obtain the value of a parameter in a FITS header
 Explanation : 
	The first 8 chacters of each element of Hdr are searched for a 
	match to Name.  The value from the last 20 characters is returned.  
	An error occurs if there is no parameter with the given name.

	If a numeric value has no decimal point it is returned as type
	LONG.   If it contains more than 8 numerals, or contains the 
	character 'D', then it is returned as type DOUBLE.  Otherwise
	it is returned as type FLOAT
 Use         : 
	Result = SXPAR( hdr, name,[ abort, COUNT= ])   

	Given a FITS header, h, return the values of all the NAXISi values into
	a vector.  Then place the history records into a string vector.

	IDL> naxisi = sxpar( h ,'NAXIS*')         ; Extract NAXISi value
	IDL> history = sxpar( h, 'HISTORY' )      ; Extract HISTORY records

 Inputs      : 
	Hdr	= FITS header array, (e.g. as returned by SXOPEN or READFITS)
		  string array, each element should have a length of 80
		  characters
	Name	= String name of the parameter to return.  If Name is of the
		  form 'keyword*' then an array is returned containing values
		  of keywordN where N is an integer.  The value of keywordN
		  will be placed in RESULT(N-1).  The data type of RESULT will
		  be the type of the first valid match of keywordN found.
 Opt. Inputs : 
	ABORT	= string specifying that SXPAR should do a RETALL if a
		  parameter is not found.  ABORT should contain a string to be
		  printed if the keyword parameter is not found.  If not
		  supplied SXPAR will return with a negative !err if a keyword
		  is not found.
 Outputs     : 
	Function value = value of parameter in header.

	If parameter is double precision, floating, long or string, the result
	is of that type.  Apostrophes are stripped from strings.  If the
	parameter is logical, 1 is returned for T, and 0 is returned for F.  If
	Name was of form 'keyword*' then a vector of values are returned.

 Opt. Outputs: 
	None.
 Keywords    : 
	COUNT	= Optional keyword to return a value equal to the number of 
		  parameters found by sxpar, integer scalar
 Calls       : 
	STRNUMBER
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	Keyword COUNT returns the number of parameters found.  !err is set to
	-1 if parameter not found, 0 for a scalar value returned.  If a vector
	is returned it is set to the number of keyword matches found.

	If a keyword occurs more than once in a header, a warning is given,
	and the first occurence is used.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	DMS, May, 1983, Written.
	D. Lindler Jan 90 added ABORT input parameter
	J. Isensee Jul,90 added COUNT keyword
	W. Thompson, Feb. 1992, added support for FITS complex values.
	W. Thompson, May 1992, corrected problem with HISTORY/COMMENT/blank
		keywords, and complex value error correction.
 Written     : 
	David M. Stern, RSI, May 1983.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 17 April 1995.
		Incorporated following changes by Wayne Landsman

	W. Landsman, November 1994, fix case where NAME is an empty string 
	W. Landsman, March 1995,  Added COMMENT keyword, ability to read
		values longer than 20 character

 Version     : 
	Version 1, 12 April 1993.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : TAG_EXIST()
               
 Purpose     : To test whether a tag name exists in a structure.
               
 Explanation : Routine obtains a list of tagnames and tests whether the
               requested one exists or not. The search is recursive so 
               if any tag names in the structure are themselves structures
               the search drops down to that level.
               
 Use         : IDL>  status = tag_exist(str, tag)
    
 Inputs      : str  -  structure variable to search
               tag  -  tag name to search for
               
 Opt. Inputs : None
               
 Outputs     : Function returns 1 if tag name exists or 0 if it does not.
               
 Opt. Outputs: None
               
 Keywords    : INDEX = index of matching tag

 Calls       : None

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, structure
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 18-May-94
               
 Modified    : Version 1.1, D Zarro, ARC/GSFC, 27-Jan-95
               Passed out index of matching tag

 Version     : Version 1.1, 27-Jan-95
;-
;+
 Project     :	SOHO - CDS

 Name        :	TAI2UTC()

 Purpose     :	Converts TAI time in seconds to UTC calendar time.

 Explanation :	This procedure takes the Atomic International Time (TAI)
		calculated from the 6 byte (local) on-board time from the
		spacecraft and converts it into UTC calendar time in one of the
		CDS standard formats -- for acceptable formats see file 
               aaareadme.txt.

 Use         :	Result = TAI2UTC( TAI )
		Result = TAI2UTC( TAI, /EXTERNAL )
		Result = TAI2UTC( TAI, /CCSDS )
		Result = TAI2UTC( TAI, /ECS )

 Inputs      :	TAI	= The time in seconds from midnight, 1 January 1958.
			  This should be a double precision array.  Any
			  necessary calibrations should be applied before
			  calling this routine.

 Opt. Inputs :	None.

 Outputs     :	The result of the function will be the UTC calendar time in one
		of several formats, depending on the keywords passed.

			Internal:  A structure containing the tags:

				MJD:	The Modified Julian Day number.
				TIME:	The time of day, in milliseconds since
					the beginning of the day.

				   Both are long integers.  This is the default
				   format.

			External:  A structure containing the integer tags
				   YEAR, MONTH, DAY, HOUR, MINUTE, SECOND, and
				   MILLISECOND.

			CCSDS:	   An ASCII string containing the UTC time to
				   millisecond accuracy in the format
				   recommended by the Consultative Committee
				   for Space Data Systems (ISO 8601), e.g.

					"1988-01-18T17:20:43.123Z"

			ECS:	   Similar to CCSDS, except that the date has
				   the format:

					"1988/01/18 17:20:43.123"

			VMS:	   The date and time has the format

					"18-JAN-1988 17:20:43.123"

			STIME:	   The date and time has the format

					"18-JAN-1988 17:20:43.12"

				   See UTC2STR for more information.

 Opt. Outputs:	None.

 Keywords    :	EXTERNAL = If set, then the output is in external format, as
			   explained above.

		CCSDS	 = If set, then the output is in CCSDS format, as
			   explained above.

		ECS	 = If set, then the output is in ECS format, as
			   explained above.

		VMS	 = If set, then the output will be in VMS format, as
			   described above.

		STIME	 = If set, then the output will be in STIME format, as
			   described above.

		The following keywords are only valid if one of the string
		formats is selected.

		TRUNCATE  = If set, then the time will be truncated to 1 second
			    accuracy.  Note that this is not the same thing as
			    rounding off to the nearest second, but is a
			    rounding down.

		DATE_ONLY = If set, then only the date part of the string is
			    returned.

		TIME_ONLY = If set, then only the time part of the string is
			    returned.

		UPPERCASE = If set, then the month field in either the VMS or
			    STIME format is returned as uppercase.

		The following keyword is always valid.

		ERRMSG	 = If defined and passed, then any error messages 
			   will be returned to the user in this parameter 
			   rather than being handled by the IDL MESSAGE 
			   utility.  If no errors are encountered, then a null 
			   string is returned.  In order to use this feature, 
			   the string ERRMSG must be defined first, e.g.,

				ERRMSG = ''
				RESULT = TAI2UTC( TAI, ERRMSG=ERRMSG )
				IF ERRMSG NE '' THEN ...

 Calls       :	DATATYPE, GET_LEAP_SEC, INT2UTC

 Common      :	None.

 Restrictions:	Not valid for dates before 1 January 1972.

		This procedure requires a file containing the dates of all leap
		second insertions starting with 31 December 1971.  This file
		must have the name 'leap_seconds.dat', and must be in the
		directory given by the environment variable TIME_CONV.  It must
		be properly updated as new leap seconds are announced.

 Side effects:	The result of an array with a single element may be a scalar.
               If an error has been encountered and the ERRMSG keyword has
		been set, TAI2UTC returns an integer value of -1.

 Category    :	Utilities, Time.

 Prev. Hist. :	None.  However, the concept of "internal" and "external" time
		is based in part on the Yohkoh software by M. Morrison and G.
		Linford, LPARL.

 Written     :	William Thompson, GSFC, 12 September 1993.

 Modified    :	Version 1, William Thompson, GSFC, 21 September 1993.
		Version 2, William Thompson, GSFC, 14 November 1994
			Changed .DAY to .MJD
		Version 3, William Thompson, GSFC, 20 December 1994
			Added keywords TRUNCATE, DATE_ONLY, TIME_ONLY
		Version 4, Donald G. Luttermoser, GSFC/ARC, 28 December 1994
			Added the keyword ERRMSG.
		Version 5, William Thompson, GSFC, 25 January 1995
			Changed to call intrinsic ROUND instead of NINT.  The
			version of NINT in the Astronomy User's Library doesn't
			automatically select between short and long integers as
			the CDS version does.
		Version 6, Donald G. Luttermoser, GSFC/ARC, 30 January 1995
			Added ERRMSG keyword to internally called procedures.
			Made error handling procedure more robust.  Note
			that this routine can handle both scalars and vectors
			as input.
		Version 7, William Thompson, GSFC, 14 March 1995
			Added keywords VMS, STIME, UPPERCASE

 Version     :	Version 7, 14 March 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	TAPRD

 Purpose     :	Emulates VMS TAPRD procedure on UNIX machines.

 Explanation :	Emulates VMS TAPRD procedure on UNIX machines.  However, the
		actions of this routine may differ from the VMS equivalent in
		nonstandard situations.

		*** Unix only ***

 Use         :	TAPRD, ARRAY, UNIT  [, BYTE_REVERSE ]

 Inputs      :	ARRAY	= Variable into which the data should be read.  The
			  datatype and number of values to attempt to read is
			  based on this array.

		UNIT	= Specifies the magnetic tape unit.  Not to be confused
			  with logical unit numbers.  In UNIX, the number
			  refers to one of the environment variables MT0, MT1,
			  etc., which translate into a physical device name,
			  e.g.

					setenv MT0 /dev/nrst0

 Opt. Inputs :	BYTE_REVERSE = If present, then even and odd bytes are swapped.

 Outputs     :	The output is read into ARRAY. Also, !ERR is set to the number
		of bytes actually read.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	CHECK_TAPE_DRV

 Common      :	None.

 Restrictions:	This routine may not have all the abilities of the VMS
		equivalent, particularly in regards to the !ERR system
		variable.

		The environment variable "MTn", where n corresponds to the
		variable UNIT, must be defined.  E.g.,

			setenv MT0 /dev/nrst0

		Requires IDL v3.1 or later.

 Side effects:	The device file is opened.

 Category    :	Utilities, I/O, Tape.

 Prev. Hist. :	William Thompson, GSFC, June 1991.

 Written     :	William Thompson, GSFC, June 1991.

 Modified    :	Version 1, William Thompson, GSFC, 21 December 1993.
			Rewrote to use READU with TRANSFER_COUNT keyword.
		Version 2, William Thompson, GSFC, 22 December 1993.
			Added check of ARRAY variable.

 Version     :	Version 2, 22 December 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	TAPWRT

 Purpose     :	Emulates VMS TAPWRT procedure on UNIX machines.

 Explanation :	Emulates VMS TAPWRT procedure on UNIX machines.

		*** Unix only ***

 Use         :	TAPWRT, ARRAY, UNIT  [, BYTE_REVERSE ]

 Inputs      :	ARRAY	= Variable into which the data should be read.
		UNIT	= Specifies the magnetic tape unit.  Not to be confused
			  with logical unit numbers.  In UNIX, the number
			  refers to one of the environment variables MT0, MT1,
			  etc., which translate into a physical device name,
			  e.g.

					setenv MT0 /dev/nrst0

 Opt. Inputs :	BYTE_REVERSE = If present, then even and odd bytes are swapped.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	CHECK_TAPE_DRV

 Common      :	None.

 Restrictions:	The environment variable "MTn", where n corresponds to the
		variable UNIT, must be defined.  E.g.,

			setenv MT0 /dev/nrst0

		Requires IDL v3.1 or later.

 Side effects:	The device file is opened.

 Category    :	Utilities, I/O, Tape.

 Prev. Hist. :	William Thompson, GSFC, June 1991.

 Written     :	William Thompson, GSFC, June 1991.

 Modified    :	Version 1, William Thompson, GSFC, 21 December 1993.
			Rewrote to use WRITEU.

 Version     :	Version 1, 21 December 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : TEK

 Purpose     : Sets graphics device to Tektronix 4010 mode.

 Explanation : SETPLOT is called to save and set the system variables.

 Use         : TEK

 Inputs      : None.

 Opt. Inputs : None.

 Outputs     : A message is printed to the screen.

 Opt. Outputs: None.

 Keywords    : None.

 Calls       : SETPLOT

 Common      : None.  But calls SETPLOT, which uses common block PLOTFILE.

 Restrictions: It is best if the routines TEK, REGIS, etc. (i.e.  those
		routines that use SETPLOT) are used to change the plotting
		device.

		In general, the SERTS graphics devices routines use the special
		system variables !BCOLOR and !ASPECT.  These system variables
		are defined in the procedure DEVICELIB.  It is suggested that
		the command DEVICELIB be placed in the user's IDL_STARTUP file.

 Side effects: If not the first time this routine is called, then system
		variables that affect plotting are reset to previous values.

 Category    : Utilities, Devices.

 Prev. Hist. : W.T.T., Nov. 1987.

 Written     : William Thompson, GSFC, November 1987.

 Modified    : Version 1, William Thompson, 27 April 1993.
			Renamed to TEK, and incorporated into CDS library.

 Version     : Version 1, 27 April 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : TEK4105

 Purpose     : Sets the graphics device for Tektronix 4105 terminals.

 Explanation : SETPLOT is called to save and set the system variables.  Then
		DEVICE is called to enable TEK4100 mode with 8 colors.

 Use         : TEK4105

 Inputs      : None.

 Opt. Inputs : None.

 Outputs     : A message is printed to the screen.

 Opt. Outputs: None.

 Keywords    : None.

 Calls       : SETPLOT

 Common      : None.  But calls SETPLOT, which uses common block PLOTFILE.

 Restrictions: It is best if the routines TEK, REGIS, etc. (i.e.  those
		routines that use SETPLOT) are used to change the plotting
		device.

		In general, the SERTS graphics devices routines use the special
		system variables !BCOLOR and !ASPECT.  These system variables
		are defined in the procedure DEVICELIB.  It is suggested that
		the command DEVICELIB be placed in the user's IDL_STARTUP file.

 Side effects: If not the first time this routine is called, then system
		variables that affect plotting are reset to previous values.

 Category    : Utilities, Devices.

 Prev. Hist. : W.T.T., Nov. 1987.
		W.T.T., Mar. 1991, split TEK into TEK4105 and TEK4211.

 Written     : William Thompson, GSFC, November 1987.

 Modified    : Version 1, William Thompson, GSFC, 27 April 1993.
			Incorporated into CDS library.

 Version     : Version 1, 27 April 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : TEK4211

 Purpose     : Sets graphics device for Tektronix 4211 color terminal.

 Explanation : SETPLOT is called to save and set the system variables.  Then
		DEVICE is called to enable TEK4100 mode with 64 colors.

 Use         : TEK4211

 Inputs      : None.

 Opt. Inputs : None.

 Outputs     : A message is printed to the screen.

 Opt. Outputs: None.

 Keywords    : None.

 Calls       : SETPLOT

 Common      : None.  But calls SETPLOT, which uses common block PLOTFILE.

 Restrictions: It is best if the routines TEK, REGIS, etc. (i.e.  those
		routines that use SETPLOT) are used to change the plotting
		device.

		In general, the SERTS graphics devices routines use the special
		system variables !BCOLOR and !ASPECT.  These system variables
		are defined in the procedure DEVICELIB.  It is suggested that
		the command DEVICELIB be placed in the user's IDL_STARTUP file.

 Side effects: If not the first time this routine is called, then system
		variables that affect plotting are reset to previous values.

 Category    : Utilities, Device.

 Prev. Hist. : W.T.T., Nov. 1987.
		W.T.T., Mar. 1991, split TEK into TEK4105 and TEK4211.

 Written     : William Thompson, GSFC, November 1987.

 Modified    : Version 1, William Thompson, GSFC, 27 April 1993.
			Incorporated into CDS library.

 Version     : Version 1, 27 April 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : TEKMONO

 Purpose     : Sets graphics device for Tek 4100+ terminals, mono mode.

 Explanation : SETPLOT is called to save and set the system variables.  Then
		DEVICE is called to enable TEK4100 mode with 2 colors (black
		and white).

 Use         : TEKMONO

 Inputs      : None.

 Opt. Inputs : None.

 Outputs     : A message is printed to the screen.

 Opt. Outputs: None.

 Keywords    : None.

 Calls       : SETPLOT

 Common      : None.  But calls SETPLOT, which uses common block PLOTFILE.

 Restrictions: It is best if the routines TEK, REGIS, etc. (i.e.  those
		routines that use SETPLOT) are used to change the plotting
		device.

		In general, the SERTS graphics devices routines use the special
		system variables !BCOLOR and !ASPECT.  These system variables
		are defined in the procedure DEVICELIB.  It is suggested that
		the command DEVICELIB be placed in the user's IDL_STARTUP file.

 Side effects: If not the first time this routine is called, then system
		variables that affect plotting are reset to previous values.

 Category    : Utilities, Devices.

 Prev. Hist. : W.T.T., Nov. 1987.
		W.T.T., Mar. 1991, split TEK into TEKMONO and TEK4211.

 Written     : William Thompson, GSFC, November 1987.

 Modified    : Version 1, William Thompson, GSFC, 27 April 1993.
			Incorporated into CDS library.

 Version     : Version 1, 27 April 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : TEST_OPEN

 Purpose     : Test open a file to determine existence and/or write access

 Explanation :
       Uses OPENR or OPENW (if /WRITE is set) to return status of
       input file. If input file is not given, then TEST_OPEN will
       test if the current directory is writeable.
 Use         : 
	OK=TEST_OPEN(FILE)             ;test for existence
	OK=TEST_OPEN(FILE,/WRITE)      ;test for write access
 Inputs      : 
	FILE  = file to test
 Opt. Inputs : 
	NAME = String containing the name of the procedure.
 Outputs     : 
	OK   = logical 1 for existence and readable
                   or 0 for nonexistent and/or not writeable (if /WRITE)
 Opt. Outputs: 
	None.
 Keywords    : 
       WRITE = If set, then test for write access.
       QUIET = set to keep quiet
 Calls       : 
	None
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	None.
 Category    : 
	Utilities, Operating_system.
 Written     : 
	Dominic Zarro, GSFC, 1993.
 Version     : 
	Version 1, 1 August 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	TEXTCLOSE                   
 Purpose     :	
	Closes file specified by !TEXTOUT.  Used by ASTRON routines.
 Explanation :	
	Procedure to close file for text output as specifed
	by the (non-standard) system variable !TEXTOUT. 

 Use         :	
	textclose, [ TEXTOUT = ]

 Inputs      :	None.

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	
	textout - Indicates output device that was used by
		TEXTOPEN

 Calls       :	None.

 Common      :	None.

 Restrictions:	None.

 Side effects:	
	if !textout is not equal to 5 and the textunit is
	opened.   Then unit !textunit is closed and released

 Category    :	Utilities, User_interface

 Prev. Hist. :	
	D. Lindler  Dec. 1986  (Replaces PRTOPEN)
	Test if TEXTOUT is a scalar string   W. Landsman   August 1993

 Written     :	D. Lindler, GSFC/HRS, December 1986

 Modified    :	Version 1, William Thompson, GSFC, 30 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 30 March 1994
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	TEXTOPEN
 Purpose     :	
	Opens file for text output.
 Explanation :	
	Procedure to open file for text output.   The type of output 
	device (disk file or terminal screen) is specified by the 
	TEXTOUT keyword or the (nonstandard) system variable !TEXTOUT.

 Use         :	
	textopen, program, [ TEXTOUT = ]

 Inputs      :	
	program - scalar string giving name of program calling textopen

 Opt. Inputs :	None.

 Outputs     :	
	The following dev/file is opened for output.

		textout=0 	Nowhere
		textout=1	TERMINAL using /more option
		textout=2	TERMINAL without /more option
		textout=3	<program>.prt
		textout=4	laser.tmp
		textout=5      user must open file
		textout = filename (default extension of .prt)

	The unit it is opened to is obtained with the procedure GET_LUN
	unless !TEXTOUT=5.  The unit number is placed in system variable 
	!TEXTUNIT.  For !TEXTOUT=5 the user must set !TEXTUNIT to the 
	appropriate unit number.

 Opt. Outputs:	None.

 Keywords    :	
	TEXTOUT - Integer scalar (0-6) specifying output file/device to be 
		opened (see below) or scalar string giving name of output file.
		If TEXTOUT is not supplied, then the (non-standard) system 
		variable !TEXTOUT is used.

 Calls       :	None.

 Common      :	None.

 Restrictions:	
	Uses the following non-standard system variables:

		DEFSYSV,'!TEXTOUT',1
		DEFSYSV,'!TEXTUNIT',0

 Side effects:	
	Note that TEXTOUT = 1 or TEXTOUT = 2 will open a unit to the terminal,
	SYS$OUTPUT (VMS) or /dev/tty (Unix).     However, this terminal 
	output will *not* appear in an IDL JOURNAL session, unlike text
	printed with the PRINT command.	

 Category    :	Utilities, User_interface.

 Prev. Hist. :	
	D. Lindler  Dec. 1986  
	Keyword textout added, J. Isensee, July, 1990
	Made transportable, D. Neill, April, 1991
	Trim input PROGRAM string W. Landsman  Feb 1993
	Don't modify TEXTOUT value   W. Landsman   Aug 1993

 Written     :	D. Lindler, GSFC/HRS, December 1986

 Modified    :	Version 1, William Thompson, GSFC, 30 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 30 March 1994
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : TFTD
               
 Purpose     : Search for a string in header documentation.
               
 Explanation : From a previously created and saved list of one-liners
               from the IDL userlib and CDS trees the routine selects 
               up to 50 at random and prints them.  This routine is run at 
               IDL startup as part of a user-education drive.
               
 Use         : IDL> tftd [,'search_string', lines=lines, /prog, cat=cat]
    
 Inputs      : None 
               
 Opt. Inputs : search_string  -  if given only routine names or one-line
                                 documentation containing that string will
                                 be presented. If present, all matches are
                                 output and the LINES keyword is ignored.

                                 The default search is effectively wild-carded
                                 to search for '*string*'.  If however a
                                 wildcard is used explicitly at the end of
                                 the search string, eg 'FITS*' then only those
                                 entries beginning with the supplied
                                 characters will be located. The /NAME
                                 keyword is then redundant.

               
 Outputs     : Listing to screen or printer
               
 Opt. Outputs: None
               
 Keywords    : lines - specifies the number of one-liners to output
                       (limit of 50 is imposed)

               prog  - use programmer routines only

               cat   - if specified, only routines having the supplied
                       string in the CATEGORY header section will be
                       listed.  If cat has the value '?' then a list
                       of possible categories is printed.

               name  - if set, search is conducted within the name only
                       of the program - not the explanation.

 Calls       : None

 Common      : None
               
 Restrictions: Only userlib and CDS trees used at the moment.
               
 Side effects: User awareness increased. Authors of routines with 
               non-standard documentation embarrassed (hopefully).
               
 Category    : Doc, help
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 5-May-94
               
 Modified    : Look for save file in CDS_INFO, CDP, 20-May-1994
               Add prog keyword.  CDP, 13-Jun-94
               Make LINES a keyword and string search the only parameter.
                                  CDP, 14-Sep-94
               To include category option.  CDP, 20-Sep-94
               Added /NAME keyword and explicit wildcard.  CDP, 14-Feb-95

 Version     : Version 6, 14-Feb-95
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : TICK_VEC
               
 Purpose     : Generate tickmarks for tight displays.
               
 Explanation : Up to a specified number of equidistant tickmarks are returned.
               
 Use         : TICVEC = TICK_VEC(MAXN,MIN,MAX)
    
 Inputs      : MAXN : The maximum number of tick marks allowed.
               MIN  : The minimum value on the axis
		MAX  : The maximum value on the axis
 Opt. Inputs : None.
               
 Outputs     : Returns a vector in the interval [ MIN, MAX ], with up to MAXN entries.
               
 Opt. Outputs: None.
               
 Keywords    : None.

 Calls       : None.

 Common      : None.
               
 Restrictions: None.
               
 Side effects: None.
               
 Category    : Utilities, Graphics
               
 Prev. Hist. : None.

 Written     : Stein Vidar Haugan, June 1994
               
 Modified    : Never.

 Version     : 1, 9 June 1994
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : TIME_AVERAGE()
               
 Purpose     : To form a time average of a set of time series data.
               
 Explanation : Given a time series of data (ie a set of data values and 
               associated time values) the function returns an array of data
               values which are the averages within a user-defined time range.
               The time range to use is specified via a key word.  A time
               array is also returned and this gives the mean of the first
               and last time of data used within the associated time bin.
               
 Use         : out = time_average(time, data [,one-of-the-keywords, $
                                                 top=top,bottom=bottom]
    
 Inputs      : time  -  an structure array of time values in standard CDS 
                        UTC format.
               data  -  the associated data values
               
 Opt. Inputs : None
               
 Outputs     : Function returns a structure array containing a day/time
               structure and an averaged data value.  The make up of the 
               output is 
               out = {{mjd:0L,time:0L}, data:0.0d0}

               On return it is therefore easy to plot the time averaged
               values thus:

               IDL> utplot,out.date,out.data

 Opt. Outputs: None
               
 Keywords    : DAY    -  if specified, the time averaging period is taken as 
                         00:00 on the day of the first datum to day*24 hours 
                         later.

               HOUR   -  if specified, the time averaging period is taken as 
                         nn hours starting at the beginning of the hour of the
                         first datum.

               MINUTE - if specified, the time averaging period is taken as 
                        nn minutes starting at the beginning of the minute of
                        the first datum.

               SECOND - if specified, the time averaging period is taken as 
                        nn seconds.

               TOP    - if present will be returned with an array giving the
                        maximum datum found in each averaged time interval

               BOTTOM - if present will be returned with an array giving the
                        minimum datum found in each averaged time interval

   
 Calls       : None

 Common      : None
               
 Restrictions: Only one of the DAY/HOUR/MINUTE/SECOND keywords must be set.
               
 Side effects: None
               
 Category    : Util, numerical
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 23-Jan-95
               
 Modified    : 

 Version     : Version 1, 23-Jan-95
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : TLB_PLACE()
               
 Purpose     : Find the "optimal" coordinates of a new top level base
               
 Explanation : Given the (approximate) size of a new widget, and either
		a widget EVENT or a SERTS window descriptor, the "best"
		upper-left position of a new widget base is returned.

		The position is either above, right, below or to the 
		left of the calling DRAW-window, the SERTS display window,
		or the window's top level base. To force the position
		outside the top level base, use /OUTSIDE. To align the
		new window with the position of the cursor (only for
		DRAW EVENTS) use /CURSOR.
               
 Use         : POS = TLB_PLACE(XSIZE,YSIZE,EVENT=EVENT)
		or
		POS = TLB_PLACE(XSIZE,YSIZE,SERTSW=SERTSW)
    
 Inputs      : XSIZE,
		YSIZE = The (approximate) size of the new widget

 Opt. Inputs : 
               
 Outputs     : 
               
 Opt. Outputs: 
               
 Keywords    : EVENT : For a WIDGET_DRAW event, the new position
			will be outside the DRAW window, /OUTSIDE is
			not set. If the EVENT.X/Y point is inside
			a SERTS display, the display CLIP coordinates 
			are taken as the area that shouldn't be marked.
			For any other event type, the new position 
			will be outside the EVENT.ID's top level base.

	       	PWINDOW: Specifies the plot window region to keep
			outside of.

		SERTSW : Specify the SERTS window that the new base
			should be placed outside of.

		CURSOR : Set to align the new window position with the
			cursor.

		OUTSIDE : Set to always place the new window outside the
			top level base area.

		PRIORITY: Specify the most-wanted positions in an
			array of integers, 0 means above, 1=right
			2=below, 3=left. That is, PRIORITY=[2,3] means
			"try to fit this in below, or if that's not
			possible, on the left".

 Calls       : CDSNOTIFY,FIND_SERTSW(),SETWINDOW,SET_SERTSW,TLB_PLACE()
		TRIM()

 Common      : None.
               
 Restrictions: Needs a valid EVENT or SERTS window.
               
 Side effects: None known.
               
 Category    : CDS, QL, DISPLAY, UTILITY
               
 Prev. Hist. : Extracted from the QLZOOM/QLPROFILE routines.

 Written     : Stein Vidar Hagfors Haugan, 16 Dec. 1993
               
 Modified    : 

 Version     : 1.0
;-
;+
 Project     : SOHO - CDS

 Name        : 
	TRIM()
 Purpose     : 
	Converts numbers to strings, without trailing zeros.
 Explanation : 
	Converts numbers into a string representation, and trims off leading
	and/or trailing blanks.  Differs from STRTRIM in that trailing zeros
	after the period are also trimmed off, unless NUMBER is already a
	string, or an explicit format is passed.
 Use         : 
	Result = TRIM( NUMBER  [, FORMAT ]  [, FLAG ] )
 Inputs      : 
	NUMBER	= Scaler variable or constant.  May be of any ordinary type,
		  including string.  However, structures are not allowed.
 Opt. Inputs : 
	FORMAT	- Format specification for STRING function.  Must be a string
		  variable, start with the "(" character, end with the ")"
		  character, and be a valid FORTRAN format specification.  If
		  NUMBER is complex, then FORMAT will be applied separately to
		  the real and imaginary parts.

	FLAG	- Flag passed to STRTRIM to control the type of trimming:

			FLAG = 0	Trim trailing blanks.
			FLAG = 1	Trim leading blanks.
			FLAG = 2	Trim both leading and trailing blanks.

		  The default value is 2.  If NUMBER is complex, then FORMAT
		  will be applied separately to the real and imaginary parts.

 Outputs     : 
	Function returns as a string variable representing the value NUMBER.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	NUMBER must not be an array.  NUMBER must not be a structure.
	FORMAT must be a valid format specification, and must not be passed
		if NUMBER is of type string.
	FLAG must not be of string type, or an array.
 Side effects: 
	None.
 Category    : 
	Utilities, Strings.
 Prev. Hist. : 
	William Thompson	Applied Research Corporation
	May, 1987		8201 Corporate Drive
				Landover, MD  20785

	William Thompson, Feb. 1992, added support for complex numbers, and
				     fixed Unix problem with lowercase "e".
 Written     : 
	William Thompson, GSFC, May 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 9 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 9 April 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	TVAXIS
 Purpose     : 
	Places X and/or Y axes on displayed images.
 Explanation : 
	Places X and/or Y axes on images displayed with the EXPTV or similar
	procedure.
 Inputs      : 
	None required.
 Opt. Inputs : 
	ARRAY	 = Image to draw axes on.
	MX, MY	 = The size of the image on the display screen.
	JX, JY	 = The position of the lower left-hand corner of the image on 
		   the display screen.

	If the optional parameters are not passed, then they are retrieved with
	GET_TV_SCALE.  It is anticipated that these optional parameters will
	only be used in extremely rare circumstances.

 Outputs     : 
	The values of MX, MY and JX, JY are printed to the terminal screen.
 Opt. Outputs: 
	None.
 Keywords    : 
	XAXIS	 = If 0 then X axis is drawn below image, if 1 then above.
		   Default is not to draw an X axis.
	YAXIS	 = If 0 then Y axis is drawn to the left, if 1 then right.
		   Default is not to draw a Y axis.

	ORIGIN	 = Two-element array containing the coordinate value in
		   physical units of the center of the first pixel in the
		   image.  Defaults to whatever was previously set, or [0,0] if
		   none.
	SCALE	 = Pixel scale in physical units.  Can have either one or two
		   elements.  Defaults to whatever was previously set, or [1,1]
		   if none.

	XRANGE	 = Array containing minimum and maximum values of X.  Default
		   is to use predefined scale, or pixel numbers if none.  It is
		   important to realize that the range refers to the edges of
		   the pixels, i.e. from the left edge of the leftmost pixel to
		   the right edge of the rightmost pixel.  The width of the
		   pixels in the data coordinates must be taken into account.
		   This is to maintain compatibility with the behavior of AXIS
		   when used with graphic plots.
	YRANGE	 = Array containing minimum and maximum values of Y.  Default
		   is to use predefined scale, or pixel numbers if none.  The
		   same comments for XRANGE also apply to YRANGE, except that
		   the range applies from the bottom of the bottommost pixel to
		   the top of the topmost pixel.

	Either ORIGIN,SCALE or XRANGE,YRANGE can be used, but not both.  If
	neither are used, then whatever scale was previously defined will be
	used.  If no scale has been defined, then pixel numbers will be used.

	XTITLE	 = X axis title.  Default is value of !XTITLE.
	YTITLE	 = Y	"	"	"	"	"
	TICKLEN	 = Length of tick marks.  Default is !TICKLEN.
	XTICKLEN = Length of X tick marks.  Overrides TICKLEN.
	YTICKLEN =	"    Y	"	"
	XTICKNAME= String array giving the annotation of each X tick.
	YTICKNAME=	"	"	"	"	"     Y	"
	XTICKS	 = Number of major X tick intervals to draw.
	YTICKS	 =	"	"  Y	"	"
	XTICKV	 = Array of values for each X tick mark.
	YTICKV	 = 	"	"	"   Y	"
	NOXLABEL = If set, then the X axis is not labelled.  Overridden by
		   XTITLE and  XTICKNAME keywords.
	NOYLABEL = If set, then the Y axis is not labelled.  Overridden by
		   YTITLE and  YTICKNAME keywords.
	XTYPE	 = Either 0 for linear, or 1 for logarithmic.
	YTYPE	 = Either 0 for linear, or 1 for logarithmic.
	COLOR	 = Color to use for drawing the axes.
	DISABLE  = If set, then TVSELECT not used.
	DATA	 = If set, then immediately activate the data coordinates for
		   the displayed image.
 Calls       : 
	GET_TV_SCALE, TVSELECT, TVUNSELECT
 Common      : 
	None.
 Restrictions: 
	It is important that the user select the graphics device/window, and
	image region before calling this routine.  For instance, if the image
	was displayed using EXPTV,/DISABLE, then this routine should also be
	called with the /DISABLE keyword.  If multiple images are displayed
	within the same window, then use SETIMAGE to select the image before
	calling this routine.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	The data coordinates associated with an image are changed by this
	routine.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., July 1991.
	William Thompson, May 1992, modified to use GET_TV_SCALE.
	William Thompson, Nov 1992, removed call to INIT_SC1_SC4.
 Written     : 
	William Thompson, GSFC, July 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 11 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 1 September 1993.
		Modified to keep track of image data coordinates.
	Version 3, William Thompson, GSFC, 19 October 1994
		Added XTYPE and YTYPE keywords.
	Version 4, William Thompson, GSFC, 20 March 1995
		Added ORIGIN and SCALE keywords.
 Version     : 
	Version 4, 20 March 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	TVBOX
 Purpose     : 
	Interactively select a box on displayed images.
 Explanation : 
	SELECT_BOX is called to select a box on a displayed image.
 Use         : 
	TVBOX,  [ X1, X2, Y1, Y2  [, PRINT_SWITCH ]]  [, IMAGE, MX, MY, IX, IY ]
 Inputs      : 
	None required.
 Opt. Inputs : 
	PRINT_SWITCH	= Switch used to control printing the values of
			  X1,X2,Y1,Y2 to the screen.  If not passed, then
			  assumed 0 (no printing) unless X1,X2 and Y1,Y2 are
			  not passed, in which case 1 (printing) is assumed.

	IMAGE		= The image to find positions on.
	MX, MY		= Size of displayed image.
	IX, IY		= Position of the lower left-hand corner of the image.

	If the last five optional parameters are not passed, then they are
	retrieved with GET_TV_SCALE.  It is anticipated that these optional
	parameters will only be used in extremely rare circumstances.

 Outputs     : 
	None required.  IF the output parameters are not passed, then their
	values are printed to the screen.
 Opt. Outputs: 
	X1,X2,Y1,Y2	= The X,Y positions of the corners of the selected box.
 Keywords    : 
	DISABLE    = If set, then TVSELECT not used.

	The following keywords are only relevant when used on a graphics device
	that supports windows:

	INIT	   = If this keyword is set, X1, X2, and Y1, Y2 contain the
		     initial parameters for the box.

	FIXED_SIZE = If this keyword is set, X1, X2, and Y1, Y2 describe the
		     initial size of the box.  This size may not be changed by
		     the user.

 Calls       : 
	GET_TV_SCALE, SELECT_BOX, TRIM, TVSELECT, TVUNSELECT
 Common      : 
	None.
 Restrictions: 
	It is important that the user select the graphics device/window, and
	image region before calling this routine.  For instance, if the image
	was displayed using EXPTV,/DISABLE, then this routine should also be
	called with the /DISABLE keyword.  If multiple images are displayed
	within the same window, then use SETIMAGE to select the image before
	calling this routine.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, Nov. 1992.
 Written     : 
	William Thompson, GSFC, November 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 11 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 25 June 1993.
		Added INIT and FIXED_SIZE keywords.
 Version     : 
	Version 2, 25 June 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	TVDEVICE
 Purpose     : 
	Defines the default image display device or window.
 Explanation : 
	Defines a given device and/or window as the default for image display.
	Once this routine is called, the routine TVSELECT selects the image
	display device/window, and TVUNSELECT returns to the previous
	device/window.
 Use         : 
	TVDEVICE, WINDOW
	TVDEVICE, DEVICE  [, WINDOW ]
 Inputs      : 
	DEVICE  = Character string containing the name of device to be used for
		  displaying images.
	WINDOW  = Index of window (i.e. 0, 1, 2, ...) to be used for displaying
		  images.  Must refer to an already existing window.
 Opt. Inputs : 
	None.
 Outputs     : 
	None, but various parameters in common block TV_WINDOW are modified.
 Opt. Outputs: 
	None.
 Keywords    : 
	ENABLE  = If set, then selecting the image display device via TVSELECT
		  and TVUNSELECT in enabled (default).
	DISABLE = If set, then selecting the image display device via TVSELECT
		  and TVUNSELECT is disabled.  DISABLE takes precedence over
		  ENABLE keyword.
 Calls       : 
	None.
 Common      : 
	TV_DEVICE contains various parameters used to communicate with the
	routines TVSELECT and TVUNSELECT.
 Restrictions: 
	Only works if TVDEVICE, TVSELECT and TVUNSELECT are used exclusively to
	change between the image display and graphics device/window.  Only
	existing windows can be used.  Device name must be passed as a
	character string, and window number must be passed as an integer.

	If only the window number is passed, then TVSELECT will only select
	this window if the current graphics device is a windowing device.

	If something goes wrong, the easiest way to clear it is to SET_PLOT
	and/or WSET to the desired graphics device/window, and then call
	TVDEVICE again.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, Feb. 1991.
 Written     : 
	William Thompson, GSFC, February 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 11 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 11 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	TVERASE
 Purpose     : 
	Erases image display screen.
 Explanation : 
	If TVDEVICE has been called then erases special image display device or
	window.  Otherwise erases current window.
 Use         : 
	TVERASE
 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	DISABLE  = If set, then TVSELECT not used.  Mainly included for
		   routines (such as EXPTV) which call TVERASE.
 Calls       : 
	TVSELECT, TVUNSELECT
 Common      : 
	None.
 Restrictions: 
	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, Feb., 1990.
	W.T.T., Feb. 1991, modified to use TVSELECT, TVUNSELECT.
 Written     : 
	William Thompson, GSFC, February 1990.
 Modified    : 
	Version 1, William Thompson, GSFC, 11 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 11 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	TVOUT
 Purpose     : 
	Outputs text onto images.
 Explanation : 
	The routine XYOUTS is used to display the string at the device position
	corresponding to the specified image pixel position.
 Use         : 
	TVOUT, XPOS, YPOS, STRING  [, ARRAY, MX, MY, IX, IY ]
 Inputs      : 
	XPOS	= X position of the string in pixels.
	YPOS	= Y position of the string in pixels.
	STRING	= Character string to be output to image.
 Opt. Inputs : 
	ARRAY	= Image array.
	MX, MY	= Size of displayed image.
	IX, IY	= Position of displayed image.

	If the optional parameters are not passed, then they are retrieved with
	GET_TV_SCALE.  It is anticipated that these optional parameters will
	only be used in extremely rare circumstances.

 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	ALIGNMENT= Alignment of the string as described in the IDL manual.
	CHARSIZE = Character size to use in displaying strings.  Normally 1.
	COLOR	 = Color to display text in.
	DISABLE  = If set, then TVSELECT not used.
	ORIENTATION = Text orientation in degrees.
 Calls       : 
	GET_TV_SCALE, TVSELECT, TVUNSELECT
 Common      : 
	None.
 Restrictions: 
	There must be enough space to display the string.

	It is important that the user select the graphics device/window, and
	image region before calling this routine.  For instance, if the image
	was displayed using EXPTV,/DISABLE, then this routine should also be
	called with the /DISABLE keyword.  If multiple images are displayed
	within the same window, then use SETIMAGE to select the image before
	calling this routine.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, April 1991.
	William Thompson, May 1992, modified to use GET_TV_SCALE.
	William Thompson, Nov 1992, modified algorithm for getting the relative
		character size.
 Written     : 
	William Thompson, GSFC, April 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 11 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 29 October 1993.
		Fixed bug with checking number of parameters.
 Version     : 
	Version 2, 29 October 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	TVPLT
 Purpose     : 
	Plots points on displayed images.
 Explanation : 
	The values MX, MY and IX, IY are used to convert the data coordinates
	XVAL, YVAL to screen coordinates.  Then OPLOT is used to plot the 
	points.
 Use         : 
	TVPLT, XVAL, YVAL  [, IMAGE, MX, MY, IX, IY ]
 Inputs      : 
	XVAL,YVAL = The X,Y positions of the points to plot.
 Opt. Inputs : 
	IMAGE	  = The image to plot over.
	MX, MY	  = Size of displayed image.
	IX, IY	  = Position of the lower left-hand corner of the image.

	If the optional parameters are not passed, then they are retrieved with
	GET_TV_SCALE.  It is anticipated that these optional parameters will
	only be used in extremely rare circumstances.

 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	DISABLE   = If set, then TVSELECT not used.
	PSYM	  = Plotting symbol.
	COLOR	  = Plotting color.
	THICK	  = Plotting thickness.
 Calls       : 
	GET_TV_SCALE, TVSELECT, TVUNSELECT
 Common      : 
	None.
 Restrictions: 
	It is important that the user select the graphics device/window, and
	image region before calling this routine.  For instance, if the image
	was displayed using EXPTV,/DISABLE, then this routine should also be
	called with the /DISABLE keyword.  If multiple images are displayed
	within the same window, then use SETIMAGE to select the image before
	calling this routine.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., Oct. 1987.
	W.T.T., Feb. 1991, modified to use TVSELECT, TVUNSELECT.
	William Thompson, May 1992, modified to use GET_TV_SCALE.
	William Thompson, Oct 1992, added THICK keyword.

 Written     : 
	William Thompson, GSFC, October 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 11 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 11 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	TVPOINTS
 Purpose     : 
	Selects a series of points from a displayed image.
 Explanation : 
	Uses the cursor to select a series of points from a displayed image.
	Called by such routines as TVPROF, POLY_VAL, etc.  The TV cursor is
	activated, and the user is prompted to enter in a series of points.
 Use         : 
	TVPOINTS, XVAL, YVAL, MX, MY, IX, IY
 Inputs      : 
	MX, MY	= Size of displayed image.
	SX, SY	= Actual size of image.
	IX, IY	= Position of the lower left-hand corner of the image.
 Opt. Inputs : 
	CLOSE_FLAG = If present, then last point is connected to first to form
		     a polygon.
 Outputs     : 
	XVAL,YVAL = The X,Y positions of the selected path.
 Opt. Outputs: 
	None.
 Keywords    : 
	DISABLE  = If set, then TVSELECT not used.
 Calls       : 
	TVSELECT, TVUNSELECT
 Common      : 
	None.
 Restrictions: 
	Since this routine works interactively with the cursor, the image 
	should be displayed on the TV screen.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	The selected path is drawn on the image display screen.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., Oct. 1987.
	W.T.T., Feb. 1991, modified to use TVSELECT, TVUNSELECT.
 Written     : 
	William Thompson, GSFC, October 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 11 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 30 November 1993.
		Added waits between calls to CURSOR to avoid spurious points.
 Version     : 
	Version 2, 30 November 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	TVPOS
 Purpose     : 
	Returns cursor positions on displayed images.
 Explanation : 
	The values MX, MY and IX, IY are used to convert screen coordinates to
	data coordinates.
 Use         : 
	TVPOS,  [ XVAL, YVAL  [, PRINT_SWITCH ]]  [, IMAGE [, MX, MY, IX, IY ]]

	TVPOS			;Prints position to screen
	TVPOS, X, Y		;Save positions in arrays
	TVPOS, X, Y, 1		;Both saves and prints

	TVPOS, IMAGE, /ZOOM		;Get position from zoomed image.
	TVPOS, X, Y, IMAGE, /ZOOM	;These three are variations on the
	TVPOS, X, Y, 1, IMAGE, /ZOOM	;	three examples shown above.

 Inputs      : 
	None required.
 Opt. Inputs : 
	PRINT_SWITCH	= Switch used to control printing the values of 
			  XVAL, YVAL to the screen.  If not passed,
			  then assumed 0 (no printing) unless XVAL and YVAL are
			  not passed, in which case 1 (printing) is assumed.

	IMAGE		= The image to find positions on.
	MX, MY		= Size of displayed image.
	IX, IY		= Position of the lower left-hand corner of the image.

	If the last five optional parameters are not passed, then they are
	retrieved with GET_TV_SCALE.  It is anticipated that these optional
	parameters will only be used in extremely rare circumstances.

 Outputs     : 
	None required.
 Opt. Outputs: 
	XVAL,YVAL	= The X,Y positions of the selected points.
 Keywords    : 
	DISABLE  = If set, then TVSELECT not used.

	ZOOM	 = If set, then retrieve the position from a zoomed version of
		   the image.  Can only be used if the IMAGE parameter was
		   passed.

	WAIT	 = An integer that specifies the conditions under 
		   which CURSOR returns. This parameter can be used 
		   interchangeably with the keyword parameters listed 
		   below that specify the type of wait. The default 
		   value is 1. The table below describes each type of 
		   wait
        
		NOTE: not all wait modes work with all display devices

		Value  Corresponding Keyword  Action
		------------------------------------------------
		0	NOWAIT		Return immediately
		1	WAIT		Return if button is down
		2	CHANGE		Return if a button is
					pressed, released, or the
					pointer is moved.
		3	DOWN		Return on button down
		4	UP		Return on button up


	    If the optional IMAGE parameter is passed, together with the ZOOM
	    keyword, then the following keyword parameters can be used to
	    adjust the scale of the temporary zoomed image:

	NOSCALE  = If set, then the image is not scaled.
	MISSING	 = Value flagging missing pixels.  These points are scaled to
		   zero.
	MAX	 = The maximum value of IMAGE to be considered in scaling the
		   image, as used by BYTSCL.  The default is the maximum value
		   of IMAGE.
	MIN	 = The minimum value of IMAGE to be considered in scaling the
		   image, as used by BYTSCL.  The default is the minimum value
		   of IMAGE.
	TOP	 = The maximum value of the scaled image array, as used by
		   BYTSCL.  The default is !D.N_COLORS-1.
	VELOCITY = If set, then the image is scaled using FORM_VEL as a
		   velocity image.  Can be used in conjunction with COMBINED
		   keyword.  Ignored if NOSCALE is set.
	COMBINED = Signals that the image is to be displayed in one of two
		   combined color tables.  Can be used by itself, or in
		   conjunction with the VELOCITY or LOWER keywords.
	LOWER	 = If set, then the image is placed in the lower part of the
		   color table, rather than the upper.  Used in conjunction
		   with COMBINED keyword.
 Calls       : 
	GET_TV_SCALE, TRIM, TVSELECT, TVUNSELECT
 Common      : 
	None.
 Restrictions: 
	It is important that the user select the graphics device/window, and
	image region before calling this routine.  For instance, if the image
	was displayed using EXPTV,/DISABLE, then this routine should also be
	called with the /DISABLE keyword.  If multiple images are displayed
	within the same window, then use SETIMAGE to select the image before
	calling this routine.

	Using TVPOS with the /ZOOM keyword causes the WAIT keyword to be
	ignored.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	Forces TVZOOM to use a new window for zoomed images.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., Oct. 1987.
	W.T.T., Feb. 1991, modified to use TVSELECT, TVUNSELECT.
	William Thompson, May 1992, modified to use GET_TV_SCALE.
	William Thompson, March 1993, added WAIT keyword.
 Written     : 
	William Thompson, GSFC, October 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 11 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 20 May 1993.
		Added ZOOM keyword.
 Version     : 
	Version 2, 20 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	TVPRINT
 Purpose     : 
	Sends the contents of a window to a PostScript printer.
 Explanation : 
	Reads the contents of a graphics window and creates and prints a
	PostScript file.  The routine TVREAD is called to read the window.  It
	is (optionally) converted to a grey scale, and EXPTV is used to write
	this to a PostScript file.
 Use         : 
	TVPRINT  [, FILENAME ]
 Inputs      : 
	None required.
 Opt. Inputs : 
	FILENAME  = Name of the PostScript file that will be created and
		    printed (and saved).  If not passed, then TEMPORARY.ps is
		    used (but not saved).
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	WINDOW	  = Which window to read from.  If passed, then overrides the
		    TVSELECT routine.
	DISABLE	  = If set, then the current graphics device/window is read.
		    Otherwise, TVSELECT is called to select the image display
		    device/window.  Ignored if WINDOW keyword is passed.
	PORTRAIT  = If set, then plot done in portrait mode, using all of the
		    paper.
	LANDSCAPE = If passed, then plot done in landscape mode, using all of
		    the paper.  This is the default mode.
	TEX	  = If set, then plot done in encapsulated landscape mode,
		    to be compatible with TeX.  If this keyword is passed, then
		    an explicit filename must be passed.  The file is not
		    printed.
	COLOR	  = If set, then a color PostScript file is created.  The
		    default is to convert to a greyscale image.
	REVERSE	  = If set, then plot is done in inverse video.  In other
		    words, white areas on the screen will appear dark, and visa
		    versa.  Ignored if COLOR is set.
	NOBOX	  = If set, then a box is not drawn around the printed image of
		    the X-window.  The default is to draw a box.
	NOPRINT	  = If set, then the PostScript file is created, but not
		    printed.  This requires that an explicit filename be
		    passed.
	QUEUE	  = Print queue to send file to.
	PCL	  = If set, then an HP LaserJet PCL file will be created
		    instead of a PostScript file.  In this case, the default
		    file extension will be ".pcl" instead of ".ps".  The TEX
		    and COLOR keywords will be ignored.
 Calls       : 
	EXPTV, FORM_FILENAME, PCL, PCLCLOSE, PCLPLOT, PS, PSCLOSE, PSPLOT,
	SETIMAGE, TVREAD
 Common      : 
	None.
 Restrictions: 
	Device must be capable of the TVRD function.  Window must be completely
	visible, with no portion off the end of the screen.

	NOTE:  This routine does not do a good job on line graphics.  It works
	best with images.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	A temporary file, "TEMPORARY.ps" will be created and deleted, unless an
	explicit filename is passed.

	The SETIMAGE routine is called to reset to the default.  Any SETIMAGE
	setting is lost.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, May 1992, from XPRINT.
	William Thompson, June 1992, added color support.
	William Thompson, December 1992, modified to use a better and faster
		translation from colors to grey-scale, as suggested by Alan
		Youngblood.
 Written     : 
	William Thompson, GSFC, May 1992.
 Modified    : 
	Version 1, William Thompson, 11 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, 24 August 1993.
		Added PCL keyword.
 Version     : 
	Version 2, 24 August 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	TVPROF
 Purpose     : 
	Uses the cursor to get a profile from a displayed image.
 Explanation : 
	The TV cursor is activated, and the user is prompted to enter in a 
	series of points defining the path to take the profile along.  This
	procedure is completed by entering in the same point twice.  Then 
	PROF is used to get the profile and positions XVAL, YVAL.
 Use         : 
	TVPROF, IMAGE, PROFILE, XVAL, YVAL  [, MX, MY, IX, IY ]
 Inputs      : 
	IMAGE	  = The image to take the positions and values from.
 Opt. Inputs : 
	MX, MY	  = Size of displayed image.
	IX, IY	  = Position of the lower left-hand corner of the image.

	If the optional parameters are not passed, then they are retrieved with
	GET_TV_SCALE.  It is anticipated that these optional parameters will
	only be used in extremely rare circumstances.

 Outputs     : 
	PROFILE	  = The values of IMAGE along the path.
	XVAL,YVAL = The X,Y positions of the selected path.
 Opt. Outputs: 

 Keywords    : 
	MISSING  = Value representing missing points.
	DISABLE  = If set, then TVSELECT not used.
 Calls       : 
	GET_IM_KEYWORD, GET_TV_SCALE, PROF, TVPOINTS
 Common      : 
	None.
 Restrictions: 
	Since this routine works interactively with the cursor, the image 
	must be displayed on the TV screen.  It is best if the image is
	displayed using EXPTV.  But other methods of display are supported by
	passing MX, MY, and IX, IY directly to the procedure.

	It is important that the user select the graphics device/window, and
	image region before calling this routine.  For instance, if the image
	was displayed using EXPTV,/DISABLE, then this routine should also be
	called with the /DISABLE keyword.  If multiple images are displayed
	within the same window, then use SETIMAGE to select the image before
	calling this routine.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	The selected path is drawn on the image display screen.
 Category    : 

 Prev. Hist. : 
	W.T.T., Oct. 1987.
	W.T.T., Jan. 1991, changed FLAG to keyword BADPIXEL.
	William Thompson, May 1992, changed to call GET_TV_SCALE.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
 Written     : 
	William Thompson, GSFC, October 1987.
 Modified    : 
	Version 1, William Thompson, GSFC, 11 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 11 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	TVPROFILE
 Purpose     : 
	Interactively draw profile of an image in separate window.
 Explanation : 
	Interactively draw row or column profiles of an image in a separate
	window.  A new window is created and the mouse location in the original
	window is used to plot profiles in the new window.  Pressing the left
	mouse button toggles between row and column profiles.  The right mouse
	button exits.
 Use         : 
	TVPROFILE, Image

	Example: Create and display an image and use the TVPROFILE routine on
	it.  Create and display the image by entering:

		A = DIST(256)
		EXPTV, A

	Run the TVPROFILE routine by entering:

		TVPROFILE, A

	The TVPROFILE window should appear.  Move the cursor over the original
	image to see the profile at the cursor position.  Press the left mouse
	button to toggle between row and column profiles.  Press the right
	mouse button (with the cursor over the original image) to exit the
	routine.

 Inputs      : 
	IMAGE	= The variable that represents the image displayed.  This data
		  need not be scaled into bytes.  The profile graphs are made
		  from this array.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	WSIZE	= The size of the TVPROFILE window as a fraction or multiple 
		  of 640 by 512.
	DISABLE	= If set, then TVSELECT is not used.
	NOWINDOW= If set, then the graph is made using the current graphics
		  device or window.
 Calls       : 
	GET_TV_SCALE, HAVE_WINDOWS, TVPOS, SETWINDOW
 Common      : 
	None.
 Restrictions: 
	The image must have been displayed with EXPTV or PUT.

	It is important that the user select the graphics device/window, and
	image region before calling this routine.  For instance, if the image
	was displayed using EXPTV,/DISABLE, then this routine should also be
	called with the /DISABLE keyword.  If multiple images are displayed
	within the same window, then use SETIMAGE to select the image before
	calling this routine.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	A new window is created and used for the profiles.  When done, the new
	window is deleted.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, March 1993, from PROFILES by DMS, Nov, 1988.
 Written     : 
	William Thompson, GSFC, March 1993.
 Modified    : 
	Version 1, William Thompson, GSFC, 11 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 1 September 1993.
		Changed WSET to SETWINDOW in selected places.
	Version 3, William Thompson, GSFC, 29 October 1993.
		Added image value to display.
 Version     : 
	Version 3, 29 October 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	TVREAD()
 Purpose     : 
	Reads contents of an image display screen into an array.
 Explanation : 
	Reads the contents of an image display screen, or window, into an
	array.  Uses TVRD.  Reads the entire window.
 Use         : 
	Result = TVREAD()
	Result = TVREAD(RED,GREEN,BLUE)
 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	RED, GREEN, BLUE = The active color tables in the selected
		  window/device.
 Keywords    : 
	WINDOW	= Which window to read from.  If passed, then overrides the
		  TVSELECT routine.
	DISABLE = If set, then the current graphics device/window is read.
		  Otherwise, TVSELECT is called to select the image display
		  device/window.  Ignored if WINDOW keyword is passed.
 Calls       : 
	HAVE_WINDOWS, TVSELECT, TVUNSELECT
 Common      : 
	None.
 Restrictions: 
	Device must be capable of the TVRD function.  Window must be completely
	visible, with no portion off the end of the screen.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	None.
 Prev. Hist. : 
	William Thompson, June 1991.
	William Thompson, May 1992, added output parameters RED, GREEN, BLUE.
 Written     : 
	William Thompson, GSFC, June 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 11 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 11 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	TVSCREEN
 Purpose     : 
	Create window 512 (or 256) pixels on a side for images.
 Explanation : 
	WINDOW is called to open window #2 with XSIZE,YSIZE set to either 512
	or 256 depending on the screen size.  Then TVDEVICE is called to make
	this the default for image display, and WSET is called to redirect
	plots back into the previous window.
 Use         : 
	TVSCREEN
 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	HAVE_WINDOWS, TVDEVICE
 Common      : 
	None.
 Restrictions: 
	The current graphics device must support windows.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, Feb. 1990.
	W.T.T., Feb. 1991., modified to use TVDEVICE.
	W.T.T., Oct 1991, added test for X-display size.
	William Thompson, December 1992, added support for DOS.
 Written     : 
	William Thompson, GSFC, February 1990.
 Modified    : 
	Version 1, William Thompson, GSFC, 11 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 11 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	TVSELECT
 Purpose     : 
	Select image display device/window defined by TVDEVICE.
 Explanation : 
	Select the image display device and/or window as set by the routine
	TVDEVICE.  TVUNSELECT returns to the previous device/window.

	If the TV device has already been selected, then no action is taken.
 Use         : 
	TVSELECT
 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	None, but various parameters in common block TV_WINDOW are modified.
 Opt. Outputs: 
	None.
 Keywords    : 
	DISABLE	= If set, then no action is taken.
	SAFE	= If set, then SETPLOT is used instead of SET_PLOT, and
		  SETWINDOW instead of WSET.  Generally used when called from
		  SETIMAGE.
 Calls       : 
	HAVE_WINDOWS, SETWINDOW, SETPLOT
 Common      : 
	TV_DEVICE contains various parameters used to communicate with the
	routines TVDEVICE and TVUNSELECT.
 Restrictions: 
	Only works if TVDEVICE, TVSELECT and TVUNSELECT are used exclusively to
	change between the image display and graphics device/window.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, Feb. 1991.
 Written     : 
	William Thompson, GSFC, February 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 5 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 1 September 1993.
		Changed WSET to SETWINDOW, SET_PLOT to SETPLOT.
		Added SAFE keyword.
 Version     : 
	Version 2, 1 September 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : TVSUBIMAGE()

 Purpose     : Interactively selects a subimage from a displayed image.

 Explanation : Uses TVBOX to select a rectangular subregion of a displayed
		image, and returns that subregion.

 Use         : Result = TVSUBIMAGE( IMAGE [, X1,X2,Y1,Y2 [, MX,MY,IX,IY ]] )

 Inputs      : IMAGE	= Image to extract subimage from.

 Opt. Inputs : MX, MY	= Size of displayed image.
		IX, IY	= Position of the lower left-hand corner of the image.

		If these optional parameters are not passed, then they are
		retrieved with GET_TV_SCALE.  It is anticipated that these
		optional parameters will only be used in extremely rare
		circumstances.

 Outputs     : The result of the function is the extracted subimage.

 Opt. Outputs: X1,X2,Y1,Y2	= The X,Y positions of the corners of the
				  selected subimage.

 Keywords    : DISABLE    = If set, then TVSELECT not used.

		PRINT	   = If set, then a message is printed given the range
			     of the extracted subimage.

		The following keywords are only relevant when used on a
		graphics device that supports windows:

		INIT	   = If this keyword is set, X1, X2, and Y1, Y2 contain
			     the initial parameters for the box.

		FIXED_SIZE = If this keyword is set, X1, X2, and Y1, Y2
			     describe the initial size of the box.  This size
			     may not be changed by the user.

 Calls       : GET_TV_SCALE, TVBOX

 Common      : None.

 Restrictions: It is important that the user select the graphics
		device/window, and image region before calling this routine.
		For instance, if the image was displayed using EXPTV,/DISABLE,
		then this routine should also be called with the /DISABLE
		keyword.  If multiple images are displayed within the same
		window, then use SETIMAGE to select the image before calling
		this routine.

		In general, the SERTS image display routines use several
		non-standard system variables.  These system variables are
		defined in the procedure IMAGELIB.  It is suggested that the
		command IMAGELIB be placed in the user's IDL_STARTUP file.

		Some routines also require the SERTS graphics devices software,
		generally found in a parallel directory at the site where this
		software was obtained.  Those routines have their own special
		system variables.

 Side effects: None.

 Category    : Utilities, Image_display.

 Prev. Hist. : None.

 Written     : William Thompson, GSFC, 25 June 1993.

 Modified    : Version 1, William Thompson, GSFC, 25 June 1993.
		Version 2, William Thompson, GSFC, 30 August 1993.
			Renamed to TVSUBIMAGE.
			Added checks on IMAGE parameter.
		Version 3, Liyun Wang, GSFC/ARC, March 1, 1995
                       Added check on subimage limits

 Version     : Version 3, March 1, 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	TVUNSELECT
 Purpose     : 
	Inverse to the TVSELECT routine.
 Explanation : 
	Reset to the graphics device and/or window that was current when
	TVSELECT was called.
 Use         : 
	TVUNSELECT
 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	None, but various parameters in common block TV_WINDOW are modified.
 Opt. Outputs: 
	None.
 Keywords    : 
	DISABLE	= If set, then no action is taken.
	SAFE	= If set, then SETPLOT is used instead of SET_PLOT, and
		  SETWINDOW instead of WSET.  Generally used when called from
		  SETIMAGE.
 Calls       : 
	HAVE_WINDOWS, SETWINDOW, SETPLOT
 Common      : 
	TV_DEVICE contains various parameters used to communicate with the
	routines TVDEVICE and TVSELECT.
 Restrictions: 
	Only works if TVDEVICE, TVSELECT and TVUNSELECT are used exclusively to
	change between the image display and graphics device/window.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, Feb. 1991.
 Written     : 
	William Thompson, GSFC, Feb. 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 5 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 1 September 1993.
		Changed WSET to SETWINDOW, SET_PLOT to SETPLOT.
		Added SAFE keyword.
 Version     : 
	Version 2, 1 September 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	TVVALUE
 Purpose     : 
	Interactively display the values in an image.
 Explanation : 
	Instructions are printed and the pixel values are printed as the 
	cursor is moved over the image.

	Press the left or center mouse button to create a new line of output,
	saving the previous line.

	Press the right mouse button to exit the procedure.

 Use         : 
	TVVALUE, IMAGE  [, X, Y, VALUE ]
 Inputs      : 
	IMAGE	= Image to get values from.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	X, Y	= Pixel position of cursor for the last point selected.
	VALUE	= Value of image under cursor for the last point selected.
 Keywords    : 
	DISABLE	= If set, then TVSELECT not used.
	FONT	= Font to use when displaying the TVVALUE widget.  Only
		  meaningful when the graphics device supports widgets.  If not
		  passed, then the first available 20 point font is used.
 Calls       : 
	GET_TV_SCALE, TVPOS, TVSELECT, TVUNSELECT
 Common      : 
	None.
 Restrictions: 
	The image must have been displayed with EXPTV.

	It is important that the user select the graphics device/window, and
	image region before calling this routine.  For instance, if the image
	was displayed using EXPTV,/DISABLE, then this routine should also be
	called with the /DISABLE keyword.  If multiple images are displayed
	within the same window, then use SETIMAGE to select the image before
	calling this routine.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	None.
 Prev. Hist. : 
	William Thompson, Feb. 1992.
	William Thompson, May 1992, changed to call GET_TV_SCALE.
	William Thompson, Nov 1992, changed way mouse buttons were addressed.
	William Thompson, Nov 1992, rewrote based on standard routine RDPIX.
	William Thompson, Mar 1993, changed to use TVPOS.
 Written     : 
	William Thompson, GSFC, February 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 5 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 12 May 1993.
		Converted to use widgets when available.  This makes it
		compatible with IDL for Windows.  Also added FONT keyword.
 Version     : 
	Version 2, 12 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	TVZOOM
 Purpose     : 
	Zooms into the current image display window.
 Explanation : 
	Display part of an image (or graphics) from the current window expanded
	in another window.  The cursor is used to mark the center of the zoom.
	This routine differs from the standard ZOOM routine in that the
	currently selected image display window (TVDEVICE) is used.

	If TVZOOM is called with the optional IMAGE parameter, then a widget is
	created which allows the user to roam the image at true resolution,
	instead of just the displayed resolution.

 Use         : 
	TVZOOM
	TVZOOM, IMAGE  [, X0, X1, Y0, Y1 ]
 Inputs      : 
	None required.
 Opt. Inputs : 
	IMAGE
 Outputs     : 
	No explicit outputs.  A new window is created and optionally destroyed
	when the procedure is exited.
 Opt. Outputs: 
	X0, X1, Y0, Y1 = The coordinates of the corners of the zoomed image.
 Keywords    : 
	FACT	   = Zoom expansion factor, default = 4.
	INTERP	   = Set to interpolate, otherwise pixel replication is used.
	XSIZE	   = X size of new window, if omitted, 250.
	YSIZE	   = Y size of new window, default = 250.
	CONTINUOUS = Keyword param which, if set obviates the need to press the
		     left mouse button.  The zoom window tracks the mouse.
		     Only works well on fast computers.
	KEEP	   = Keep the zoom window after exiting the procedure.
	ZOOM_WINDOW= When used with KEEP, returns the index of the zoom window.
		     Otherwise, if KEEP is not set, then -1 is returned.
	NEW_WINDOW = Normally, if ZOOM is called with /KEEP and then called
		     again, it will use the same window to display the zoomed
		     image.  Calling ZOOM with /NEW_WINDOW forces it to create
		     a new window for this purpose.
	DISABLE	   = If set, then TVSELECT is not called.
	RECURSIVE  = An internally used keyword to signal that TVZOOM is
		     calling itself recursively.  This is used to support
		     Microsoft Windows.  This keyword should not be used
		     externally to TVZOOM.

	    If the optional IMAGE parameter is passed, then the following
	    keyword parameters can be used to adjust the scale of the image:

	NOSCALE  = If set, then the image is not scaled.
	MISSING	 = Value flagging missing pixels.  These points are scaled to
		   zero.
	MAX	 = The maximum value of IMAGE to be considered in scaling the
		   image, as used by BYTSCL.  The default is the maximum value
		   of IMAGE.
	MIN	 = The minimum value of IMAGE to be considered in scaling the
		   image, as used by BYTSCL.  The default is the minimum value
		   of IMAGE.
	TOP	 = The maximum value of the scaled image array, as used by
		   BYTSCL.  The default is !D.N_COLORS-1.
	VELOCITY = If set, then the image is scaled using FORM_VEL as a
		   velocity image.  Can be used in conjunction with COMBINED
		   keyword.  Ignored if NOSCALE is set.
	COMBINED = Signals that the image is to be displayed in one of two
		   combined color tables.  Can be used by itself, or in
		   conjunction with the VELOCITY or LOWER keywords.
	LOWER	 = If set, then the image is placed in the lower part of the
		   color table, rather than the upper.  Used in conjunction
		   with COMBINED keyword.
 Calls       : 
	TVSELECT, TVUNSELECT, ZOOM, CW_TVZOOM
 Common      : 
	TVZOOM_COMMON is an internal common block.
 Restrictions: 
	Only works with color systems.  Using TVZOOM with the optional IMAGE
	parameter requires that the graphics device supports widgets.

	When the optional IMAGE parameter is passed, then TVZOOM should be
	called with the same intensity scaling keyword settings that the image
	was originally displayed with.  There may still be some difference in
	intensity between the original and zoomed images if the original image
	was not displayed at full resolution.

	This version of TVZOOM uses a version of ZOOM that is distributed with
	IDL starting with version 3.1.1.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	When TVZOOM is reusing a zoom window from a previous call to
	TVZOOM,/KEEP, then the XSIZE and YSIZE parameters are reset to the
	actual size of the window.

 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., Mar. 1990.
	W.T.T., Feb. 1991, modified to use TVSELECT, TVUNSELECT.
 Written     : 
	William Thompson, GSFC, March 1990.
 Modified    : 
	Version 1, William Thompson, GSFC, 5 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 3 June 1993.
		Added option of passing IMAGE array directly to routine.
		Added DISABLE keyword.
		Added RECURSIVE keyword.
		Added dummy widget routines, added /NOSCALE to recursive call.
 Version     : 
	Version 2, 3 June 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	TVZOOM2
 Purpose     : 
	Zooms into the current image display window.
 Explanation : 
	Display part of an image (or graphics) from the current window expanded
	in another window.  The cursor is used to mark the center of the zoom.
	This routine differs from the standard ZOOM routine in that the
	currently selected image display window (TVDEVICE) is used.

	If TVZOOM is called with the optional IMAGE parameter, then a widget is
	created which allows the user to roam the image at true resolution,
	instead of just the displayed resolution.

 Use         : 
	TVZOOM2
	TVZOOM2, IMAGE  [, X0, X1, Y0, Y1 ]
 Inputs      : 
	None required.
 Opt. Inputs : 
	IMAGE
 Outputs     : 
	No explicit outputs.  A new window is created and optionally destroyed
	when the procedure is exited.
 Opt. Outputs: 
	X0, X1, Y0, Y1 = The coordinates of the corners of the zoomed image.
 Keywords    : 
	FACT	   = Zoom expansion factor, default = 4.
	INTERP	   = Set to interpolate, otherwise pixel replication is used.
	XSIZE	   = X size of new window, if omitted, 250.
	YSIZE	   = Y size of new window, default = 250.
	CONTINUOUS = Keyword param which, if set obviates the need to press the
		     left mouse button.  The zoom window tracks the mouse.
		     Only works well on fast computers.
	KEEP	   = Keep the zoom window after exiting the procedure.
	ZOOM_WINDOW= When used with KEEP, returns the index of the zoom window.
		     Otherwise, if KEEP is not set, then -1 is returned.
	NEW_WINDOW = Normally, if ZOOM is called with /KEEP and then called
		     again, it will use the same window to display the zoomed
		     image.  Calling ZOOM with /NEW_WINDOW forces it to create
		     a new window for this purpose.
	DISABLE	   = If set, then TVSELECT is not called.
	RECURSIVE  = An internally used keyword to signal that TVZOOM2 is
		     calling itself recursively.  This is used to support
		     Microsoft Windows.  This keyword should not be used
		     externally to TVZOOM2.

	    If the optional IMAGE parameter is passed, then the following
	    keyword parameters can be used to adjust the scale of the image:

	NOSCALE  = If set, then the image is not scaled.
	MISSING	 = Value flagging missing pixels.  These points are scaled to
		   zero.
	MAX	 = The maximum value of IMAGE to be considered in scaling the
		   image, as used by BYTSCL.  The default is the maximum value
		   of IMAGE.
	MIN	 = The minimum value of IMAGE to be considered in scaling the
		   image, as used by BYTSCL.  The default is the minimum value
		   of IMAGE.
	TOP	 = The maximum value of the scaled image array, as used by
		   BYTSCL.  The default is !D.N_COLORS-1.
	VELOCITY = If set, then the image is scaled using FORM_VEL as a
		   velocity image.  Can be used in conjunction with COMBINED
		   keyword.  Ignored if NOSCALE is set.
	COMBINED = Signals that the image is to be displayed in one of two
		   combined color tables.  Can be used by itself, or in
		   conjunction with the VELOCITY or LOWER keywords.
	LOWER	 = If set, then the image is placed in the lower part of the
		   color table, rather than the upper.  Used in conjunction
		   with COMBINED keyword.
       GROUP    = Group ID of an upper widget which would be
                  desensitized if GROUP is set upon calling this
                  routine; useful when IMAGE is passed.
 Calls       : 
	TVSELECT, TVUNSELECT, ZOOM, CW_TVZOOM
 Common      : 
	TVZOOM_COMMON is an internal common block.
 Restrictions: 
	Only works with color systems.  Using TVZOOM2 with the optional IMAGE
	parameter requires that the graphics device supports widgets.

	When the optional IMAGE parameter is passed, then TVZOOM2 should be
	called with the same intensity scaling keyword settings that the image
	was originally displayed with.  There may still be some difference in
	intensity between the original and zoomed images if the original image
	was not displayed at full resolution.

	This version of TVZOOM2 uses a version of ZOOM that is distributed with
	IDL starting with version 3.1.1.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	When TVZOOM2 is reusing a zoom window from a previous call to
	TVZOOM2,/KEEP, then the XSIZE and YSIZE parameters are reset to the
	actual size of the window.

 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	W.T.T., Mar. 1990.
	W.T.T., Feb. 1991, modified to use TVSELECT, TVUNSELECT.
 Written     : 
	William Thompson, GSFC, March 1990.
 Modified    : 
	Version 1, William Thompson, GSFC, 5 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 3 June 1993.
		Added option of passing IMAGE array directly to routine.
		Added DISABLE keyword.
		Added RECURSIVE keyword.
		Added dummy widget routines, added /NOSCALE to recursive call.
 Version     : 
	Version 2, 3 June 1993.
;-
;+
 Project     :	SOHO - CDS

 Name        :	UITDBLIB

 Purpose     :	Add the system variables used by the UIT database library

 Explanation :	This routine adds the non-standard system variables used by the
		UIT database routines from the IDL Astronomy User's Library.

		The non-standard system variables !PRIV, !DEBUG, !TEXTUNIT, and
		!TEXTOUT are added using DEFSYSV.

 Use         :	UITDBLIB

 Inputs      :	None.

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	This routine should be called only once, preferably in the
		startup procedure.

 Side effects:	System variables may be changed to their default values.

 Category    :	Utilities, Database

 Prev. Hist. :	This routine was adapted from ASTROLIB, which had the following
		history entries:

		Written, Wayne Landsman, July 1986.
		Use DEFSYSV instead of ADDSYSVAR           December 1990

 Written     :	William Thompson, GSFC, 30 March 1994

 Modified    :	Version 1, William Thompson, GSFC, 30 March 1994

 Version     :	Version 1, 30 March 1994
;-
;+
 Project     : SOHO - CDS

 Name        : 
	UNSETFLAG
 Purpose     : 
	Unset a flag field set by SETFLAG.
 Explanation : 
	Inverse procedure to SETFLAG and ENABLEFLAG.  Unsets one of the flag
	fields in the !IMAGE structure.
 Use         : 
	UNSETFLAG, /Keyword, ...

	Use only the /KEYWORD form for the keywords.  Do not use KEYWORD=VALUE.

 Inputs      : 
	None.  Only keyword parameters are used by this routine.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	NOSQUARE = If set, then pixels are not forced to be square.
	SMOOTH	 = If set, then image is expanded with interpolation.
	NOBOX	 = If set, then box is not drawn, and no space is reserved
		   for a border around the image.
	NOSCALE	 = If set, then the command TV is used instead of TVSCL to
		   display the image.
	MISSING	 = Value flagging missing pixels.  These points are scaled to
		   zero.  Ignored if NOSCALE is set.
	SIZE	 = If passed and positive, then used to determine the scale of
		   the image.
	NOEXACT  = If set, then exact scaling is not imposed.  Otherwise, the
		   image scale will be either an integer, or one over an
		   integer.  Ignored if SIZE is passed with a positive value.
	XALIGN	 = Alignment within the image display area.  Ranges between 0
		   (left) to 1 (right).  Default is 0.5 (centered).
	YALIGN	 = Alignment within the image display area.  Ranges between 0
		   (bottom) to 1 (top).  Default is 0.5 (centered).
	RELATIVE = Size of area to be used for displaying the image, relative
		   to the total size available.  Must be between 0 and 1.
		   Default is 1.  Passing SIZE explicitly will override this
		   keyword.
	MAX	 = The maximum value to be considered in scaling images, as
		   used by BYTSCL.
	MIN	 = The minimum value to be considered in scaling images, as
		   used by BYTSCL.
	VELOCITY = If set then the MIN and MAX values pertain to velocity
		   images rather than intensity images.  (An alternate way to
		   do the same thing is to use the keywords VMIN and VMAX.)
	TOP	 = The maximum value of the scaled image array, as used by
		   BYTSCL.
	COMBINED = Signal to FORM_VEL to scale velocity images so that they can
		   be displayed together with intensity images.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, June 1991.
	W.T.T., Nov. 1991, added keywords MIN, MAX, VMIN, VMAX, TOP and
			   COMBINED.
	W.T.T., May 1992, added VELOCITY keyword, and made VMIN, VMAX alternate
			  format.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
 Written     : 
	William Thompson, GSFC, June 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 4 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 4 May 1993.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : UNSIGN()
               
 Purpose     : Produces longword equivalent of an unsigned 16-bit integer.
               
 Explanation : If an unsigned 16-bit value is held internally in IDL in an
               INT variable, overflow can occur.  This routine translates 
               the value to a longword so that the value can be handled as
               required.  Optionally, it can also be used to extract the lower
		NBITS bits in a number in which the higher order bits should be
		suppressed.
               
 Use         : lword = UNSIGN( INT16  [, NBITS ] )
    
 Inputs      : INT16  - 16-bit integer whose bytes represent an unsigned
                        2-byte integer.
               
 Opt. Inputs : NBITS  - Number of low-order bits to use in extracting the
			 unsigned value.  If not passed, then 16 is assumed.
               
 Outputs     : Function returns the longword equivalent.
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, numerical
               
 Prev. Hist. : Original by MK Carter

 Written     : CDS version by C D Pike, RAL, 22-Oct-93
               
 Modified    : Version 1, C D Pike, RAL 22-Oct-93
		Version 2, William Thompson, GSFC, 19 November 1993.
			Modified to speed up.  Added DATATYPE check.
		Version 3, William Thompson, GSFC, 20 June 1995
			Added optional parameter NBITS

 Version     : Version 3, 20 June 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	UTC2DOW()

 Purpose     :	Calculates the day of the week from CDS UTC date/time.

 Explanation :	This procedure takes any of the UTC date/time formats, and
		calculates the appropriate day of the week.  This is returned
		as either a number between 0-6 (Sunday-Saturday), or as a three
		letter character string (e.g. "Mon") or as a longer character
		string (e.g. "Monday").

 Use         :	Result = UTC2DOW( UTC )
		Result = UTC2DOW( UTC, /STRING )
		Result = UTC2DOW( UTC, /ABBREVIATED )
		Result = STRUPCASE( UTC2DOW( UTC, /ABBREVIATED ))

 Inputs      :	UTC	= Coordinated Universal Time, in one of the following
			  formats:

			Internal:  A structure containing the tags:

				MJD:	The Modified Julian Day number.
				TIME:	The time of day, in milliseconds since
					the beginning of the day.

				   Both are long integers.

			External:  A structure containing the integer tags
				   YEAR, MONTH, DAY, HOUR, MINUTE, SECOND, and
				   MILLISECOND.

			CCSDS:	   An ASCII string containing the UTC time to
				   millisecond accuracy in the format
				   recommended by the Consultative Committee
				   for Space Data Systems (ISO 8601), e.g.

					"1988-01-18T17:20:43.123Z"

				   or one of its variants--see STR2UTC for
				   more details.

 Opt. Inputs :	None.

 Outputs     :	The result of the function is the day of the week in one of the
		following formats:

			     Default	String	    Abbreviated

				0	Sunday		Sun
				1	Monday		Mon
				2	Tuesday		Tue
				3	Wednesday	Wed
				4	Thursday	Thu
				5	Friday		Fri
				6	Saturday	Sat

 Opt. Outputs:	None.

 Keywords    :	STRING	    = If set, then the result of the function is a
			      character string containing the full name of the
			      day of the week, e.g. "Monday".

		ABBREVIATED = If set, then the result of the function is a
			      three-letter abbreviation for the day of the
			      week, e.g. "Mon".  If all uppercase letters are
			      desired, e.g. "TUE", then simply combine this
			      function with the STRUPCASE function.

		ERRMSG	    = If defined and passed, then any error messages 
			      will be returned to the user in this parameter 
			      rather than being handled by the IDL MESSAGE 
			      utility.  If no errors are encountered, then a 
			      null string is returned.  In order to use this 
			      feature, the string ERRMSG must be defined 
			      first, e.g.,

				ERRMSG = ''
				RESULT = UTC2DOW( UTC, ERRMSG=ERRMSG )
				IF ERRMSG NE '' THEN ...

 Calls       :	STR2UTC, UTC2INT

 Common      :	None.

 Restrictions:	None.

 Side effects:	If an error is encountered and the ERRMSG keyword is set, 
		UTC2DOW returns an integer scalar equal to -1.

 Category    :	Utilities, Time.

 Prev. Hist. :	None.

 Written     :	William Thompson, GSFC, 27 September 1993.

 Modified    :	Version 1, William Thompson, GSFC, 27 September 1993.
		Version 2, William Thompson, GSFC, 14 November 1994.
			Changed .DAY to .MJD
		Version 3, Donald G. Luttermoser, GSFC/ARC, 28 December 1994.
			Added the keyword ERRMSG.
		Version 4, Donald G. Luttermoser, GSFC/ARC, 30 January 1995.
			Added ERRMSG keyword to internally called procedures.
			Made the error handling routine more robust.  Note 
			that this procedure can handle both scalars and
			vectors as input.

 Version     :	Version 4, 30 January 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	UTC2DOY()

 Purpose     :	Calculates the day of the year from CDS UTC date/time.

 Explanation :	This procedure takes any of the UTC date/time formats, and
		calculates the appropriate day of the year, starting with the
		1st of January as day 1.

		See file aaareadme.txt for a listing of the proper UTC
		date/time formats.

 Use         :	Result = UTC2DOY( UTC )

 Inputs      :	UTC	= Coordinated Universal Time, in one of the following
			  formats:

			Internal:  A structure containing the tags:

				MJD:	The Modified Julian Day number.
				TIME:	The time of day, in milliseconds since
					the beginning of the day.

				   Both are long integers.

			External:  A structure containing the integer tags
				   YEAR, MONTH, DAY, HOUR, MINUTE, SECOND, and
				   MILLISECOND.

			CCSDS:	   An ASCII string containing the UTC time to
				   millisecond accuracy in the format
				   recommended by the Consultative Committee
				   for Space Data Systems (ISO 8601), e.g.

					"1988-01-18T17:20:43.123Z"

				   or one of its variants--see STR2UTC for
				   more details.

 Opt. Inputs :	None.

 Outputs     :	The result of the function is the day of the year.

 Opt. Outputs:	None.

 Keywords    :	ERRMSG       =	If defined and passed, then any error messages 
				will be returned to the user in this parameter 
				rather than being handled by the IDL MESSAGE 
				utility.  If no errors are encountered, then a 
				null string is returned.  In order to use this 
				feature, the string ERRMSG must be defined 
				first, e.g.,

					ERRMSG = ''
					RESULT = UTC2DOY( UTC, ERRMSG=ERRMSG )
					IF ERRMSG NE '' THEN ...

 Calls       :	STR2UTC, UTC2INT

 Common      :	None.

 Restrictions:	None.

 Side effects:	If an error is encountered and the ERRMSG keyword is set, 
		UTC2DOY returns an integer scalar equal to -1.

 Category    :	Utilities, Time.

 Prev. Hist. :	None.

 Written     :	William Thompson, GSFC, 27 September 1993.

 Modified    :	Version 1, William Thompson, GSFC, 27 September 1993.
		Version 2, William Thompson, GSFC, 14 November 1994
			Changed .DAY to .MJD
		Version 3, Donald G. Luttermoser, GSFC/ARC, 28 December 1994
			Added the keyword ERRMSG.  Added a check to see
			whether the calculated DOY is valid.
		Version 4, Donald G. Luttermoser, GSFC/ARC, 3 January 1995
			Fixed bug introduced in version 3 which did not allow
			for arrays to be sent/returned.
		Version 5, Donald G. Luttermoser, GSFC/ARC, 30 January 1995
			Added ERRMSG keyword to internally called procedures.
			Madec the error handling routine more robust.  Note
			that this procedure can handle both scalars and 
			vectors as input.

 Version     :	Version 5, 30 January 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	UTC2INT()

 Purpose     :	Converts CCSDS calendar time to internal format.

 Explanation :	This procedure converts Coordinated Universal Time (UTC)
		calendar time, as either a seven element structure variable, or
		in the CCSDS/ISO 8601 ASCII calendar format, into CDS internal
		format.  For notes on various time formats, see file 
		aaareadme.txt.

 Use         :	Result = UTC2INT( UTC )

 Inputs      :	UTC	= This can either be a structure with the tags YEAR,
			  MONTH, DAY, HOUR, MINUTE, SECOND, MILLISECOND, or a
			  character string in CCSDS/ISO 8601 format, e.g.

				"1988-01-18T17:20:43.123Z"

			  or one of it's variants--see STR2UTC for more
			  details.

 Opt. Inputs :	None.

 Outputs     :	The result of the function is a structure with the tags:

			MJD	= The Modified Julian Day number
			TIME	= The time of day, in milliseconds since the
				  start of the day.

 Opt. Outputs:	None.

 Keywords    :	ERRMSG       =	If defined and passed, then any error messages 
				will be returned to the user in this parameter 
				rather than being handled by the IDL MESSAGE 
				utility.  If no errors are encountered, then a 
				null string is returned.  In order to use this 
				feature, the string ERRMSG must be defined 
				first, e.g.,

					ERRMSG = ''
					RESULT = UTC2INT( UTC, ERRMSG=ERRMSG )
					IF ERRMSG NE '' THEN ...

 Calls       :	DATATYPE, DATE2MJD, STR2UTC

 Common      :	None.

 Restrictions:	None.

 Side effects:	If an error is encountered and the ERRMSG keyword is set, 
		UTC2INT returns an integer scalar equal to -1.

 Category    :	None.

 Prev. Hist. :	None.  However, the concept of "internal" and "external" time
		is based in part on the Yohkoh software by M. Morrison and G.
		Linford, LPARL.

 Written     :	William Thompson, GSFC, 13 September 1993.

 Modified    :	Version 1, William Thompson, GSFC, 21 September 1993.
		Version 2, William Thompson, GSFC, 14 November 1994
			Changed .DAY to .MJD
		Version 3, Donald G. Luttermoser, GSFC/ARC, 3 January 1995
			Added the keyword ERRMSG.  Check to see if the input
			structure (if sent) has 2 or 7 tags.  If 2 tags (MJD &
			TIME), this procedure returns the input variable with 
			no changes (i.e., already in CDS internal format).
		Version 4, Donald G. Luttermoser, GSFC/ARC, 30 January 1995
			Added ERRMSG keyword to internally called procedures.
			Made error handling routine more robust.  Note that 
			this procedure allows both scalars and vectors as
			input.

 Version     :	Version 4, 30 January 1995
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : UTC2SEC()
               
 Purpose     : Converts CDS UTC time format to seconds since MJD=0.
               
 Explanation : Used in the UTPLOT programs, this function converts CDS 
               internal UTC format to seconds since MJD=0.
               It takes no account of leap seconds.
		For notes on various time formats, see file aaareadme.txt.
               
 Use         : IDL>  sec = utc2sec(str)
    
 Inputs      : str  - structure variable containing UTC time format
               
 Opt. Inputs : None
               
 Outputs     : Function returns seconds elapsed since MJD=0.
               
 Opt. Outputs: None
               
 Keywords    : ERRMSG       =	If defined and passed, then any error messages 
				will be returned to the user in this parameter 
				rather than being handled by the IDL MESSAGE 
				utility.  If no errors are encountered, then a 
				null string is returned.  In order to use this 
				feature, the string ERRMSG must be defined 
				first, e.g.,

					ERRMSG = ''
					RESULT = UTC2SEC( STR, ERRMSG=ERRMSG )
					IF ERRMSG NE '' THEN ...

 Calls       : None

 Common      : None
               
 Restrictions: No account is taken of leap seconds.
               
 Side effects: If an error is encountered and the ERRMSG keyword is set, 
		UTC2SEC returns an integer scalar equal to -1.
               
 Category    : Util, time
               
 Prev. Hist. : None

 Written     :	C D Pike, RAL, 20-Apr-94
               
 Modified    :	Version 1, C D Pike, RAL, 20-Apr-94
		Version 2, William Thompson, GSFC, 14 November 1994
			Changed .DAY to .MJD
		Version 3, Donald G. Luttermoser, GSFC/ARC, 3 January 1995
			Added the keyword ERRMSG.  Added ON_ERROR,2 flag.
			Allow for input of EXTERNAL format of UTC.
		Version 4, Donald G. Luttermoser, GSFC/ARC, 30 January 1995
			Added ERRMSG keyword to internally called procedures.
			Made the error handling routine more robust.  Note 
			that this routine can handle both scalars and vectors
			as input.

 Version     :	Version 4, 30 January 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	UTC2STR()

 Purpose     :	Converts CDS external time in UTC to string format.

 Explanation :	This procedure takes the UTC time in "internal" or "external"
		format, and converts it to a calendar string.  The default
		format is the Consultative Committee on Space Data Systems
		(CCSDS) ASCII Calendar Segmented Time Code format (ISO 8601),
		but other formats are also supported.  For notes on various 
		time formats, see file aaareadme.txt.

 Use         :	Result = UTC2STR( UTC )
		Result = UTC2STR( UTC ,/ECS )

 Inputs      :	UTC	= The UTC date/time as a data structure with the
			  elements YEAR, MONTH, DAY, HOUR, MINUTE, SECOND,
			  and MILLISECOND.

 Opt. Inputs :	None.

 Outputs     :	The result of the function will be an ASCII string containing
		the UTC time to millisecond accuracy in CCSDS format, e.g.

			"1988-01-18T17:20:43.123Z"

		However, if the ECS keyword is set, then the following format
		will be used instead.

			"1988/01/18 17:20:43.123"

		Note that this isn't exactly the ECS string format, because the
		ECS does not use fractional seconds.  However, if /ECS is
		combined with /TRUNCATE, then the following output will result

			"1988/01/18 17:20:43"

		which matches what the ECS expects to see.

		Using the keyword /VMS writes out the time in a format similar
		to that used by the VMS operating system, e.g.

			"18-Jan-1988 17:20:43.123"

		A variation of this is obtained with the /STIME keyword, which
		emulates the value of !STIME in IDL.  It is the same as using
		/VMS except that the time is only output to 0.01 second
		accuracy, e.g.

			"18-Jan-1988 17:20:43.12"

		The keywords /DATE_ONLY and TIME_ONLY can be used to extract
		either the date or time part of the string.

 Opt. Outputs:	None.

 Keywords    :	ECS	  = If set, then the output will be in ECS format, as
			    described above.

		VMS	  = If set, then the output will be in VMS format, as
			    described above.

		STIME	  = If set, then the output will be in STIME format, as
			    described above.

		Only one of the above keywords can be set.  If none of them are
		set, then the output is in CCSDS format.

		TRUNCATE  = If set, then the time will be truncated to 1 second
			    accuracy.  Note that this is not the same thing as
			    rounding off to the nearest second, but is a
			    rounding down.

		DATE_ONLY = If set, then only the date part of the string is
			    returned.

		TIME_ONLY = If set, then only the time part of the string is
			    returned.

		UPPERCASE = If set, then the month field in either the VMS or
			    STIME format is returned as uppercase.

		ERRMSG    = If defined and passed, then any error messages 
			    will be returned to the user in this parameter 
			    rather than being handled by the IDL MESSAGE 
			    utility.  If no errors are encountered, then a 
			    null string is returned.  In order to use this 
			    feature, the string ERRMSG must be defined 
			    first, e.g.,

				ERRMSG = ''
				RESULT = UTC2STR( UTC, ERRMSG=ERRMSG )
				IF ERRMSG NE '' THEN ...

 Calls       :	DATATYPE

 Common      :	None.

 Restrictions:	None.

 Side effects:	If an error is encountered and the ERRMSG keyword is set, 
		UTC2STR returns an string scalar equal to '-1'.

 Category    :	Utilities, Time.

 Prev. Hist. :	None.  However, the concept of "internal" and "external" time
		is based in part on the Yohkoh software by M. Morrison and G.
		Linford, LPARL.

 Written     :	William Thompson, GSFC, 20 September 1993.

 Modified    :	Version 1, William Thompson, GSFC, 21 September 1993.
		Version 2, William Thompson, GSFC, 21 October 1993.
			Modified to overcome IDL formatted string limitation
			when processing more than 1024 values, based in part on
			a suggestion by Mark Hadfield, NIWA Oceanographic.
		Version 3, William Thompson, GSFC, 20 December 1994
			Added keywords TRUNCATE, DATE_ONLY, TIME_ONLY
		Version 4, Donald G. Luttermoser, GSFC/ARC, 3 January 1995
			Added the keyword ERRMSG.
		Version 5, Donald G. Luttermoser, GSFC/ARC, 30 January 1995
			Added ERRMSG to the internally called procedures.
			Made the error handling routine more robust.  Note 
			that this routine can handle both scalars and vectors
			as input.
		Version 6, William Thompson, GSFC, 14 March 1995
			Added keywords VMS, STIME, UPPERCASE
               Version 7  CDP, RAL  15-Mar-95.  Fixed typo in Version 6

 Version     :	Version 7, 15 March 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	UTC2TAI()

 Purpose     :	Converts UTC calendar time to TAI.

 Explanation :	This procedure converts Coordinated Universal Time (UTC)
		calendar time, in one of the CDS formats into Atomic
		International Time (TAI).  For notes on various time formats, 
		see file aaareadme.txt.

 Use         :	Result = UTC2TAI( UTC )

 Inputs      :	UTC	= Coordinated Universal Time, in one of the following
			  formats:

			Internal:  A structure containing the tags:

				MJD:	The Modified Julian Day number.
				TIME:	The time of day, in milliseconds since
					the beginning of the day.

				   Both are long integers.

			External:  A structure containing the integer tags
				   YEAR, MONTH, DAY, HOUR, MINUTE, SECOND, and
				   MILLISECOND.

			CCSDS:	   An ASCII string containing the UTC time to
				   millisecond accuracy in the format
				   recommended by the Consultative Committee
				   for Space Data Systems (ISO 8601), e.g.

					"1988-01-18T17:20:43.123Z"

				   or one of its variants--see STR2UTC for
				   more details.

 Opt. Inputs :	None.

 Outputs     :	The result of the function is the Atomic International Time
		calculated from the date and time, in seconds from midnight on
		1 January 1958.

 Opt. Outputs:	None.

 Keywords    :	ERRMSG       =	If defined and passed, then any error messages 
				will be returned to the user in this parameter 
				rather than being handled by the IDL MESSAGE 
				utility.  If no errors are encountered, then a 
				null string is returned.  In order to use this 
				feature, the string ERRMSG must be defined 
				first, e.g.,

					ERRMSG = ''
					RESULT = UTC2TAI( UTC, ERRMSG=ERRMSG )
					IF ERRMSG NE '' THEN ...

 Calls       :	DATATYPE, GET_LEAP_SEC, STR2UTC, UTC2INT

 Common      :	None.

 Restrictions:	Not valid for dates before 1 January 1972.

		This procedure requires a file containing the dates of all leap
		second insertions starting with 31 December 1971.  This file
		must have the name 'leap_seconds.dat', and must be in the
		directory given by the environment variable TIME_CONV.  It must
		be properly updated as new leap seconds are announced.

 Side effects:	If an error is encountered and the ERRMSG keyword is set, 
		UTC2TAI returns an integer scalar equal to -1.

 Category    :	None.

 Prev. Hist. :	None.  However, the concept of "internal" and "external" time
		is based in part on the Yohkoh software by M. Morrison and G.
		Linford, LPARL.

 Written     :	William Thompson, GSFC, 13 September 1993.

 Modified    :	Version 1, William Thompson, GSFC, 21 September 1993.
		Version 2, William Thompson, GSFC, 14 November 1994
			Changed .DAY to .MJD
		Version 3, Donald G. Luttermoser, GSFC/ARC, 3 January 1995
			Added the keyword ERRMSG.
		Version 4, Donald G. Luttermoser, GSFC/ARC, 30 January 1995
			Added ERRMSG keyword to internally called procedures.
			Made the error handling routine more robust.  Note
			that this procedure can handle both scalars and
			vectors as input.

 Version     :	Version 4, 30 January 1995
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : UTPLOT
               
 Purpose     : To plot time series data with sensible time axis labelling.
               
 Explanation : Uses the routine DEF_UTPLOT to manipulate the IDL plotting
               variables to set up sensible time axis labels and intervals.
               After the setup the data are plotted with a normal call to 
               the routine PLOT.
               
 Use         : IDL> utplot,x,y,timerange=[] + normal plot keywords.
    
 Inputs      : x - the time variable.  May be either an array of CDS internal
                                       time structures (as produced by the 
                                       routine STR2UTC, say) or...
 
                                       a string array of date/times in a 
                                       format translatable by STR2UTC.

               y - the data value to be plotted.

               
 Opt. Inputs : Various keywords.
               
 Outputs     : None
               
 Opt. Outputs: None
               
 Keywords    : timerange  - a 2-element array each element is either a CDS
                            internal time structure or a CDS date/time string.
                            Note that this time range is still adjusted 
                            slightly for actual plotting unless the keyword
                            xstyle=1 is specified.

               dmy        - if the x-variable is a list of date/time strings
                            this keyword must be used if they are in the
                            format dd-mm(m)-yyyy as opposed to the CDS 
                            'official' format of yyyy-mm-dd

               + other standard plot keywords

 Calls       : DEF_UTPLOT
               STR2UTC
               UTC2SEC
               SEC2UTC
               VCHECK


 Common      : cds_utplot_com  (for passing of time axis offset to outplot)
               
 Restrictions: The MJD of any dates used must be positive.
               Any 2-character year specifications are translated as being
               between 1950 and 2049 (use 4-characters as necessary).

               The time array passed to UTPLOT must be in ascending order
               of time - sort it if necessary!

 Side effects: None
               
 Category    : Data display, plotting
               
 Prev. Hist. : This is a severely trimmed version of the old UTPLOT as used on
               Yohkoh and developed by Tolbert, Schwartz and Morrison.
               I may have trimmed too much, please let me know.

 Written     : This version for CDS by C D Pike, RAL, 20-Apr-94
               
 Modified    : Version 1, C D Pike, RAL, 20-Apr-94
		Version 2, William Thompson, GSFC, 14 November 1994
			Modified .DAY to .MJD

 Version     : Version 2, 14 November 1994
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : UTSTRING
               
 Purpose     : To overprint a string on a UTPLOT graph
               
 Explanation : Converts input x-variable to seconds, applies the time offset
               stored in common and overprints data on a plot created by
               UTPLOT.
               
 Use         : IDL> utstring, x, y, string
    
 Inputs      : x - the time location.  May be either an array of CDS internal
                                       time structures (as produced by the 
                                       routine STR2UTC, say) or...
 
                                       a string array of date/times in a 
                                       format translatable by STR2UTC.

               y - the data value location of the text

               string - the string to print on the plot
               
 Opt. Inputs : Various keywords.
               
 Outputs     : None
               
 Opt. Outputs: None
               
 Keywords    : dmy         - if the x-variable is a list of date/time strings
                             this keyword must be used if they are in the
                             format dd-mm(m)-yyyy as opposed to the CDS 
                             'official' format of yyyy-mm-dd

               charsize    - usual character size parameter
               orientation - usual character orientation parameter


 Calls       : STR2UTC
               UTC2SEC
               SEC2UTC
               VCHECK


 Common      : cds_utplot_com  (for passing of time axis offset to outplot)
               
 Restrictions: Any 2-character year specifications are translated as being
               between 1950 and 2049 (use 4-characters as necessary).

               
 Side effects: None
               
 Category    : Data display, plotting
               
 Prev. Hist. : None
       

 Written     : C D Pike, RAL, 3-Feb-95
               
 Modified    : 

 Version     : Version 1, 3-Feb-95
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : VALID_NUM()
               
 Purpose     : Check if a string is a valid number representation.
               
 Explanation : The input string is parsed for characters that may possibly
               form a valid number.  It is more robust than simply checking
               for an IDL conversion error because that allows strings such
               as '22.3qwert' to be returned as the valid number 22.3
               See also the original NUM_CHK which returns the status in 
               the opposite sense.

 Use         : IDL> status = valid_num(string  [,value]  [,/integer])
    
 Inputs      : string  -  the string to be tested
               
 Opt. Inputs : None
               
 Outputs     : The function returns 1 for valid, 0 for invalid number
               
 Opt. Outputs: value	- The value the string decodes to.  This will be
			  returned as a double precision number unless /INTEGER
			  is present, in which case a long integer is returned.
               
 Keywords    : Integer   -  if present code checks specfically for an integer.

 Calls       : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Utilities, Numerical
               
 Prev. Hist. : Small changes from NUM_CHK by Andrew Bowen, 
                                             Tessella Support Services, 8/3/93

 Written     : CDS version by C D Pike, RAL, 24-May-93
               
 Modified    : Version 1, C D Pike, RAL, 24-May-93
		Version 2, William Thompson, GSFC, 14 October 1994
			Added optional output parameter VALUE to allow
			VALID_NUM to replace STRNUMBER in FITS routines.

 Version     : Version 1  24-May-93
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:	
       VALID_TIME()

 PURPOSE:
       To test if the given time has the valid format

 EXPLANATION:
       
 CALLING SEQUENCE: 
       Result = valid_time(time [, err])

 INPUTS:
       time - Any date/time format

 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       Result - 1 if the time format is valid, 0 otherwise

 OPTIONAL OUTPUTS:
       ERROR  - A string scalar containing error message. If the time format
                is correct, ERROR will be a null string

 KEYWORD PARAMETERS: 
       None.

 CALLS:
       ANYTIM2UTC

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       
 PREVIOUS HISTORY:
       Written May 5, 1995, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 1, created, Liyun Wang, GSFC/ARC, May 5, 1995

 VERSION:
       Version 1, May 5, 1995
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : VCHECK()
               
 Purpose     : Check if variable exists and return optional default if not.
               
 Explanation : Two parameters can be supplied.  If the first is defined, its
               value is returned.  If the first is not defined the function
               returns the value of the second (if it is defined) or zero if
               it is not.  If the first parameter is not defined and the 
               second is not supplied, a zero value is returned.
               
 Use         : IDL> a = vcheck(x,x_default)
    
 Inputs      : x   -  variable to be checked
               
 Opt. Inputs : x_default - the value to assign to function value if first
                           parameter does not exist.
               
 Outputs     : Function returns value as explained above.
               
 Opt. Outputs: None
               
 Keywords    : None

 Calls       : None

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Utilities
               
 Prev. Hist. : From anonymous Yohkoh idea.

 Written     : C D Pike, RAL,  20-Apr-94
               
 Modified    : 

 Version     : Version 1, 20-Apr-94
;-
;+
 Project     : SOHO - CDS

 Name        : 
	VEL_STRETCH
 Purpose     : 
	Stretch velocity color tables, either alone or combined.
 Explanation : 
	Stretches velocity color tables so that zero velocities stay grey, and
	positive and negative velocities scale together.

	New red, green, and blue vectors are created by linearly interpolating
	the vectors in the COLORS or COMBINE_COLORS common block from -HIGH to
	HIGH.  The original vectors in the COMBINE_COLORS common block are not
	changed.

	If NO parameters are supplied, the original color tables are restored.

 Use         : 
	VEL_STRETCH, HIGH  [, GAMMA ]

	The following example shows how to put an intensity image I using color
	table #3 next to a velocity image V using the velocity color table, and
	then stretch the two color tables independently.
 
	LOADCT,3			      ;Select intensity color table
	COMBINE_VEL			      ;Combine with velocity table
	PUT,I,1,2,/COMBINED		      ;Display intensity image on left
	PUT,V,2,2,/VELOCITY,/COMBINED	      ;And velocity image on right
	INT_STRETCH,10,150		      ;Stretch intensity table
	VEL_STRETCH,0.8,/COMBINED	      ;Stretch velocity table

 Inputs      : 
	HIGH	= The highest scaled velocity value to use.  Can be a number
		  between 0 and 1.  If omitted, then 1 is assumed.
 Opt. Inputs : 
	GAMMA	= Gamma correction factor.  If this value is omitted, 1.0 is
		  assumed.  Gamma correction works by raising the color indices
		  to the GAMMA power, assuming they are scaled into the range 0
		  to 1.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	COMBINED= If set, then the lower part of a combined color table is
		  stretched, rather than the entire color table.
	DISABLE	= If set, then TVSELECT is not called.
 Calls       : 
	IM_KEYWORD_SET, TVSELECT, TVUNSELECT
 Common      : 
	COLORS	    = The common block that contains R, G, and B color tables
		      loaded by LOADCT, HSV, HLS and others.
	COMBINE_COL = The common block containing the upper and lower color
		      tables, as loaded by COMBINE_COLORS.
 Restrictions: 
	The velocity color tables must be loaded by LOAD_VEL or COMBINE_VEL
	before calling VEL_STRETCH.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	The values of the current color tables in common block COLORS is
	changed.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, Oct. 1992, from STRETCH by David M. Stern.
 Written     : 
	William Thompson, GSFC, October 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 4 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 4 May 1993.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	WDISPLAY
 Purpose     : 
	Displays images in a window all their own, sized to fit.
 Explanation : 
	A window is created with the same size as the image to be displayed.
	The image is then displayed with EXPAND_TV, and the default window is
	reset to the previous window.
 Use         : 
	WDISPLAY, IMAGE
 Inputs      : 
	IMAGE	= Image to be displayed.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	NOSCALE  = If set, then the command TV is used instead of TVSCL to
		   display the image.
	WINDOW	 = Window to use to display the image.  The action that this
		   program takes depends on the value of this parameter.

			Value		Action

			Undefined	An arbitrary free window is created.
			Negative	An arbitrary free window is created.
			0 - 31		The specified window number is used.
			32 or above	The window specified is deleted, and
					another arbitrary free window is
					created.

		   The window used is also returned as an output value in this
		   parameter.

	RESIZE	 = If set, then the image will be resized up or down by integer
		   factors to best fit within the display.  Unless RESIZE or
		   one of the other size related keywords are set, then the
		   image is displayed at its true pixel size.
	NOEXACT	 = If set, then non-integer factors are allowed.
	SIZE	 = If passed and positive, then used to determine the scale of
		   the image.  Returned as the value of the image scale.
	SMOOTH	 = If set, then the image is expanded with bilinear
		   interpolation.
	MISSING	 = Value flagging missing pixels.  These points are scaled to
		   zero.  Ignored if NOSCALE is set.
	MAX	 = The maximum value of ARRAY to be considered in scaling the
		   image, as used by BYTSCL.  The default is the maximum value
		   of ARRAY.
	MIN	 = The minimum value of ARRAY to be considered in scaling the
		   image, as used by BYTSCL.  The default is the minimum value
		   of ARRAY.
	TOP	 = The maximum value of the scaled image array, as used by
		   BYTSCL.  The default is !D.N_COLORS-1.
	VELOCITY = If set, then the image is scaled using FORM_VEL as a
		   velocity image.  Can be used in conjunction with COMBINED
		   keyword.  Ignored if NOSCALE is set.
	COMBINED = Signals that the image is to be displayed in one of two
		   combined color tables.  Can be used by itself, or in
		   conjunction with the VELOCITY or LOWER keywords.
	LOWER	 = If set, then the image is placed in the lower part of the
		   color table, rather than the upper.  Used in conjunction
		   with COMBINED keyword.
	RELATIVE = Size of area to be used for displaying the image, relative
		   to the total size available.  Must be between 0 and 1.
		   Default is 1.  Ignored unless RESIZE or NOEXACT is set.
	ORIGIN	 = Two-element array containing the coordinate value in
		   physical units of the center of the first pixel in the
		   image.  If not passed, then [0,0] is assumed.
	SCALE	 = Pixel scale in physical units.  Can have either one or two
		   elements.  If not passed, then 1 is assumed in both
		   directions.
	DATA	 = If set, then immediately activate the data coordinates for
		   the displayed image.
	TITLE	 = Window title.
 Calls       : 
	EXPAND_TV, GET_IM_KEYWORD, IM_KEYWORD_SET, SETWINDOW
 Common      : 
	None.
 Restrictions: 
	On SunView displays, the image must be small enough to fit within the
	display size available.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, Nov. 1992, integrated with SERTS image display
				     package.
 Written     : 
	William Thompson, GSFC, 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 4 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 2 September 1993.
		Added ORIGIN, SCALE and DATA keywords.
	Version 3, William Thompson, GSFC, 22 December 1993.
		Added TITLE keyword.
	Version 4, William Thompson, GSFC, 1 March 1993.
		Added support for DOS.
 Version     : 
	Version 4, 1 March 1994.
;-
;+
 Project     :	SOHO - CDS

 Name        :	WEOF

 Purpose     :	Emulates the VMS WEOF routine on UNIX machines.

 Explanation :	Emulates the VMS WEOF routine on UNIX machines.

		*** Unix only ***

 Use         :	WEOF, UNIT

 Inputs      :	UNIT = Tape unit number.  Tape drives are selected via the UNIX
		       environment variables "MT1", "MT2", etc.  The desired
		       tape drive is thus specified by numbers, as in VMS.
		       Must be from 0 to 9.

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	CHECK_TAPE_DRV

 Common      :	None.

 Restrictions:	The environment variable "MTn", where n corresponds to the
		variable UNIT, must be defined.  E.g.,

			setenv MT0 /dev/nrst0

		Requires IDL v3.1 or later.

 Side effects:	The device file is opened.

 Category    :	Utilities, I/O, Tape.

 Prev. Hist. :	VERSION 1, R. W. Thompson 11/30/89
		William Thompson, Apr 1991, rewrote to better emulate VMS
			version.

 Written     :	R. W. Thompson, GSFC/IUE, 30 November 1989.

 Modified    :	Version 1, William Thompson, GSFC, 21 December 1993.
			Rewrote to use IOCTL.

 Version     :	Version 1, 21 December 1993.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : WHERE_TAG()
               
 Purpose     : Select subscripts of elements in structure array. 
               
 Explanation : Searches the input structure for the nominated tag name
               and returns the index of those tags whose value is within
               the range set or whose value matches that requested.
               
 Use         : IDL> w = where_tag(str, TAG_NAME="tag_name", RANGE=[-1,2] )
		IDL> w = where_tag(str, TAG_NAME="tag_name", VAL=0 )
		IDL> w = where_tag(str, TAG_NAME="tag_name", VAL=[1,2,3,4] )
    
 Inputs      : Str    -  structure array to search.

               
 Opt. Inputs : None
               
 Outputs     : Function returns indices found
		Nfound = # of occurences found.
               
 Opt. Outputs: None
               
 Keywords    : TAG_NAME   = string specifying Tag Name
               TAG_NUMBER = otherwise give the Tag Number,
               RANGE      = [min,max] range to search for in Struct,
               VALUES     = one or array of numbers to match for in Str.
               ISELECT    = specifies indices to select only part of 
                            structure array, (use it to recycle subscripts 
                            from previous searches).
	        /NOPRINT   = suppress informational messages about nothing 
                            found.

 Calls       : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Utilities, Structures
               
 Prev. Hist. :

 Written     : Written 1990 Frank Varosi STX @ NASA/GSFC
               
 Modified    : CDS version C D Pike, RAL, 8-Jun-93
               Fixed it to stop printing "Tag <xxx> not found" even when
               /noprint given.  CDP, 30-Sep-94

 Version     : Version 2, 30-Sep-94
;-
;+
 Project     : SOHO - CDS

 Name        : 
	WHERENAN()
 Purpose     : 
	Finds positions of IEEE NaN values.
 Explanation : 
	Finds the positions of all values within an array that correspond to
	the IEEE NaN (not-a-number) special values.  The bit patterns of the
	numbers being tested are compared against the IEEE NaN standard.
 Use         : 
	Result = WHERENAN( ARRAY [, COUNT ] )
 Inputs      : 
	ARRAY	= Array to test against the IEEE NaN special values.  Must be
		  of either floating point, double-precision, or complex type.
 Opt. Inputs : 
	None.
 Outputs     : 
	The result of the function is the indices of all values of ARRAY
	corresponding to the IEEE NaN specification, similar to the IDL WHERE
	function.
 Opt. Outputs: 
	COUNT	= Number of values found corresponding to IEEE NaN.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	None.
 Restrictions: 
	ARRAY must be of type float, double-precision, or complex.
 Side effects: 
	If no NaN values are found, or if ARRAY is not of type float, double
	precision, or complex, then -1 is returned, and COUNT is set to 0.
 Category    : 
	Utilities, Operating System.
 Prev. Hist. : 
	William Thompson, Feb. 1992.
	William Thompson, Oct. 1992, fixed bug regarding order of bytes on VAX
		machines.
 Written     : 
	William Thompson, GSFC, February 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 12 April 1993.
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       WHICH

 PURPOSE:
       Search for and print file or routine in IDL !path

 EXPLANATION:
       Use to find where IDL finds a program file, and, if
	multiple definitions exist, which is loaded (the first
	one). Splits path into all different directories,
	searches for a file with the given NAME + '.PRO'.

 CALLING SEQUENCE:
       WHICH, NAME

 INPUTS:
       NAME - Name of the routine to search for (string scalar).

 OPTIONAL INPUTS:
       None.

 OUTPUTS:
       None.

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS:
       ALL    - Report all occurrences if set. Usually WHICH reports the
                first occurrence of a found routine (which is to be
                executed by IDL). WHICH can take a while, especially on
                VMS system, to search through all directories (and text
                libraries on VMS system) if ALL is set. ALL is
                automatically set if SEARCH is set.
       SEARCH - Turn on the search mode, if set, that would match any
                given string pattern found in the path.

 CALLS:
       CONCAT_DIR, STR_CHOP, GREP

 COMMON BLOCKS:
       WHICH -- Mainly for speeding things up

 RESTRICTIONS:
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       General utility

 PREVIOUS HISTORY:
       Written Stein Vidar Haugan, 1993

 MODIFICATION HISTORY:
       19 May, 1994, SVHH, Doc. added
	21 May, 1994, SVHH, Version 2, with on_error,2 and 'Use:'
       Liyun Wang, GSFC/ARC, September 20, 1994
          Added IDL internal routine checkings.
       Liyun Wang, GSFC/ARC, October 5, 1994
          Current directory also gets searched now
       Version 3, Liyun Wang, GSFC/ARC, December 16, 1994
          Made it capable of finding files in text libraries on VMS system
          Added the ALL keyword
       Version 4, Liyun Wang, GSFC/ARC, January 23, 1995
          Added the SEARCH keyword
       Version 5, Liyun Wang, GSFC/ARC, January 24, 1995
          Used an undocumented IDL function routine ROUTINE_NAMES to get IDL
             intrinsic routine names.

 VERSION:
       Version 5, January 24, 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	WIDG_HELP

 Purpose     :	Widget to select help topics.

 Explanation :	Create a widget that lists and displays the help topic from
		which the user may select.

 Use         :	WIDG_HELP, FILENAME

 Inputs      :	FILENAME = The name of a file that contains the help
			   information to display.  This program searches for a
			   file with this name first in the current directory,
			   and then in !PATH, and searches for the name by
			   itself, and with '.hlp' appended after it.

			   The file consists of a series of topic headers
			   followed by a text message about that topic.  The
			   topic headers are differentiated by starting with
			   the "!" character in the first column, e.g.

				!Overview
				This is the overview for the
				topic at hand.

				!Button1
				This is the help explanation
				for button 1

				etc.

			   The program assumes that the first line in the file
			   contains the first topic.  Also, there must be at
			   least one line between any two topics.  Thus,

				!Button2
				!Button3

			   is not allowed, but

				!Button2
				
				!Button3

			   is allowed.  The last topic in the file must have at
			   least one non-topic line after it.

 Opt. Inputs :	None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	GROUP_LEADER = The widget ID of a calling widget. Destroying
			       that widget will kill this widget.

		TITLE	     = The text to be displayed on the widget title
			       bar.  If not passed, then "Widget Help" is used.
               FONT         = Font name for the help text widget. If
                              not passed, the text font is determined
                              by GET_DFONT
               SEP_CHAR     = Character used to differentiate topic
                              headers. The default SEP_CHAR is '!'
               MODAL        = To make this widget program a "blocking one"
		SUBTOPIC     = The initial topic selection to be displayed
			       as the widget pops up.

 Calls       :	FIND_WITH_DEF, DATATYPE, GET_DFONT

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Utilities, Widget

 Prev. Hist. :	Based on PLANHELP by Elaine Einfalt, GSFC (HSTX), April 1994

 Written     :	William Thompson, GSFC, 2 September 1994

 Modified    :	Version 1, William Thompson, GSFC, 2 September 1994
                          P. Brekke, GSFC, 21 September 1994
                                     Text widget width = 60  (was 50)
               Version 2, Liyun Wang, GSFC/ARC, April 3, 1995
                          Added keywords FONT and SEP_CHAR
                          Allowed commentary lines (starting with a ';'
                             in the first column) in help text file
               Version 3, Liyun Wang, GSFC/ARC, May 17, 1995
                          Added keyword MODAL
		Version 4, S.V.H. Haugan, 18-May-1995
			   Added keyword SUBTOPIC (second time around)

 Version     :	Version 4, May 18, 1995
;-
;+
 Project     : SOHO - CDS

 Name        : WIN

 Purpose     : Switch to Microsoft Windows mode.

 Explanation : SETPLOT is called to save and set the system variables.

 Use         : WIN

 Inputs      : None.

 Opt. Inputs : None.

 Outputs     : A message is printed to the screen.

 Opt. Outputs: None.

 Keywords    : None.

 Calls       : SETPLOT

 Common      : None.  But calls SETPLOT, which uses common block PLOTFILE.

 Restrictions: It is best if the routines TEK, REGIS, etc. (i.e.  those
		routines that use SETPLOT) are used to change the plotting
		device.

		In general, the SERTS graphics devices routines use the special
		system variables !BCOLOR and !ASPECT.  These system variables
		are defined in the procedure DEVICELIB.  It is suggested that
		the command DEVICELIB be placed in the user's IDL_STARTUP file.

 Side effects: If not the first time this routine is called, then system
		variables that affect plotting are reset to previous values.

 Category    : Utilities, Devices.

 Prev. Hist. : None.

 Written     : William Thompson, GSFC, 15 June 1993.

 Modified    : Version 1, William Thompson, GSFC, 15 June 1993.

 Version     : Version 1, 15 June 1993.
;-
;+
 PROJECT     : SOHO - CDS

 NAME:
	WRITEFITS
 PURPOSE:
	Write an an IDL array into a disk FITS file.    

 EXPLANATION:  Works with all types of FITS files except random groups

 CALLING SEQUENCE:
	writefits, filename, data [, header, NaNvalue = , /APPEND] 

 INPUTS:
	FILENAME = String containing the name of the file to be written.

	DATA = Image array to be written to FITS file.    If DATA is 
              undefined or a scalar, then only the FITS header (which
              must have NAXIS = 0) will be written to disk

 OPTIONAL INPUT:
	HEADER = String array containing the header for the FITS file.
		 If variable HEADER is not given, the program will generate
		 a minimal FITS header.

 OPTIONAL INPUT KEYWORD:
       NaNvalue - Value in the data array to be set to the IEEE NaN
                 condition.   This is the FITS representation of undefined
                 values 
       APPEND - If this keyword is set then the supplied header and data
                array are assumed to be an extension and are appended onto
                the end of an existing FITS file.    Note that the primary
                header in the existing file must already have an EXTEND
                keyword to indicate the presence of an FITS extension.

 OUTPUTS:
	None

 CALLS:
       SXADDPAR, SXDELPAR, CHECK_FITS, HOST_TO_IEEE, HEADFITS

 RESTRICTIONS:
       (1) It recommended that BSCALE and BZERO not be used (or set equal
           to 1. and 0) with REAL*4 or REAL*8 data.
       (2) WRITEFITS will remove any group parameters from the FITS header

 EXAMPLE:
       Write a randomn 50 x 50 array as a FITS file creating a minimal header.

       IDL> im = randomn(seed, 50, 50)        ;Create array
       IDL> writefits, 'test', im             ;Write to a FITS file "test"

 PROCEDURES USED:
       CHECK_FITS, HOST_TO_IEEE, SXDELPAR, SXADDPAR, SXPAR

 MODIFICATION HISTORY:
	WRITTEN, Jim Wofford, January, 29 1989
       MODIFIED, Wayne Landsman, added BITPIX = -32,-64 support for UNIX
       Use new BYTEODER keywords 22-Feb-92
       Modify OPENW for V3.0.0   W. Landsman       Dec 92
       Work for "windows"   R. Isaacman            Jan 93
	More checks for null data                   Mar 94
      Version 1, Liyun Wang, GSFC/ARC, September 19, 1994
         Incoporated into CDS library
 Version:
      Version 1, September 19, 1994
;-
;+
 Project     :	SDAC

 Name        :	X2GIF

 Purpose     :	read and write X window to GIF file

 Explanation :	Uses TVRD to grab window

 Use         :	X2GIF,FILE
              
 Inputs      :	FILE = GIF file name

 Opt. Inputs : R, G, B = color table values

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	
               WINDEX = index of window to be plotted
               XSIZE, YSIZE = window size to select [def = whole window]
               TITLE = title for GIF file
               XPOS, YPOS = position of title
               PSIZE = extra keywords for xyouts

 Calls       :	None.

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Graphics

 Prev. Hist. :	None.

 Written     :	Dominic Zarro (ARC)

 Version     :	Version 1.0, 1 July 1994
;-
;+
 Project     :	SOHO/CDS

 Name        : XACK

 Purpose     : Make user acknowledge an action

 Use         : xack

 Inputs      : 

 Opt. Inputs : ARRAY = message to user

 Outputs     : None.

 Keywords    : 
               GROUP = widget ID of calling widget.
               MODAL = set to make calling widget insensitive.
               SPACE = lines of border space surrounding message text.
               XOFF,YOFF = pixel (X,Y) offsets relative to calling widget.
               INSTRUCT = optional instruction to supersede "Acknowlege" 
 Explanation :

 Calls       : None.

 Common      : None.

 Restrictions: None.

 Side effects: None.

 Category    : Widgets

 Prev. Hist. : None.

 Written     :	Zarro (ARC/GSFC) 12 October 1994

 Version     : 1
;-
;+
 Project     :	SDAC

 Name        :	XALIVE

 Purpose     :	To check if an X widget is alive

 Explanation :	So obvious, that explaining it will take more
               lines than the code.

 Use         :	ALIVE=XALIVE(ID)
              
 Inputs      :	ID = widget id to check

 Opt. Inputs : None.

 Outputs     :	1/0 if alive/dead

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Widgets

 Prev. Hist. :	None.

 Written     :	Dominic Zarro (ARC)

 Version     :	Version 1.0, 18 September 1993
;-
;+
 PROJECT:
       SOHO - CDS/SUMER

 NAME:
       XANSWER()

 PURPOSE:
       Popup widget to get a Yes/No answer for a given question

 EXPLANATION:

 CALLING SEQUENCE:
       Result = xanswer(question [,/str])

 INPUTS:
       QUESTION - A string scalar or vector for the question presented to the
                  user

 OPTIONAL INPUTS:
       FLASH - Make the question flash for number of FLASH times
       RATE  - Flashing rate in seconds; default: 0.25 sec.

 OUTPUTS:
       RESULT - A numerical value of 1 or 0, or a string scalar with a value
                'Y' or 'N' if the keyword STR is set

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS:
       STR        - Set this keyword to make string type return
       BEEP       - Make a beep if set
       CENTER     - Centerize the question
       RIGHT      - Right justify the question
       SPACE      - Number of line to space text; default to 3
       JUST_REG   - Just register with xmanager
       XOFF, YOFF - Pixel offset relative to caller
       FONT       - Font for text widget

 CALLS:
       DATATYPE, BELL, JUSTIFY

 COMMON BLOCKS:
       None.

 RESTRICTIONS:
       None.

 SIDE EFFECTS:
       All events are trapped and all other widgets are desensitized until an
       option is chosen. (The keyword MODAL is used with xmanager)

 CATEGORY:

 PREVIOUS HISTORY:
       Written March 8, 1995, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 1, created, Liyun Wang, GSFC/ARC, March 8, 1995
       Version 2, Liyun Wang, GSFC/ARC, May 2, 1995
          Added INSTRUCT keyword
       Version 3, Liyun Wang, GSFC/ARC, May 2, 1995
          Got rid of common block

 VERSION:
       Version 3, May 2, 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	XBLINK
 Purpose     : 
	Blinks two images together by using XMOVIE.
 Explanation : 
	XMOVIE is called to blink the two images together.
 Use         : 
	XBLINK, ARRAY1, ARRAY2  [, RATE ]
 Inputs      : 
	ARRAY1	 = First image to be blinked against the second image.
	ARRAY2	 = Second image.  Must have the same dimensions as the first
		   image.
 Opt. Inputs : 
	RATE	= Optional rate of display.  The rate is a value between 0 and
		  100 that gives the speed that the animation is displayed.
		  The fastest animation is with a value of 100 and the slowest
		  is with a value of 0.  The default value is 10 if not
		  specified.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	NOSCALE  = If set, then the images are not scaled.
	MISSING	 = Value flagging missing pixels.  These points are scaled to
		   zero.
	MAX	 = The maximum value to be considered in scaling the
		   images, as used by BYTSCL.  The default is the maximum value
		   of IMAGES.
	MIN	 = The minimum value of IMAGES to be considered in scaling the
		   image, as used by BYTSCL.  The default is the minimum value
		   of IMAGES.
	TOP	 = The maximum value of the scaled image array, as used by
		   BYTSCL.  The default is !D.N_COLORS-1.
	VELOCITY = If set, then the image is scaled using FORM_VEL as a
		   velocity image.  Can be used in conjunction with COMBINED
		   keyword.  Ignored if NOSCALE is set.
	COMBINED = Signals that the image is to be displayed in one of two
		   combined color tables.  Can be used by itself, or in
		   conjunction with the VELOCITY or LOWER keywords.
	LOWER	 = If set, then the image is placed in the lower part of the
		   color table, rather than the upper.  Used in conjunction
		   with COMBINED keyword.
	RESIZE	 = If set, then the image will be resized up or down by integer
		   factors to best fit within the display.  Unless RESIZE or
		   one of the other size related keywords are set, then the
		   image is displayed at its true pixel size.
	NOEXACT	 = If set, then non-integer factors are allowed.
	SIZE	 = If passed and positive, then used to determine the scale of
		   the image.  Returned as the value of the image scale.
	SMOOTH	 = If set, then the image is expanded with bilinear
		   interpolation.
	RELATIVE = Size of area to be used for displaying the image, relative
		   to the total size available.  Must be between 0 and 1.
		   Default is 1.  Ignored unless RESIZE or NOEXACT is set.
 Calls       : 
	XMOVIE
 Common      : 
	None.
 Restrictions: 
	ARRAY1 and ARRAY2 must have the same dimensions.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	None.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	Modified from BLINK.
 Written     : 
	William Thompson, GSFC, 7 September 1994
 Modified    : 
	Version 1, William Thompson, GSFC, 7 September 1994
 Version     : 
	Version 1, 7 September 1994
;-
;+
 Project     : SDAC

 Name        : 
	XDOC
 Purpose     : 
	Front end to online documentation software.
 Explanation : 
	Provides online documentation for IDL procedures found in the IDL
	search path.  This procedure decides whether the graphics device
	supports widgets, in which case it calls SCANPATH; otherwise it calls
	DOC_MENU.
 Use         : 
	XDOC		;For prompting.
	XDOC, NAME	;Extract documentation for procedure NAME.
 Inputs      : 
	None required.
 Opt. Inputs : 
	NAME = String containing the name of the procedure.
 Outputs     : 
	PROC = string array with latest selected procedure text.
 Opt. Outputs: 
	None.
 Keywords    : 
       See SCANPATH
 Calls       : 
	DOC_MENU, SCANPATH, HAVE_WIDGETS
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	None.
 Category    : 
	Documentation, Online_help.
 Written     : 
	Dominic Zarro, (ARC/GSFC), 1991.
 Modified    : 
	Version 1, William Thompson, GSFC, 23 April 1993.
		Changed test for widgets and incorporated into CDS library.
	Version 2, William Thompson, GSFC, 24 June 1993.
		Added ON_ERROR statement to correct problem on VMS machines.
       Version 3, Dominic Zarro, (ARC/GSFC), 1 August 1994.
               Changed name from DOC to XDOC and added keyword-inheritance
               to inherit keywords from SCANPATH.
       Version 3.1, Dominic Zarro (ARC/GSFC), 18 September 1994.
               Added PROC argument to return text of last selected procedure.
       Version 3.2, Dominic Zarro (ARC/GSFC), 12 December 1994.
               Added check for IDL release version.
 Version     : 
	Version 3.2, 12 December 1994.
;-
;+
 Project     : SOHO - CDS

 Name        : 
	XGAMMA
 Purpose     : 
	Widget interface to control the screen brightness.
 Explanation : 
	A widgets-based interface to the routine GAMMA_CT,/INTENSITY to control
	the brightness of the screen.
 Use         : 
	XGAMMA
 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	None.
 Calls       : 
	None.
 Common      : 
	COLORS:  The IDL colors common block.
	XGAMMA:  Stores the widget labels for event handling.
 Restrictions: 
	Only useful on displays with widget support.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	If the "Read from screen" button is pressed, then the color tables in
	the COLORS common block are replaced with whatever color tables are
	currently in use, evaluated by interrogating the screen.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, September 1992.
 Written     : 
	William Thompson, GSFC, September 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 4 May 1993.
		Incorporated into CDS library.
 Version     : 
	Version 1, 4 May 1993.
;-
;+
 Project     :	SDAC

 Name        :	XHIDE

 Purpose     :	To hide (map) an X widget

 Explanation :	So obvious, that explaining it will take more
               lines than the code.

 Use         :	XHIDE,ID
              
 Inputs      :	ID = widget id to hide

 Opt. Inputs : None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Useful stuff

 Prev. Hist. :	None.

 Written     :	Dominic Zarro (ARC)

 Version     :	Version 1.0, 18 September 1993
;-
;+
 Project     :	SOHO - CDS

 Name        : XINPUT

 Purpose     : Allow user to input text

 Use         : xinput,text

 Inputs      : None.

 Opt. Inputs : INSTRUCT = instructions for user

 Outputs     : TEXT = string response text entered by user

 Opt. Outputs: None.

 Keywords    : 
              GROUP = group leader of caller
              MODAL = modal (make caller insensitive)
              XOFF,YOFF = device (x,y) offsets of XINPUT base relative to caller
              TFONT = text widget font 
              BFONT = button widget font
              YSIZE = ysize of input text widget
              STATUS = 0/1 if CANCELLED/ACCEPTED
 Explanation :

 Calls       : None.

 Common      : None.

 Restrictions: None.

 Side effects: None.

 Category    : Widgets

 Prev. Hist. : None.

 Written     :	Zarro (ARC/GSFC) 23 October 1994

 Modified:   : Liyun Wang, GSFC/ARC, March 24, 1995, added MAX_LEN keyword
               Liyun Wang, GSFC/ARC, March 29, 1995, Made the widget's
                  width be at least MAX_LEN if MAX_LEN is passed

 Version     : Version 4, 30-Apr-95

;-
;+
 NAME:
		XINTERANIMATE

 PURPOSE:
	Display animated sequence of images using X-windows Pixmaps.
	The speed and direction of the display can be adjusted using 
	the widget interface.

 CATEGORY:
	Image display, widgets.

 CALLING SEQUENCE:
	To initialize:
		XINTERANIMATE, SET = [Sizex, Sizey, Nframes]

	To load a single image:
		XINTERANIMATE, IMAGE = Image, FRAME = Frame_Index

	To load a single image that is already displayed in an existing window:
		XINTERANIMATE, FRAME = Frame_index, $
			WINDOW = [Window_Number [, X0, Y0, Sx, Sy]]
	(This technique is much faster than reading back from the window.)

	To display the animation after all the images have been loaded:
		XINTERANIMATE [, Rate] 

	To close and deallocate the pixmap/buffer (which also takes place
	automatically when the user presses the "Done With Animation"
	button or closes the window with the window manager):
		XINTERANIMATE, /CLOSE

 OPTIONAL INPUTS:
	Rate:	A value between 0 and 100 that represents the speed of the 
		animation as a percentage of the maximum display rate.
		The fastest animation is with a value of 100 and the slowest
		is with a value of 0.  The default animation rate is 100.  
		The animation must be initialized using the SET
		keyword before calling XINTERANIMATE with a rate value.

 KEYWORD PARAMETERS:
	CLOSE:	Set this keyword to delete the offscreen pixwins and Widget, 
		freeing storage.

	CYCLE: If set, cycle.  Normally, frames are displayed going either
		forward or backwards.  If CYCLE is set, reverse direction
		after the last frame in either direction is displayed.
		Provide this keyword with the SET keyword.

	FRAME:	The frame number when loading frames.  This keyword only has
		an effect when used in conjunction with the SET keyword.
		FRAME must be set to a number in the range 0 to Nframes-1.

	GROUP:	The widget ID of the widget that calls XINTERANIMATE.  When 
		this ID is specified, the death of the caller results in the 
		death of XINTERANIMATE.

	IMAGE:	A single image to be loaded at the animation position given 
		by FRAME.  The keyword parameter FRAME must also be specified.

	KEEP_PIXMAPS: If TRUE, XINTERANIMATE doesn't destroy the animation
		pixmaps when it is killed. Calling it again without
		going through the SET and LOAD steps will cause the same
		animation to play without the overhead of creating
		the pixmaps.
	ORDER:	Set this keyword to display images from the top down instead
		of the default bottom up.  This keyword is only used when 
		loading images.

     SHOWLOAD:	Set this keyword (in conjunction with the SET keyword) to 
		display each frame and update the frame slider as frames are 
		loaded.

	SET:	This keyword initializes XINTERANIMATE.  SET should be equated
		to a 3-element integer vector containing the following 
		parameters:
		  Sizex, Sizey:	The width and height of the images to be 
				displayed, in pixels.

		  Nframes:	The number of frames in the animated sequence 
				(since XINTERANIMATE is an animation routine, 
				Nframes must be at least 2 frames).

	TITLE:	A string to be used as the title of the widget.  If this 
		keyword is not specified, the title is set to "XInterAnimate" 
		This keyword has an effect only when used in conjunction with
		the SET keyword).

	TRACK: If set, the frame slider tracks the current frame.  Default
		is not to track.  Provide this keyword with the SET keyword.

	WINDOW:	When this keyword is specified, an image is copied from an 
		existing window to the animation pixmap.  When using X 
		windows, this technique is much faster than reading
		from the display and then calling XINTERANIMATE with a 2D 
		array.

		The value of this parameter is either an IDL window
		number (in which case the entire window is copied),
		or a vector containing the window index and the rectangular 
		bounds of the area to be copied, for example:
		WINDOW = [Window_Number, X0, Y0, Sx, Sy]

      XOFFSET:	The horizontal offset, in pixels from the left of the frame, 
		of the image in the destination window.

      YOFFSET:	The vertical offset, in pixels from the bottom of the frame,
		of the image in the destination window.

 OUTPUTS:
	No explicit outputs.

 COMMON BLOCKS:
	XINTERANIMATE_COM: a private common block.

 SIDE EFFECTS:
	A pixmap and widget are created.

 RESTRICTIONS:
	Only a single copy of XINTERANIMATE can run at a time.

 PROCEDURE:
	When initialized, this procedure creates an approximately square
	pixmap or memory buffer, large enough to contain Nframes of
	the requested size.  Once the images are loaded, using the 
	IMAGE and FRAME keywords, they are displayed by copying the images 
	from the pixmap or buffer to the visible draw widget.

 EXAMPLE:
	Enter the following commands to open the file ABNORM.DAT (a series
	of images of a human heart) and animate the images it contains using
	XINTERANIMATE.  For a more detailed example of using XINTERANIMATE, 
	see the example in the "Using IDL Widgets" chapter of "IDL Basics".
	Read the images into the variable H by entering:

		OPENR, 1, FILEPATH('abnorm.dat', SUBDIR = 'images')
		H = BYTARR(64, 64, 16)
		READU, 1, H
		CLOSE, 1
		H = REBIN(H, 128, 128, 16)

	Initailize XINTERANIMATE with the command:

		XINTERANIMATE, SET=[128, 128, 16], /SHOWLOAD
		
	Load the images into XINTERANIMATE and play the animation by entering:

		FOR I=0,15 DO XINTERANIMATE, FRAME = I, IMAGE = H(*,*,I)
		XINTERANIMATE

 MODIFICATION HISTORY:
	DMS, April, 1990.
	SMR, December, 1990.  	Modified the XANIMATE code to work
				interactively with widgets.

	DMS, March, 1991.	Modified the routine to use individual pixmaps
				for each frame of the animation.  Also added
				the ability to read in from current IDL 
				windows directly into offscreen bitmap.

	SMR, March, 1991.	Modified to use new XMANAGER keyword CLEANUP
				to clean up the offscreen pixmaps when dying.

	SMR, Jan, 1992.		Modified the /CLOSE portion to check for a 
				valid widget before using WIDGET_CONTROL 
				and /DESTROY.

	AB, June 1992		Rewrite using the new CW_ANIMATE compound
				widget. Added the KEEP_PIXMAPS keyword.

       DMZ, December 1994      Added CLEAR_EVENTS and BAD_ID keyword.
;-
;+
 Project     :	SDAC

 Name        :	XKILL

 Purpose     :	To kill a bunch of X widgets

 Explanation :	

 Use         :	XKILL,ID1,ID2,..............ID10
              
 Inputs      :	IDn = widget id to kill

 Opt. Inputs : None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	ALL = if set, then destroy all active widgets
               WAIT = wait specified seconds before killing

 Calls       :	None.

 Common      :	None.

 Restrictions:	Up to 10 specific widgets can be killed

 Side effects:	None.

 Category    :	Widgets

 Prev. Hist. :	None.

 Written     :	Dominic Zarro (ARC)

 Version     :	Version 1.0, 18 September 1993
;-
;+
 Project     :	SOHO/CDS

 Name        : XLIST

 Purpose     : lists structure tags in a list widget.

 Use         : XLIST,STRUCT.

 Inputs      : STRUCT

 Opt. Inputs : None.

 Outputs     : INDEX = selected index of structure array

 Keywords    : 
               wbase  = widget id of parent widget (input/output)
               wlist  = widget id of list widget into which to write (input/output)
               font   = list widget font (def = 'fixed')
               title  = title of parent base
 Explanation :

 Calls       : None.

 Common      : None.

 Restrictions: None.

 Side effects: None.

 Category    : Widgets

 Prev. Hist. : None.

 Written     :	Zarro (ARC/GSFC) 12 October 1994

 Version     : 1
;-
;+
 Project     : SOHO - CDS

 Name        : 
	XLOAD
 Purpose     : 
	Widget control of color tables, with SERTS enhancements.
 Explanation : 
	Provides a graphical interface to allow the user to load one of the
	standard color tables, or the special SERTS velocity color table, and
	to interactively adjust these color tables in various ways.  The user
	can also split the color tables into two parts: an upper and a lower
	section, load different color tables into these two parts, and adjust
	them separately.
 Use         : 
	XLOAD
 Inputs      : 
	None.
 Opt. Inputs : 
	None.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	GROUP	= The widget ID of the widget that calls XLOAD.  When this ID
		  is specified, a death of the caller results in a death of
		  XLOAD.
	SILENT	= Normally, no informational message is printed when a color
		  map is loaded.  If this keyword is present and zero, this
		  message is printed.
	TWO	= If set, then XLOAD goes directly to a split color display.
 Calls       : 
	BSCALE, COMBINE_COLORS, COMBINE_VEL, INT_STRETCH, LOAD_VEL, VEL_STRETCH
 Common      : 
	Uses the standard IDL common block COLORS (as used by LOADCT, etc.), as
	well as COMBINE_COL from COMBINE_COLORS, and it's own XLOAD common
	block.
 Restrictions: 
	The graphics device must support widgets.

	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	The variables in the COLORS and COMBINE_COL common blocks are modified.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, Oct 1992, from XLOADCT by Ali Bahrami and Mark
		Rivers.
	William Thompson, Nov 1992, added "Recenter Gamma Slider" option.
	William Thompson, Mar 1993, fixed bug with "Velocity Options" pull-down
		menu button in Motif.

  The original XLOADCT file contained the following statement:

	Copyright (c) 1991, Research Systems, Inc.  All rights reserved.
		Unauthorized reproduction prohibited.

 Written     : 
	William Thompson, GSFC, October 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 4 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 29 October 1993.
		Added keyword TWO.
	Version 3, William Thompson, GSFC, 31 May 1995
		Removed dependence on obsolete data file.
		Removed bug when R_CURR was not defined.

 Version     : 
	Version 3, 31 May 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	XMATRIX

 Purpose     : Widget display of fields within an arbitrary structure

 Use         : xmatrix,struct,wbase

 Inputs      :
               STRUCT = input structure
               WBASE = parent widget base into which place matrix

 Opt. Inputs : None.

 Outputs     : None.

 Opt. Outputs: None.

 Keywords    :
               NX = # of columns by which to arrange widgets (def=2)
               WTAGS = text widget id's for each tag
               TITLE = optional widget title
               EDITABLE = make fields editable
               XSIZE = optional width for text widgets
 Procedure   :
               Arranges structures in a matrix format with the tag
               name in label widget and the tag value in a text widget.
               If wbase and wtags exist, then widget is just updated
               with input field values. This procedure is called by XSTRUCT

 Calls       : None.

 Common      : None.

 Restrictions:
              Input must be a structure.
              WBASE must be a valid parent base

 Side effects: None.

 Category    : Widgets

 Prev. Hist. : None.

 Written     :	Zarro (ARC/GSFC) 20 August 1994

 Modified    :
       Version 2, Liyun Wang, GSFC/ARC, October 12, 1994
          Made the WIDGET_LABEL right justified by using the 'fixed' font
       Version 3, Zarro, (GSFC/ARC) 8 March, 1994
          Added nested structure display

 VERSION:
       Version 3
;-
;+
 Project     : SOHO - CDS

 Name        : 
	XMOVIE
 Purpose     : 
	Animates a series of images under widget control.
 Explanation : 
	BSCALE is used to scale the images, and XINTERANIMATE is called to
	animate them.
 Use         : 
	XMOVIE, IMAGES  [, RATE ]
 Inputs      : 
	IMAGES	= Three dimensional array of images, in the format
		  (X-dim,Y-dim,Frame).
 Opt. Inputs : 
	RATE	= Optional rate of display.  The rate is a value between 0 and
		  100 that gives the speed that the animation is displayed.
		  The fastest animation is with a value of 100 and the slowest
		  is with a value of 0.  The default value is 100 if not
		  specified.
 Outputs     : 
	None.
 Opt. Outputs: 
	None.
 Keywords    : 
	NOSCALE  = If set, then the images are not scaled.
	MISSING	 = Value flagging missing pixels.  These points are scaled to
		   zero.
	MAX	 = The maximum value to be considered in scaling the
		   images, as used by BYTSCL.  The default is the maximum value
		   of IMAGES.
	MIN	 = The minimum value of IMAGES to be considered in scaling the
		   image, as used by BYTSCL.  The default is the minimum value
		   of IMAGES.
	TOP	 = The maximum value of the scaled image array, as used by
		   BYTSCL.  The default is !D.N_COLORS-1.
	VELOCITY = If set, then the image is scaled using FORM_VEL as a
		   velocity image.  Can be used in conjunction with COMBINED
		   keyword.  Ignored if NOSCALE is set.
	COMBINED = Signals that the image is to be displayed in one of two
		   combined color tables.  Can be used by itself, or in
		   conjunction with the VELOCITY or LOWER keywords.
	LOWER	 = If set, then the image is placed in the lower part of the
		   color table, rather than the upper.  Used in conjunction
		   with COMBINED keyword.
	RESIZE	 = If set, then the image will be resized up or down by integer
		   factors to best fit within the display.  Unless RESIZE or
		   one of the other size related keywords are set, then the
		   image is displayed at its true pixel size.
	NOEXACT	 = If set, then non-integer factors are allowed.
	SIZE	 = If passed and positive, then used to determine the scale of
		   the image.  Returned as the value of the image scale.
	SMOOTH	 = If set, then the image is expanded with bilinear
		   interpolation.
	RELATIVE = Size of area to be used for displaying the image, relative
		   to the total size available.  Must be between 0 and 1.
		   Default is 1.  Ignored unless RESIZE or NOEXACT is set.
	TITLE	 = Widget title for movie display.
	SUBSCRIPTS = The subscripts of the images to display.  The default is
		   to display them all.
 Calls       : 
	BSCALE, WDISPLAY, XINTERANIMATE, EXPTV
 Common      : 
	None.
 Restrictions: 
	In general, the SERTS image display routines use several non-standard
	system variables.  These system variables are defined in the procedure
	IMAGELIB.  It is suggested that the command IMAGELIB be placed in the
	user's IDL_STARTUP file.

	Some routines also require the SERTS graphics devices software,
	generally found in a parallel directory at the site where this software
	was obtained.  Those routines have their own special system variables.

 Side effects: 
	A temporary window is created to display the images as they are loaded.
	A widget controlled window is created to display the images.
 Category    : 
	Utilities, Image_display.
 Prev. Hist. : 
	William Thompson, May 1992.
	William Thompson, August 1992, renamed BADPIXEL to MISSING.
	William Thompson, September 1992, use COMBINED keyword in place of
					  INTENSITY.
 Written     : 
	William Thompson, GSFC, May 1992.
 Modified    : 
	Version 1, William Thompson, GSFC, 4 May 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 6 July 1993.
		Fixed bug with RATE variable.
	Version 3, William Thompson, GSFC, 28 December 1993.
		Modified to call WDISPLAY and EXPTV to display images as they
		are being loaded.  Added keywords RESIZE, NOEXACT, SIZE,
		SMOOTH, RELATIVE.
	Version 4, William Thompson, GSFC, 20 May 1994
		Modified to add XALIGN=0 to EXPTV call, and to temporarily set
		!QUIET=1 during loading of additional images after the first.
	Version 5, William Thompson, GSFC, 8 June 1994
		Modified so that movie widget will have correct width even if
		Motif would otherwise force the window to be wider.
	Version 6, William Thompson, GSFC, 20 June 1995
		Added keywords TITLE and SUBSCRIPTS.
 Version     : 
	Version 6, 20 June 1995
;-
;+
 Project     :	SOHO - CDS

 Name        : XOPT

 Purpose     : present user with menu of options

 Use         : xopt,options

 Inputs      : options = array of options (e.g. ['YES', 'NO'])

 Opt. Inputs : None.

 Outputs     : value = 1 if option selected, 0 otherwise

 Opt. Outputs: None.

 Keywords    : 
              instruct = instructions (string)
              def = def option value
              font = widget font
 Explanation :

 Calls       : None.

 Common      : None.

 Restrictions: None.

 Side effects: None.

 Category    : Widgets

 Prev. Hist. : None.

 Written     :	Zarro (ARC/GSFC) 12 October 1994

 Version     : 1
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : XPL_STRUCT
               
 Purpose     : Explain STRUCTURE tags by browsing help files
               
 Explanation : A pulldown menu is created representing all the
		levels of "introspection" of a structure variable.

		If a tag in a structure is an array, it's "expanded"
		if it's less than SIZE, which by default is set to 30.

		The tags of the structure are linked to their tag names
		and their parent structure names, i.e.,
		
			STC.TAG     ; Tag named "TAG" in structure "STC"
		or      .TAG        ; Tag named "TAG" in anonymous structure.

		These combinations are used to look up help texts via
		WIDG_HELP, and display them on the screen.

 Use         : XPL_STRUCT, DATA_STRUCTURE
    
 Inputs      : DATA_STRUCTURE: Any IDL structure.
               
 Opt. Inputs : None.
               
 Outputs     : None.
               
 Opt. Outputs: None.
               
 Keywords    : ON_BASE : The widget base to put the pulldown button on.
		SIZE    : The maximum size of "expanded" arrays
		FILE    : The data file to inspect for help texts.
			  Default "struct_tags.hlp"
		TITLE   : The title to be associated with the pulldown button
		NOHELP  : Turn off the help facility (behaves like DSP_STRUCT)

 Calls       : DATATYPE(), TRIM(), WIDG_HELP

 Common      : None.
               
 Restrictions: None.
               
 Side effects: During development, XDOC suddenly wouldn't work.
		Could not reproduce it...
               
 Category    : CDS, UTILITY, STRUCTURE
               
 Prev. Hist. : Based on DSP_STRUCT
		Added some more "intelligent" handling of arrays

 Written     : SVHH, 16-May-1995
               
 Modified    : Never

 Version     : 1.0
;-
;+
 PROJECT:
       SOHO - CDS/SUMER

 NAME:
       XSEL_ITEM()

 PURPOSE:
       Select an item from a given string list (similar to XSEL_LIST)

 EXPLANATION:

 CALLING SEQUENCE:
       Result = xsel_item(str_array)

 INPUTS:
       STR_ARRAY -- A string vector that contains the given list

 OPTIONAL INPUTS:
       TITLE -- A title above the displayed item, default to: "Selected Item"
       FONT  -- name of font to be used. Default: 9x15bold

 OUTPUTS:
       Result -- Index of the chosen list. If the operation is canceled, 
                 a -1 is returned.

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS:
       None.

 CALLS:
       DATATYPE, CW_DROPLIST

 COMMON BLOCKS:
       None.

 RESTRICTIONS:
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:

 PREVIOUS HISTORY:
       Written February 27, 1995, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 1, created, Liyun Wang, GSFC/ARC, February 27, 1995
       Version 2, Liyun Wang, GSFC/ARC, May 24, 1995
          Got rid of common block;
          Used CW_DROPLIST compound widget program

 VERSION:
       Version 2, May 24, 1995
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:	
       XSEL_LIST()

 PURPOSE: 
       To select one item from a list.

 EXPLANATION:
       
 CALLING SEQUENCE: 
       Result = XSEL_LIST(options)

 INPUTS:
       OPTIONS -- String array that contains the lists.

 OPTIONAL INPUTS: 
       TITLE=TITLE, Title of the widget. Default: 'XSET_LIST'

 OUTPUTS:
       RESULT -- Selected item (one of elements from the LISTS
                 array). A null string is returned if no selection is
                 made.

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS: 
       INDEX   - Return index of the selected item
                 otherwise the content of the selected item.
       UPDATE  - Set this keyword to make selection widget editable and any
                 new entries will be added to the given OPTIONS
       INITIAL - Initial selection
       STATUS  - 1/0 if Accept/Cancel is chosen

 CALLS:
       POPUP_MSG, XANSWER, GREP, REP_TAG_VALUE, GET_DFONT, GET_CENT_OFF  

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       The given input parameter OPTIONS may be changed if UPDATE keyword is
       set 

 CATEGORY:
       Utility, widget

 PREVIOUS HISTORY:
       Written September 20, 1994, by Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 1, Liyun Wang, GSFC/ARC, September 20, 1994
       Version 2, Liyun Wang, GSFC/ARC, May 19, 1995
          Added UPDATE, INITIAL, and STATUS keywords
          Added a "Remove" button
          Got rid of common block

 VERSION:
       Version 2, May 19, 1995
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : XSELECT
               
 Purpose     : Force the user to select from a list or abort.
               
 Explanation : A menu with the supplied options is generated, as
		well as a DONE-button (to signal completion of the selection)
		and a QUIT-button (to signal abortion of the selection).
               
		Menus can be either nonexclusive or exclusive.
		A default selection can be supplied.

 Use         : XSELECT,OPTIONS,STATUS,ABORT (all 3 parameters needed)
    
 Inputs      : OPTIONS:
			A text array containing the possible selections.

		STATUS:	An integer array containing the default selection,
			STATUS( i ) eq 1 signifies that OPTION( i ) is
			selected by default. Must have same dimensions as
                       OPTIONS parameter.
               
 Opt. Inputs : None.
               
 Outputs     : STATUS:	The resulting selection array. OPTION( i ) eq 1
			signifies selection of option no. i.

		ABORT:	Set to 1 if the user aborted the selection.
               
 Opt. Outputs: None.
               
 Keywords    : TITLE:	String with the title of the window with the menu.
			(default: 'Select options below')
		
		QUIT:	String with the text to go on the QUIT button.
			(default: 'Quit')

		DONE:	String with the text to go on the DONE button.
			(default: 'Done')

		GROUP_LEADER:
			Standard Xmanager/Widget meaning.

		X/YOFFSET: The position of the upper left corner of the
			new base.

		EXCLUSIVE/
		NONEXCLUSIVE:
			The type of base showing the selection buttons.
			Default: NONEXCLUSIVE

		MODAL:	Set to make the selection widget modal. 
			See Side effects.

 Calls       : DATATYPE

 Common      : XSELECT
               
 Restrictions: None.
               
 Side effects: The use of the MODAL keyword causes all widget
		DRAW windows to be blanked out.... Might be fixed
		in later versions of IDL...? (Depending on whether
		they see it as a bug or a feature :-)
               
 Category    : CDS, QuickLook, General
               
 Prev. Hist. : None.

 Written     : Stein Vidar Hagfors Haugan, 18 November 1993
               
 Modified    : SVHH, Version 1.5, 3 June 1994
			Added MODAL and X/YOFFSET keywords.
		PB,   Version 1.6, 24 Aug 1994  
		        Changed button 'Done' to 'Continue'
               CDP,  Upgraded header info and set default xoffset 
                     and yoffset.  14-Feb-95

 Version     : Version 2, 14-Feb-95
;-
;+
 PROJECT:
       SOHO - CDS/SUMER

 NAME:
       XSET_COLOR

 PURPOSE: 
       Change color index interactively

 EXPLANATION:
       
 CALLING SEQUENCE: 
       xset_color, color_var [, min = min, max = max]

 INPUTS:
       COLOR_VAR - Integer, original color index

 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       COLOR_VAR - New color index value

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS: 
       MIN   -- Minimum value of the range, default: 0
       MAX   -- Maximum value of the range, default: !d.n_colors-1
       TITLE -- Title of the widget; default: "Set Color"
       GROUP -- Group ID of an upper widget which would be desensitized if
                GROUP is set upon calling this routine 

 CALLS:
       BELL, DATATYPE

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       Utility, widget

 PREVIOUS HISTORY:
       Written August 18, 1994, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 1, created, Liyun Wang, GSFC/ARC, August 18, 1994
       Version 2, Liyun Wang, GSFC/ARC, May 2, 1995
          Get rid of common block

 VERSION:
       Version 2, May 2, 1995
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       XSET_VALUE

 PURPOSE: 
       Set the value of a variable interactively with a slider.

 EXPLANATION:
       
 CALLING SEQUENCE: 
       xset_value, value [, min = min] [, max = max]

 INPUTS:
       VALUE - Current default value; may be changed upon exit

 OPTIONAL INPUTS: 
       None.

 OUTPUTS:
       VALUE - Updated value

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS: 
       MIN   -- Minimum value of the range (Default: 0)
       MAX   -- Maximum value of the range (Default: 100)
       TITLE -- Title of the widget; default: "Number Picker"
       GROUP -- Group ID of an upper widget on which this one depends

 CALLS:
       BELL, DATATYPE

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       Utilities, Widget

 PREVIOUS HISTORY:
       Written August 18, 1994, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 1, created, Liyun Wang, GSFC/ARC, August 18, 1994
       Version 2, Liyun Wang, GSFC/ARC, May 2, 1995
          Gewt rid of common block

 VERSION:
       Version 2, May 2, 1995
;-
;+
 Project     :	SDAC

 Name        :	XSHOW

 Purpose     :	To show (unmap) an X widget

 Explanation :	So obvious, that explaining it will take more
               lines than the code.

 Use         :	XSHOW,ID
              
 Inputs      :	ID = widget ids to show

 Opt. Inputs : None.

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	None.

 Side effects:	None.

 Category    :	Useful stuff

 Prev. Hist. :	None.

 Written     :	Dominic Zarro (ARC)

 Version     :	Version 1.0, 18 September 1993
;-
;+
 PROJECT:
       SOHO - CDS

 NAME:
       XSHOW_HELP

 PURPOSE: 
       Show help text in a text widget based on its topic

 EXPLANATION:
       
 CALLING SEQUENCE: 
       xshow_help, help_stc, topic [, tbase]

 INPUTS:
       HELP_STC - Help structure created by MK_HELP_STC
       TOPIC    - A string scalar, the tag name in HELP_STC whose
                  value is the corresponding help text
     
 OPTIONAL INPUTS: 
       tbase    - ID of the text widget on which the help text appears

 OUTPUTS:
       None.

 OPTIONAL OUTPUTS:
       None.

 KEYWORD PARAMETERS: 
       None.

 CALLS:
       XTEXT

 COMMON BLOCKS:
       None.

 RESTRICTIONS: 
       None.

 SIDE EFFECTS:
       None.

 CATEGORY:
       
 PREVIOUS HISTORY:
       Written May 12, 1995, Liyun Wang, GSFC/ARC

 MODIFICATION HISTORY:
       Version 1, created, Liyun Wang, GSFC/ARC, May 12, 1995

 VERSION:
       Version 1, May 12, 1995
;-
;+
 Project     :	SOHO - CDS

 Name        :	XSTRUCT

 Purpose     : widget display of fields within an arbitrary structure

 Explanation :
              Arranges structures in a matrix format with the tag
              name in label widget and the tag value in a text widget.
              If wbase and wtags exist, then widget is just updated
              with input field values.

 Use         : xstruct,stc

 Inputs      : STC = structure name

 Opt. Inputs : None.

 Outputs     : None.

 Opt. Outputs: None.

 Keywords    :
              NX = # of columns by which to arrange widgets (def=2)
              WTAGS = text widget id's for each tag
              WBASE = parent widget base into which place structure
              GROUP = event id of widget that calls XSTRUCT
              JUST_REG = if set, then just register widget
              TITLE = optional widget title
              XOFF, YOFF = offset of structure base relative to calling widget
              EDITABLE = make fields editable
              XSIZE= text widget width [def = 10]
              RECUR = signals that XSTRUCT is being called recursively


 Calls       : xmatrix

 Common      : XSTRUCT

 Restrictions: 
             Input must be a structure.
             Cannot yet safely handle arrays of structures or nested structures

 Side effects: None.

 Category    : Widgets

 Prev. Hist. : None.

 Written     :	Zarro (ARC/GSFC) 20 August 1994

 Modified    :

 Version     : 1
;-
;+
 Project     :	SDAC

 Name        : XTEXT

 Purpose     : text display widget

 Use         : xtext,array

 Inputs      : array = string array to display

 Opt. Inputs : None.

 Outputs     : String array with help info.

 Opt. Outputs: None.

 Keywords    : 
              group = group leader of text widget parent
              font  = font for text widget
              title = title for text widget parent
              space = number of lines to space text
              just_reg = just_reg
              wbase = base widget id
              xoff,yoff = pixel offset relative to caller
              wait = secs to wait before killing widget
              instruct=instruction label for exit button [def = Dismiss]
              xsize,ysize = X-Y sizes for text widget
              append = append to existing text

 Explanation : Useful as a pop up text widget
               e.g. 
                   xtext,'some text',/just_reg,wbase=wbase,group=event.top
                     ...some processing..
                   xkill,wbase

               This example will pop a text window that will
               exist during processing, after which it is destroyed by kill

 Calls       : None.

 Common      : None.

 Restrictions: None.

 Side effects: None.

 Category    : Widgets

 Prev. Hist. : None.

 Written     :	Zarro (ARC/GSFC) 20 August 1994

;-
;+
 Project     : SOHO - CDS

 Name        : XWIN

 Purpose     : Switch to X-windows mode.

 Explanation : SETPLOT is called to save and set the system variables.

 Use         : XWIN

 Inputs      : None.

 Opt. Inputs : None.

 Outputs     : A message is printed to the screen.

 Opt. Outputs: None.

 Keywords    : None.

 Calls       : SETPLOT

 Common      : None.  But calls SETPLOT, which uses common block PLOTFILE.

 Restrictions: It is best if the routines TEK, REGIS, etc. (i.e.  those
		routines that use SETPLOT) are used to change the plotting
		device.

		In general, the SERTS graphics devices routines use the special
		system variables !BCOLOR and !ASPECT.  These system variables
		are defined in the procedure DEVICELIB.  It is suggested that
		the command DEVICELIB be placed in the user's IDL_STARTUP file.

 Side effects: If not the first time this routine is called, then system
		variables that affect plotting are reset to previous values.

 Category    : Utilities, Devices.

 Prev. Hist. : William Thompson

 Written     : William Thompson, GSFC.

 Modified    : Version 1, William Thompson, GSFC, 27 April 1993.
			Incorporated into CDS library.
		Version 2, William Thompson, GSFC, 21 October 1993.
			Renamed to XWIN.

 Version     : Version 2, 21 October 1993.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : YES_NO
               
 Purpose     : Prompts and checks for a user answer of either YES or NO
               
 Explanation : Prompts user for a yes/no answer and will not give up until
               it gets one.
               
 Use         : yes_no, query, answer [,default,check=check]
    
 Inputs      : query    - The question string
               
 Opt. Inputs : default  - The default answer.  If a <CR> response is given,  
                          select the default answer.  If this is not present,
                          the default answer is "NO"

               
 Outputs     : answer - Returns a 0 for no, a 1 for yes
               
 Opt. Outputs: None
               
 Keywords    : check  -   Double check the answer given for super-secure
                          applications.

 Calls       : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, user
               
 Prev. Hist. : Based on Yohkoh routine by M Morrison

 Written     : CDS version by C D Pike, RAL, 12-May-93
               
 Modified    : 

 Version     : Version 1, 12-May-93
;-
;+
 Project     :	SOHO - CDS

 Name        :	
	ZPARCHECK
 Purpose     :	
	Routine to check user parameters to a procedure
 Explanation :	
	Routine to check user parameters to a procedure
 Use         :	
	zparcheck, progname, parameter, parnum, types, dimens, [ message ]

	EXAMPLE:

	IDL> zparcheck, 'HREBIN', hdr, 2, 7, 1, 'FITS Image Header'

	This example checks whether the parameter 'hdr' is of type string (=7)
	and is a vector (1 dimension).   If either of these tests fail, a 
	message will be printed
		"Parameter 2 (FITS Image Header) is undefined"
		"Valid dimensions are 1"
		"Valid types are string"	

 Inputs      :	
	progname  - scalar string name of calling procedure
	parameter - parameter passed to the routine
	parnum    - integer parameter number
	types     - integer scalar or vector of valid types
		 1 - byte        2 - integer  3 - int*4
		 4 - real*4      5 - real*8   6 - complex
		 7 - string      8 - structure
	dimens   - integer scalar or vector giving number
		      of allowed dimensions.

 Opt. Inputs :	
	message - string message describing the parameter to be printed if an 
		error is found

 Outputs     :	None.

 Opt. Outputs:	None.

 Keywords    :	None.

 Calls       :	None.

 Common      :	None.

 Restrictions:	None.

 Side effects:	
	If an error in the parameter is a message is printed
	a RETALL issued

 Category    :	Utilities, Miscellaneous

 Prev. Hist. :	
	version 1  D. Lindler  Dec. 86
	documentation updated.  M. Greason, May 1990.

 Written     :	D. Lindler, GSFC/HRS, December 1986

 Modified    :	Version 1, William Thompson, GSFC, 29 March 1994
			Incorporated into CDS library

 Version     :	Version 1, 29 March 1994
;-
